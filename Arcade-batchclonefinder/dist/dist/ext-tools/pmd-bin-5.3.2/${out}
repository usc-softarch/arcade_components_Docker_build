<?xml version="1.0" encoding="Cp1252"?>
<pmd-cpd>
<duplication lines="318" tokens="2017">
<file line="116" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\java8-support\src\main\java\org\apache\struts2\convention\Java8ClassFinder.java"/>
<file line="108" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\util\finder\DefaultClassFinder.java"/>
<codefragment>
<![CDATA[
    public DefaultClassFinder(List<Class> classes){
        this.classLoaderInterface = null;
        List<Info> infos = new ArrayList<Info>();
        List<Package> packages = new ArrayList<Package>();
        for (Class clazz : classes) {

            Package aPackage = clazz.getPackage();
            if (aPackage != null && !packages.contains(aPackage)){
                infos.add(new PackageInfo(aPackage));
                packages.add(aPackage);
            }

            ClassInfo classInfo = new ClassInfo(clazz, this);
            infos.add(classInfo);
            classInfos.put(classInfo.getName(), classInfo);
            for (Method method : clazz.getDeclaredMethods()) {
                infos.add(new MethodInfo(classInfo, method));
            }

            for (Constructor constructor : clazz.getConstructors()) {
                infos.add(new MethodInfo(classInfo, constructor));
            }

            for (Field field : clazz.getDeclaredFields()) {
                infos.add(new FieldInfo(classInfo, field));
            }
        }

        for (Info info : infos) {
            for (AnnotationInfo annotation : info.getAnnotations()) {
                List<Info> annotationInfos = getAnnotationInfos(annotation.getName());
                annotationInfos.add(info);
            }
        }
    }

    public ClassLoaderInterface getClassLoaderInterface() {
        return classLoaderInterface;
    }

    public boolean isAnnotationPresent(Class<? extends Annotation> annotation) {
        List<Info> infos = annotated.get(annotation.getName());
        return infos != null && !infos.isEmpty();
    }

    public List<String> getClassesNotLoaded() {
        return Collections.unmodifiableList(classesNotLoaded);
    }

    public List<Package> findAnnotatedPackages(Class<? extends Annotation> annotation) {
        classesNotLoaded.clear();
        List<Package> packages = new ArrayList<Package>();
        List<Info> infos = getAnnotationInfos(annotation.getName());
        for (Info info : infos) {
            if (info instanceof PackageInfo) {
                PackageInfo packageInfo = (PackageInfo) info;
                try {
                    Package pkg = packageInfo.get();
                    // double check via proper reflection
                    if (pkg.isAnnotationPresent(annotation)) {
                        packages.add(pkg);
                    }
                } catch (ClassNotFoundException e) {
                    classesNotLoaded.add(packageInfo.getName());
                }
            }
        }
        return packages;
    }

    public List<Class> findAnnotatedClasses(Class<? extends Annotation> annotation) {
        classesNotLoaded.clear();
        List<Class> classes = new ArrayList<Class>();
        List<Info> infos = getAnnotationInfos(annotation.getName());
        for (Info info : infos) {
            if (info instanceof ClassInfo) {
                ClassInfo classInfo = (ClassInfo) info;
                try {
                    Class clazz = classInfo.get();
                    // double check via proper reflection
                    if (clazz.isAnnotationPresent(annotation)) {
                        classes.add(clazz);
                    }
                } catch (Throwable e) {
                    if (LOG.isErrorEnabled())
                        LOG.error("Error loading class [#0]", e, classInfo.getName());
                    classesNotLoaded.add(classInfo.getName());
                }
            }
        }
        return classes;
    }

    public List<Method> findAnnotatedMethods(Class<? extends Annotation> annotation) {
        classesNotLoaded.clear();
        List<ClassInfo> seen = new ArrayList<ClassInfo>();
        List<Method> methods = new ArrayList<Method>();
        List<Info> infos = getAnnotationInfos(annotation.getName());
        for (Info info : infos) {
            if (info instanceof MethodInfo && !"<init>".equals(info.getName())) {
                MethodInfo methodInfo = (MethodInfo) info;
                ClassInfo classInfo = methodInfo.getDeclaringClass();

                if (seen.contains(classInfo)) continue;

                seen.add(classInfo);

                try {
                    Class clazz = classInfo.get();
                    for (Method method : clazz.getDeclaredMethods()) {
                        if (method.isAnnotationPresent(annotation)) {
                            methods.add(method);
                        }
                    }
                } catch (Throwable e) {
                    if (LOG.isErrorEnabled())
                        LOG.error("Error loading class [#0]", e, classInfo.getName());
                    classesNotLoaded.add(classInfo.getName());
                }
            }
        }
        return methods;
    }

    public List<Constructor> findAnnotatedConstructors(Class<? extends Annotation> annotation) {
        classesNotLoaded.clear();
        List<ClassInfo> seen = new ArrayList<ClassInfo>();
        List<Constructor> constructors = new ArrayList<Constructor>();
        List<Info> infos = getAnnotationInfos(annotation.getName());
        for (Info info : infos) {
            if (info instanceof MethodInfo && "<init>".equals(info.getName())) {
                MethodInfo methodInfo = (MethodInfo) info;
                ClassInfo classInfo = methodInfo.getDeclaringClass();

                if (seen.contains(classInfo)) continue;

                seen.add(classInfo);

                try {
                    Class clazz = classInfo.get();
                    for (Constructor constructor : clazz.getConstructors()) {
                        if (constructor.isAnnotationPresent(annotation)) {
                            constructors.add(constructor);
                        }
                    }
                } catch (Throwable e) {
                    if (LOG.isErrorEnabled())
                        LOG.error("Error loading class [#0]", e, classInfo.getName());
                    classesNotLoaded.add(classInfo.getName());
                }
            }
        }
        return constructors;
    }

    public List<Field> findAnnotatedFields(Class<? extends Annotation> annotation) {
        classesNotLoaded.clear();
        List<ClassInfo> seen = new ArrayList<ClassInfo>();
        List<Field> fields = new ArrayList<Field>();
        List<Info> infos = getAnnotationInfos(annotation.getName());
        for (Info info : infos) {
            if (info instanceof FieldInfo) {
                FieldInfo fieldInfo = (FieldInfo) info;
                ClassInfo classInfo = fieldInfo.getDeclaringClass();

                if (seen.contains(classInfo)) continue;

                seen.add(classInfo);

                try {
                    Class clazz = classInfo.get();
                    for (Field field : clazz.getDeclaredFields()) {
                        if (field.isAnnotationPresent(annotation)) {
                            fields.add(field);
                        }
                    }
                } catch (Throwable e) {
                    if (LOG.isErrorEnabled())
                        LOG.error("Error loading class [#0]", e, classInfo.getName());
                    classesNotLoaded.add(classInfo.getName());
                }
            }
        }
        return fields;
    }

    public List<Class> findClassesInPackage(String packageName, boolean recursive) {
        classesNotLoaded.clear();
        List<Class> classes = new ArrayList<Class>();
        for (ClassInfo classInfo : classInfos.values()) {
            try {
                if (recursive && classInfo.getPackageName().startsWith(packageName)){
                    classes.add(classInfo.get());
                } else if (classInfo.getPackageName().equals(packageName)){
                    classes.add(classInfo.get());
                }
            } catch (Throwable e) {
                if (LOG.isErrorEnabled())
                    LOG.error("Error loading class [#0]", e, classInfo.getName());
                classesNotLoaded.add(classInfo.getName());
            }
        }
        return classes;
    }

    public List<Class> findClasses(Test<ClassInfo> test) {
        classesNotLoaded.clear();
        List<Class> classes = new ArrayList<Class>();
        for (ClassInfo classInfo : classInfos.values()) {
            try {
                if (test.test(classInfo)) {
                    classes.add(classInfo.get());
                }
            } catch (Throwable e) {
                if (LOG.isErrorEnabled())
                    LOG.error("Error loading class [#0]", e, classInfo.getName());
                classesNotLoaded.add(classInfo.getName());
            }
        }
        return classes;
    }

    public List<Class> findClasses() {
        classesNotLoaded.clear();
        List<Class> classes = new ArrayList<Class>();
        for (ClassInfo classInfo : classInfos.values()) {
            try {
                classes.add(classInfo.get());
            } catch (Throwable e) {
                if (LOG.isErrorEnabled())
                    LOG.error("Error loading class [#0]", e, classInfo.getName());
                classesNotLoaded.add(classInfo.getName());
            }
        }
        return classes;
    }

    private static List<URL> getURLs(ClassLoaderInterface classLoader, String[] dirNames) {
        List<URL> urls = new ArrayList<URL>();
        for (String dirName : dirNames) {
            try {
                Enumeration<URL> classLoaderURLs = classLoader.getResources(dirName);
                while (classLoaderURLs.hasMoreElements()) {
                    URL url = classLoaderURLs.nextElement();
                    urls.add(url);
                }
            } catch (IOException ioe) {
                if (LOG.isErrorEnabled())
                    LOG.error("Could not read driectory [#0]", ioe, dirName);
            }
        }

        return urls;
    }

    private List<String> file(URL location) {
        List<String> classNames = new ArrayList<String>();
        File dir = new File(URLDecoder.decode(location.getPath()));
        if ("META-INF".equals(dir.getName())) {
            dir = dir.getParentFile(); // Scrape "META-INF" off
        }
        if (dir.isDirectory()) {
            scanDir(dir, classNames, "");
        }
        return classNames;
    }

    private void scanDir(File dir, List<String> classNames, String packageName) {
        File[] files = dir.listFiles();
        for (File file : files) {
            if (file.isDirectory()) {
                scanDir(file, classNames, packageName + file.getName() + ".");
            } else if (file.getName().endsWith(".class")) {
                String name = file.getName();
                name = name.replaceFirst(".class$", "");
                // Classes packaged in an exploded .war (e.g. in a VFS file system) should not
                // have WEB-INF.classes in their package name.
                classNames.add(StringUtils.removeStart(packageName, "WEB-INF.classes.") + name);
            }
        }
    }

    private List<String> jar(URL location) throws IOException {
        URL url = fileManager.normalizeToFileProtocol(location);
        if (url != null) {
            InputStream in = url.openStream();
            try {
                JarInputStream jarStream = new JarInputStream(in);
                return jar(jarStream);
            } finally {
                in.close();
            }
        } else if (LOG.isDebugEnabled())
            LOG.debug("Unable to read [#0]", location.toExternalForm());
        
        return Collections.emptyList();
    }

    private List<String> jar(JarInputStream jarStream) throws IOException {
        List<String> classNames = new ArrayList<String>();

        JarEntry entry;
        while ((entry = jarStream.getNextJarEntry()) != null) {
            if (entry.isDirectory() || !entry.getName().endsWith(".class")) {
                continue;
            }
            String className = entry.getName();
            className = className.replaceFirst(".class$", "");

            //war files are treated as .jar files, so takeout WEB-INF/classes
            className = StringUtils.removeStart(className, "WEB-INF/classes/"); 

            className = className.replace('/', '.');
            classNames.add(className);
        }

        return classNames;
    }
]]>
</codefragment>
</duplication>
<duplication lines="77" tokens="723">
<file line="213" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\conversion\impl\AnnotationXWorkConverterTest.java"/>
<file line="282" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\conversion\impl\XWorkConverterTest.java"/>
<codefragment>
<![CDATA[
        List list = new ArrayList();
        list.add("foo");
        list.add("bar");
        list.add("baz");
        assertEquals(list, converter.convertValue(context, null, null, null, new String[]{
                "foo", "bar", "baz"
        }, List.class));
    }

    public void testStringArrayToPrimitiveWrappers() {
        Long[] longs = (Long[]) converter.convertValue(context, null, null, null, new String[]{
                "123", "456"
        }, Long[].class);
        assertNotNull(longs);
        assertTrue(Arrays.equals(new Long[]{new Long(123), new Long(456)}, longs));

        Integer[] ints = (Integer[]) converter.convertValue(context, null, null, null, new String[]{
                "123", "456"
        }, Integer[].class);
        assertNotNull(ints);
        assertTrue(Arrays.equals(new Integer[]{
                new Integer(123), new Integer(456)
        }, ints));

        Double[] doubles = (Double[]) converter.convertValue(context, null, null, null, new String[]{
                "123", "456"
        }, Double[].class);
        assertNotNull(doubles);
        assertTrue(Arrays.equals(new Double[]{new Double(123), new Double(456)}, doubles));

        Float[] floats = (Float[]) converter.convertValue(context, null, null, null, new String[]{
                "123", "456"
        }, Float[].class);
        assertNotNull(floats);
        assertTrue(Arrays.equals(new Float[]{new Float(123), new Float(456)}, floats));

        Boolean[] booleans = (Boolean[]) converter.convertValue(context, null, null, null, new String[]{
                "true", "false"
        }, Boolean[].class);
        assertNotNull(booleans);
        assertTrue(Arrays.equals(new Boolean[]{Boolean.TRUE, Boolean.FALSE}, booleans));
    }

    public void testStringArrayToPrimitives() throws OgnlException {
        long[] longs = (long[]) converter.convertValue(context, null, null, null, new String[]{
                "123", "456"
        }, long[].class);
        assertNotNull(longs);
        assertTrue(Arrays.equals(new long[]{123, 456}, longs));

        int[] ints = (int[]) converter.convertValue(context, null, null, null, new String[]{
                "123", "456"
        }, int[].class);
        assertNotNull(ints);
        assertTrue(Arrays.equals(new int[]{123, 456}, ints));

        double[] doubles = (double[]) converter.convertValue(context, null, null, null, new String[]{
                "123", "456"
        }, double[].class);
        assertNotNull(doubles);
        assertTrue(Arrays.equals(new double[]{123, 456}, doubles));

        float[] floats = (float[]) converter.convertValue(context, null, null, null, new String[]{
                "123", "456"
        }, float[].class);
        assertNotNull(floats);
        assertTrue(Arrays.equals(new float[]{123, 456}, floats));

        boolean[] booleans = (boolean[]) converter.convertValue(context, null, null, null, new String[]{
                "true", "false"
        }, boolean[].class);
        assertNotNull(booleans);
        assertTrue(Arrays.equals(new boolean[]{true, false}, booleans));
    }

    public void testStringArrayToSet() {
        Set list = new HashSet();
]]>
</codefragment>
</duplication>
<duplication lines="135" tokens="568">
<file line="37" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\StrutsMockJspWriter.java"/>
<file line="37" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\test\java\org\apache\struts2\dojo\views\jsp\ui\StrutsMockJspWriter.java"/>
<codefragment>
<![CDATA[
public class StrutsMockJspWriter extends JspWriter {
    StringWriter writer;

    public StrutsMockJspWriter(StringWriter writer) {
        super(1024, true);
        this.writer = writer;
    }

    public void newLine() throws IOException {
        writer.write("\n");
    }

    public void print(boolean b) throws IOException {
        writer.write(String.valueOf(b));
    }

    public void print(char c) throws IOException {
        writer.write(String.valueOf(c));
    }

    public void print(int i) throws IOException {
        writer.write(i);
    }

    public void print(long l) throws IOException {
        writer.write(String.valueOf(l));
    }

    public void print(float v) throws IOException {
        writer.write(String.valueOf(v));
    }

    public void print(double v) throws IOException {
        writer.write(String.valueOf(v));
    }

    public void print(char[] chars) throws IOException {
        writer.write(chars);
    }

    public void print(String s) throws IOException {
        writer.write(s);
    }

    public void print(Object o) throws IOException {
        writer.write(o.toString());
    }

    public void println() throws IOException {
        writer.write("\n");
    }

    public void println(boolean b) throws IOException {
        print(b);
        println();
    }

    public void println(char c) throws IOException {
        print(c);
        println();
    }

    public void println(int i) throws IOException {
        print(i);
        println();
    }

    public void println(long l) throws IOException {
        print(l);
        println();
    }

    public void println(float v) throws IOException {
        print(v);
        println();
    }

    public void println(double v) throws IOException {
        print(v);
        println();
    }

    public void println(char[] chars) throws IOException {
        print(chars);
        println();
    }

    public void println(String s) throws IOException {
        print(s);
        println();
    }

    public void println(Object o) throws IOException {
        print(o);
        println();
    }

    public void clear() throws IOException {
    }

    public void clearBuffer() throws IOException {
    }

    public void close() throws IOException {
        writer.close();
    }

    public int getRemaining() {
        return 0;
    }

    public void write(char cbuf[], int off, int len) throws IOException {
        writer.write(cbuf, off, len);
    }

    public void write(String str) throws IOException {
        writer.write(str);
    }

    public void write(int c) throws IOException {
        writer.write(c);
    }

    public void write(char[] cbuf) throws IOException {
        writer.write(cbuf);
    }

    public void write(String str, int off, int len) throws IOException {
        writer.write(str, off, len);
    }

    public void flush() {
        writer.flush();
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="119" tokens="566">
<file line="116" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\validator\AnnotationActionValidatorManager.java"/>
<file line="104" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\validator\DefaultActionValidatorManager.java"/>
<codefragment>
<![CDATA[
                Validator validator = validatorFactory.getValidator(cfg);
                validator.setValidatorType(cfg.getType());
                validator.setValueStack(stack);
                validators.add(validator);
            }
        }
        return validators;
    }

    public void validate(Object object, String context) throws ValidationException {
        validate(object, context, (String) null);
    }

    public void validate(Object object, String context, String method) throws ValidationException {
        ValidatorContext validatorContext = new DelegatingValidatorContext(object);
        validate(object, context, validatorContext, method);
    }

    public void validate(Object object, String context, ValidatorContext validatorContext) throws ValidationException {
        validate(object, context, validatorContext, null);
    }

    public void validate(Object object, String context, ValidatorContext validatorContext, String method) throws ValidationException {
        List<Validator> validators = getValidators(object.getClass(), context, method);
        Set<String> shortcircuitedFields = null;

        for (final Validator validator : validators) {
        try {
                validator.setValidatorContext(validatorContext);

                if (LOG.isDebugEnabled()) {
                    LOG.debug("Running validator: " + validator + " for object " + object + " and method " + method);
                }

                FieldValidator fValidator = null;
                String fullFieldName = null;

                if (validator instanceof FieldValidator) {
                    fValidator = (FieldValidator) validator;
                    fullFieldName = fValidator.getValidatorContext().getFullFieldName(fValidator.getFieldName());

                    if ((shortcircuitedFields != null) && shortcircuitedFields.contains(fullFieldName)) {
                        if (LOG.isDebugEnabled()) {
                            LOG.debug("Short-circuited, skipping");
                        }

                        continue;
                    }
                }

                if (validator instanceof ShortCircuitableValidator && ((ShortCircuitableValidator) validator).isShortCircuit()) {
                    // get number of existing errors
                    List<String> errs = null;

                    if (fValidator != null) {
                        if (validatorContext.hasFieldErrors()) {
                            Collection<String> fieldErrors = validatorContext.getFieldErrors().get(fullFieldName);

                            if (fieldErrors != null) {
                                errs = new ArrayList<String>(fieldErrors);
                            }
                        }
                    } else if (validatorContext.hasActionErrors()) {
                        Collection<String> actionErrors = validatorContext.getActionErrors();

                        if (actionErrors != null) {
                            errs = new ArrayList<String>(actionErrors);
                        }
                    }

                    validator.validate(object);

                    if (fValidator != null) {
                        if (validatorContext.hasFieldErrors()) {
                            Collection<String> errCol = validatorContext.getFieldErrors().get(fullFieldName);

                            if ((errCol != null) && !errCol.equals(errs)) {
                                if (LOG.isDebugEnabled()) {
                                    LOG.debug("Short-circuiting on field validation");
                                }

                                if (shortcircuitedFields == null) {
                                    shortcircuitedFields = new TreeSet<String>();
                                }

                                shortcircuitedFields.add(fullFieldName);
                            }
                        }
                    } else if (validatorContext.hasActionErrors()) {
                        Collection<String> errCol = validatorContext.getActionErrors();

                        if ((errCol != null) && !errCol.equals(errs)) {
                            if (LOG.isDebugEnabled()) {
                                LOG.debug("Short-circuiting");
                            }

                            break;
                        }
                    }

                    continue;
                }

                validator.validate(object);
            }
            finally {
                validator.setValidatorContext(null);
            }
        }
    }

    /**
     * Builds a key for validators - used when caching validators.
     *
     * @param clazz the action.
     * @param context the action's context.
     * @return a validator key which is the class name plus context.
     */
    protected static String buildValidatorKey(Class clazz, String context) {
]]>
</codefragment>
</duplication>
<duplication lines="71" tokens="544">
<file line="125" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\test\java\org\apache\struts2\portlet\dispatcher\Jsr168DispatcherTest.java"/>
<file line="59" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\test\java\org\apache\struts2\portlet\dispatcher\Jsr286DispatcherTest.java"/>
<codefragment>
<![CDATA[
	public void testRender_ok() {
		final Mock mockResponse = mock(RenderResponse.class);
		mockResponse.stubs().method(ANYTHING);

		PortletMode mode = PortletMode.VIEW;

		Map<String, String[]> requestParams = new HashMap<String, String[]>();
		requestParams.put(ACTION_PARAM, new String[] { "/view/testAction" });
		requestParams.put(EVENT_ACTION, new String[] { "true" });
		requestParams.put(MODE_PARAM, new String[] { mode.toString() });

		Map<String, Object> sessionMap = new HashMap<String, Object>();

		Map<String, String> initParams = new HashMap<String, String>();
		initParams.put("viewNamespace", "/view");
		initParams.put(StrutsConstants.STRUTS_ALWAYS_SELECT_FULL_NAMESPACE,
				"true");

		initPortletConfig(initParams, new HashMap<String, Object>());
		initRequest(requestParams, new HashMap<String, Object>(), sessionMap,
				PortletMode.VIEW, WindowState.NORMAL, false, null);
		setupActionFactory("/view", "testAction", "success",
				EasyMock.createNiceMock(ValueStack.class));

		mockInvocation.expects(once()).method("getStack")
				.will(returnValue(null));
		try {
			dispatcher
					.setActionProxyFactory((ActionProxyFactory) mockActionFactory
							.proxy());
			dispatcher.init((PortletConfig) mockConfig.proxy());
			dispatcher.render((RenderRequest) mockRequest.proxy(),
					(RenderResponse) mockResponse.proxy());
		} catch (Exception e) {
			e.printStackTrace();
			fail("Error occured");
		}
	}

	public void testProcessAction_ok() {
		final Mock mockResponse = mock(ActionResponse.class);

		PortletMode mode = PortletMode.VIEW;
		Map<String, String> initParams = new HashMap<String, String>();
		initParams.put("viewNamespace", "/view");

		Map<String, String[]> requestParams = new HashMap<String, String[]>();
		requestParams.put(ACTION_PARAM, new String[] { "/view/testAction" });
		requestParams.put(MODE_PARAM, new String[] { mode.toString() });

		initParams.put(StrutsConstants.STRUTS_ALWAYS_SELECT_FULL_NAMESPACE,
				"true");
		initPortletConfig(initParams, new HashMap<String, Object>());
		initRequest(requestParams, new HashMap<String, Object>(),
				new HashMap<String, Object>(), PortletMode.VIEW,
				WindowState.NORMAL, true, null);
		setupActionFactory("/view", "testAction", "success",
				EasyMock.createNiceMock(ValueStack.class));

		try {
			dispatcher
					.setActionProxyFactory((ActionProxyFactory) mockActionFactory
							.proxy());
			dispatcher.init((PortletConfig) mockConfig.proxy());
			dispatcher.processAction((ActionRequest) mockRequest.proxy(),
					(ActionResponse) mockResponse.proxy());
		} catch (Exception e) {
			e.printStackTrace();
			fail("Error occured");
		}
	}
]]>
</codefragment>
</duplication>
<duplication lines="94" tokens="534">
<file line="29" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\util\logging\commons\CommonsLogger.java"/>
<file line="28" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\util\logging\log4j2\Log4j2Logger.java"/>
<codefragment>
<![CDATA[
    public Log4j2Logger(org.apache.logging.log4j.Logger log) {
        this.log = log;
    }

    public void error(String msg, String... args) {
        log.error(LoggerUtils.format(msg, args));
    }

    public void error(String msg, Object... args) {
        log.error(LoggerUtils.format(msg, args));
    }

    public void error(String msg, Throwable ex, String... args) {
        log.error(LoggerUtils.format(msg, args), ex);
    }

    public void info(String msg, String... args) {
        log.info(LoggerUtils.format(msg, args));
    }

    public void info(String msg, Throwable ex, String... args) {
        log.info(LoggerUtils.format(msg, args), ex);
    }

    public boolean isInfoEnabled() {
        return log.isInfoEnabled();
    }

    public void warn(String msg, String... args) {
        log.warn(LoggerUtils.format(msg, args));
    }

    public void warn(String msg, Object... args) {
        log.warn(LoggerUtils.format(msg, args));
    }

    public void warn(String msg, Throwable ex, String... args) {
        log.warn(LoggerUtils.format(msg, args), ex);
    }
    
    public boolean isDebugEnabled() {
        return log.isDebugEnabled();
    }
    
    public void debug(String msg, String... args) {
        log.debug(LoggerUtils.format(msg, args));
    }

    public void debug(String msg, Object... args) {
        log.debug(LoggerUtils.format(msg, args));
    }

    public void debug(String msg, Throwable ex, String... args) {
        log.debug(LoggerUtils.format(msg, args), ex);
    }
    
    public boolean isTraceEnabled() {
        return log.isTraceEnabled();
    }
    
    public void trace(String msg, String... args) {
        log.trace(LoggerUtils.format(msg, args));
    }

    public void trace(String msg, Object... args) {
        log.trace(LoggerUtils.format(msg, args));
    }

    public void trace(String msg, Throwable ex, String... args) {
        log.trace(LoggerUtils.format(msg, args), ex);
    }


    public void fatal(String msg, String... args) {
        log.fatal(LoggerUtils.format(msg, args));
    }

    public void fatal(String msg, Throwable ex, String... args) {
        log.fatal(LoggerUtils.format(msg, args), ex);
    }

    public boolean isErrorEnabled() {
        return log.isErrorEnabled();
    }

    public boolean isFatalEnabled() {
        return log.isFatalEnabled();
    }

    public boolean isWarnEnabled() {
        return log.isWarnEnabled();
    }

}
]]>
</codefragment>
</duplication>
<duplication lines="168" tokens="532">
<file line="43" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\StrutsMockHttpServletRequest.java"/>
<file line="43" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\test\java\org\apache\struts2\dojo\views\jsp\ui\StrutsMockHttpServletRequest.java"/>
<file line="39" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\json\src\test\java\org\apache\struts2\json\StrutsMockHttpServletRequest.java"/>
<codefragment>
<![CDATA[
public class StrutsMockHttpServletRequest extends MockHttpServletRequest {

    Locale locale = Locale.US;
    private Map attributes = new HashMap();
    private Map parameterMap = new HashMap();
    private String context = "";
    private String pathInfo = "";
    private String queryString;
    private String requestURI;
    private String scheme;
    private String serverName;
    private int serverPort;
    private String encoding;
    private String requestDispatherString;


    public void setAttribute(String s, Object o) {
        attributes.put(s, o);
    }

    public Object getAttribute(String s) {
        return attributes.get(s);
    }

    public Enumeration getAttributeNames() {
        Vector v = new Vector();
        v.addAll(attributes.keySet());

        return v.elements();
    }

    public String getContextPath() {
        return this.context;
    }

    public void setLocale(Locale locale) {
        this.locale = locale;
    }

    public Locale getLocale() {
        return locale;
    }

    public void setCharacterEncoding(String s) {
        this.encoding = s;
    }

    public String getCharacterEncoding() {
        return encoding;
    }

    public void setParameterMap(Map parameterMap) {
        this.parameterMap = parameterMap;
    }

    public Map getParameterMap() {
        return parameterMap;
    }

    public String getParameter(String string) {
        return (String) parameterMap.get(string);
    }

    public Enumeration getParameterNames() {
        return Collections.enumeration(parameterMap.keySet());
    }

    public String[] getParameterValues(String string) {
        return (String[]) parameterMap.get(string);
    }

    public String getPathInfo() {
        return pathInfo;
    }

    public void setQueryString(String queryString) {
        this.queryString = queryString;
    }

    public String getQueryString() {
        return queryString;
    }

    public RequestDispatcher getRequestDispatcher(String string) {
        this.requestDispatherString = string;
        return super.getRequestDispatcher(string);
    }

    /**
     * Get's the source string that was used in the last getRequestDispatcher method call.
     */
    public String getRequestDispatherString() {
        return requestDispatherString;
    }

    public void setRequestURI(String requestURI) {
        this.requestURI = requestURI;
    }

    public String getRequestURI() {
        return requestURI;
    }

    public void setScheme(String scheme) {
        this.scheme = scheme;
    }

    public String getScheme() {
        return scheme;
    }

    public void setServerName(String serverName) {
        this.serverName = serverName;
    }

    public String getServerName() {
        return serverName;
    }

    public void setServerPort(int serverPort) {
        this.serverPort = serverPort;
    }

    public int getServerPort() {
        return serverPort;
    }

    public HttpSession getSession() {
        HttpSession session = null;

        try {
            session = super.getSession();
        } catch (AssertionFailedError e) {
            //ignore
        }

        if (session == null) {
            session = new StrutsMockHttpSession();
            setSession(session);
        }

        return session;
    }

    public void setupGetContext(String context) {
        this.context = context;
    }

    public void setupGetPathInfo(String pathInfo) {
        this.pathInfo = pathInfo;
    }

    public int getRemotePort() {
        return 0;
    }

    public String getLocalName() {
        return null;
    }

    public String getLocalAddr() {
        return null;
    }

    public int getLocalPort() {
        return 0;
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="92" tokens="467">
<file line="191" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\test\java\org\apache\struts2\portlet\dispatcher\Jsr168DispatcherTest.java"/>
<file line="247" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\test\java\org\apache\struts2\portlet\dispatcher\Jsr286DispatcherTest.java"/>
<codefragment>
<![CDATA[
	}

	/**
	 * Initialize the mock request (and as a result, the mock session)
	 * 
	 * @param requestParams
	 *            The request parameters
	 * @param requestAttributes
	 *            The request attributes
	 * @param sessionParams
	 *            The session attributes
	 * @param mode
	 *            The portlet mode
	 * @param state
	 *            The portlet window state
	 * @param isEvent
	 *            <code>true</code> when the request is an ActionRequest.
	 * @param locale
	 *            The locale. If <code>null</code>, the request will return
	 *            <code>Locale.getDefault()</code>
	 */
	private void initRequest(Map<String, String[]> requestParams,
			Map<String, Object> requestAttributes,
			Map<String, Object> sessionParams, PortletMode mode,
			WindowState state, boolean isEvent, Locale locale) {
		mockRequest = isEvent ? mock(ActionRequest.class)
				: mock(RenderRequest.class);
		mockSession = mock(PortletSession.class);
		mockSession.stubs().method(ANYTHING);
		mockRequest.stubs().method(ANYTHING);
		setupStub(sessionParams, mockSession, "getAttribute");
		mockSession
				.stubs()
				.method("getAttributeNames")
				.will(returnValue(Collections.enumeration(sessionParams
						.keySet())));
		setupParamStub(requestParams, mockRequest, "getParameter");
		setupStub(requestAttributes, mockRequest, "getAttribute");
		mockRequest
				.stubs()
				.method("getAttributeNames")
				.will(returnValue(Collections.enumeration(requestAttributes
						.keySet())));
		mockRequest.stubs().method("getParameterMap")
				.will(returnValue(requestParams));
		mockRequest
				.stubs()
				.method("getParameterNames")
				.will(returnValue(Collections.enumeration(requestParams
						.keySet())));
		mockRequest.stubs().method("getPortletSession")
				.will(returnValue(mockSession.proxy()));
		if (locale != null) {
			mockRequest.stubs().method("getLocale").will(returnValue(locale));
		} else {
			mockRequest.stubs().method("getLocale")
					.will(returnValue(Locale.getDefault()));
		}
		mockRequest.stubs().method("getPortletMode").will(returnValue(mode));
		mockRequest.stubs().method("getWindowState").will(returnValue(state));
	}

	private void setupParamStub(Map<String, String[]> requestParams,
			Mock mockRequest, String method) {
		Map<String, String> newMap = new HashMap<String, String>();
		for (String key : requestParams.keySet()) {
			String[] val = requestParams.get(key);
			newMap.put(key, val[0]);
		}
		setupStub(newMap, mockRequest, method);

	}

	/**
	 * Set up stubs for the mock.
	 * 
	 * @param map
	 *            The map containing the <code>key</code> and
	 *            <code>values</code>. The key is the expected parameter to
	 *            <code>method</code>, and value is the value that should be
	 *            returned from the stub.
	 * @param mock
	 *            The mock to initialize.
	 * @param method
	 *            The name of the method to stub.
	 */
	private void setupStub(Map map, Mock mock, String method) {
		for (Object key : map.keySet()) {
			Object val = map.get(key);
			mock.stubs().method(method).with(eq(key)).will(returnValue(val));
		}
	}
]]>
</codefragment>
</duplication>
<duplication lines="75" tokens="453">
<file line="28" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\util\logging\log4j2\Log4j2Logger.java"/>
<file line="28" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\util\logging\slf4j\Slf4jLogger.java"/>
<codefragment>
<![CDATA[
    public Slf4jLogger(org.slf4j.Logger log) {
        this.log = log;
    }

    public void error(String msg, String... args) {
        log.error(LoggerUtils.format(msg, args));
    }

    public void error(String msg, Object... args) {
        log.error(LoggerUtils.format(msg, args));
    }

    public void error(String msg, Throwable ex, String... args) {
        log.error(LoggerUtils.format(msg, args), ex);
    }

    public void info(String msg, String... args) {
        log.info(LoggerUtils.format(msg, args));
    }

    public void info(String msg, Throwable ex, String... args) {
        log.info(LoggerUtils.format(msg, args), ex);
    }

    public boolean isInfoEnabled() {
        return log.isInfoEnabled();
    }

    public void warn(String msg, String... args) {
        log.warn(LoggerUtils.format(msg, args));
    }

    public void warn(String msg, Object... args) {
        log.warn(LoggerUtils.format(msg, args));
    }

    public void warn(String msg, Throwable ex, String... args) {
        log.warn(LoggerUtils.format(msg, args), ex);
    }
    
    public boolean isDebugEnabled() {
        return log.isDebugEnabled();
    }
    
    public void debug(String msg, String... args) {
        log.debug(LoggerUtils.format(msg, args));
    }

    public void debug(String msg, Object... args) {
        log.debug(LoggerUtils.format(msg, args));
    }

    public void debug(String msg, Throwable ex, String... args) {
        log.debug(LoggerUtils.format(msg, args), ex);
    }
    
    public boolean isTraceEnabled() {
        return log.isTraceEnabled();
    }
    
    public void trace(String msg, String... args) {
        log.trace(LoggerUtils.format(msg, args));
    }

    public void trace(String msg, Object... args) {
        log.trace(LoggerUtils.format(msg, args));
    }

    public void trace(String msg, Throwable ex, String... args) {
        log.trace(LoggerUtils.format(msg, args), ex);
    }


    public void fatal(String msg, String... args) {
        log.error(LoggerUtils.format(msg, args));
]]>
</codefragment>
</duplication>
<duplication lines="75" tokens="451">
<file line="29" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\util\logging\commons\CommonsLogger.java"/>
<file line="28" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\util\logging\slf4j\Slf4jLogger.java"/>
<codefragment>
<![CDATA[
    public Slf4jLogger(org.slf4j.Logger log) {
        this.log = log;
    }

    public void error(String msg, String... args) {
        log.error(LoggerUtils.format(msg, args));
    }

    public void error(String msg, Object... args) {
        log.error(LoggerUtils.format(msg, args));
    }

    public void error(String msg, Throwable ex, String... args) {
        log.error(LoggerUtils.format(msg, args), ex);
    }

    public void info(String msg, String... args) {
        log.info(LoggerUtils.format(msg, args));
    }

    public void info(String msg, Throwable ex, String... args) {
        log.info(LoggerUtils.format(msg, args), ex);
    }

    public boolean isInfoEnabled() {
        return log.isInfoEnabled();
    }

    public void warn(String msg, String... args) {
        log.warn(LoggerUtils.format(msg, args));
    }

    public void warn(String msg, Object... args) {
        log.warn(LoggerUtils.format(msg, args));
    }

    public void warn(String msg, Throwable ex, String... args) {
        log.warn(LoggerUtils.format(msg, args), ex);
    }
    
    public boolean isDebugEnabled() {
        return log.isDebugEnabled();
    }
    
    public void debug(String msg, String... args) {
        log.debug(LoggerUtils.format(msg, args));
    }

    public void debug(String msg, Object... args) {
        log.debug(LoggerUtils.format(msg, args));
    }

    public void debug(String msg, Throwable ex, String... args) {
        log.debug(LoggerUtils.format(msg, args), ex);
    }
    
    public boolean isTraceEnabled() {
        return log.isTraceEnabled();
    }
    
    public void trace(String msg, String... args) {
        log.trace(LoggerUtils.format(msg, args));
    }

    public void trace(String msg, Object... args) {
        log.trace(LoggerUtils.format(msg, args));
    }

    public void trace(String msg, Throwable ex, String... args) {
        log.trace(LoggerUtils.format(msg, args), ex);
    }


    public void fatal(String msg, String... args) {
        log.error(LoggerUtils.format(msg, args));
]]>
</codefragment>
</duplication>
<duplication lines="58" tokens="443">
<file line="69" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\test\java\org\apache\struts2\portlet\dispatcher\Jsr168DispatcherTest.java"/>
<file line="190" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\test\java\org\apache\struts2\portlet\dispatcher\Jsr286DispatcherTest.java"/>
<codefragment>
<![CDATA[
		dispatcher = new Jsr286Dispatcher();
	}

	private void initPortletConfig(final Map<String, String> initParams,
			final Map<String, Object> attributes) {
		mockConfig = mock(PortletConfig.class);
		mockCtx = mock(PortletContext.class);
		mockConfig.stubs().method(ANYTHING);
		mockCtx.stubs().method(ANYTHING);
		setupStub(initParams, mockConfig, "getInitParameter");
		mockCtx.stubs()
				.method("getAttributeNames")
				.will(returnValue(Collections.enumeration(attributes.keySet())));
		setupStub(attributes, mockCtx, "getAttribute");
		mockConfig.stubs().method("getPortletContext")
				.will(returnValue(mockCtx.proxy()));
		mockCtx.stubs()
				.method("getInitParameterNames")
				.will(returnValue(Collections.enumeration(initParams.keySet())));
		setupStub(initParams, mockCtx, "getInitParameter");
		mockConfig
				.stubs()
				.method("getInitParameterNames")
				.will(returnValue(Collections.enumeration(initParams.keySet())));
		setupStub(initParams, mockConfig, "getInitParameter");
		mockConfig.stubs().method("getResourceBundle")
				.will(returnValue(new ListResourceBundle() {
					protected Object[][] getContents() {
						return new String[][] { { "javax.portlet.title",
								"MyTitle" } };
					}
				}));
	}

	private void setupActionFactory(String namespace, String actionName,
			String result, ValueStack stack) {
		if (mockActionFactory == null) {
			mockActionFactory = mock(ActionProxyFactory.class);
		}
		mockAction = mock(Action.class);
		mockActionProxy = mock(ActionProxy.class);
		mockInvocation = mock(ActionInvocation.class);

		mockActionFactory
				.expects(once())
				.method("createActionProxy")
				.with(new Constraint[] { eq(namespace), eq(actionName), NULL,
						isA(Map.class) })
				.will(returnValue(mockActionProxy.proxy()));
		mockActionProxy.stubs().method("getAction")
				.will(returnValue(mockAction.proxy()));
		mockActionProxy.expects(once()).method("execute")
				.will(returnValue(result));
		mockActionProxy.expects(once()).method("getInvocation")
				.will(returnValue(mockInvocation.proxy()));
		mockInvocation.stubs().method("getStack").will(returnValue(stack));

	}
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="424">
<file line="375" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\convention\src\test\java\org\apache\struts2\convention\DefaultResultMapBuilderTest.java"/>
<file line="414" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\convention\src\test\java\org\apache\struts2\convention\DefaultResultMapBuilderTest.java"/>
<codefragment>
<![CDATA[
        Map<String, ResultConfig> results = builder.build(InheritedResultsExtends.class, null, "class-level-results", packageConfig);
        assertEquals(4, results.size());
        assertEquals("error", results.get("error").getName());
        assertEquals("input", results.get("input").getName());
        assertEquals("success", results.get("success").getName());
        assertEquals("failure", results.get("failure").getName());
        assertEquals(3, results.get("error").getParams().size());
        assertEquals("org.apache.struts2.dispatcher.ServletDispatcherResult", results.get("error").getClassName());
        assertEquals("/WEB-INF/location/namespace/error.jsp", results.get("error").getParams().get("location"));
        assertEquals("ann-value", results.get("error").getParams().get("key"));
        assertEquals("ann-value1", results.get("error").getParams().get("key1"));
        assertEquals(1, results.get("input").getParams().size());
        assertEquals("foo.action", results.get("input").getParams().get("actionName"));
        assertEquals("org.apache.struts2.dispatcher.ServletActionRedirectResult", results.get("input").getClassName());
        assertEquals(3, results.get("failure").getParams().size());
        assertEquals("/WEB-INF/location/namespace/action-failure.jsp", results.get("failure").getParams().get("location"));
        assertEquals("org.apache.struts2.dispatcher.ServletDispatcherResult", results.get("failure").getClassName());
        assertEquals("value", results.get("failure").getParams().get("key"));
        assertEquals("value1", results.get("failure").getParams().get("key1"));
        assertEquals(3, results.get("success").getParams().size());
        assertEquals("/WEB-INF/location/namespace/action-success.jsp", results.get("success").getParams().get("location"));
        assertEquals("org.apache.struts2.dispatcher.ServletDispatcherResult", results.get("success").getClassName());
        assertEquals("value", results.get("success").getParams().get("key"));
        assertEquals("value1", results.get("success").getParams().get("key1"));
        EasyMock.verify(context);
    }

    public void testActionLevelSingleResultAnnotation() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="129" tokens="418">
<file line="43" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\StrutsMockServletContext.java"/>
<file line="40" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\json\src\test\java\org\apache\struts2\json\StrutsMockServletContext.java"/>
<codefragment>
<![CDATA[
public class StrutsMockServletContext implements ServletContext {

    String realPath;
    String servletInfo;
    String contextPath;
    Map initParams = new HashMap();
    Map attributes = new HashMap();
    InputStream resourceAsStream;

    public void setInitParameter(String name, String value) {
        initParams.put(name, value);
    }

    public void setRealPath(String value) {
        realPath = value;
    }

    public String getRealPath(String string) {
        return realPath;
    }

    public ServletContext getContext(String s) {
        return null;
    }

    public int getMajorVersion() {
        return 0;
    }

    public int getMinorVersion() {
        return 0;
    }

    public String getMimeType(String s) {
        return null;
    }

    public Set getResourcePaths(String s) {
        return null;
    }

    public URL getResource(String s) throws MalformedURLException {
        return null;
    }

    public InputStream getResourceAsStream(String s) {
        if (resourceAsStream != null) {
            return resourceAsStream;
        }
        return null;
    }

    public void setResourceAsStream(InputStream is) {
        this.resourceAsStream = is;
    }

    public RequestDispatcher getRequestDispatcher(String s) {
        return null;
    }

    public RequestDispatcher getNamedDispatcher(String s) {
        return null;
    }

    public Servlet getServlet(String s) throws ServletException {
        return null;
    }

    public Enumeration getServlets() {
        return null;
    }

    public Enumeration getServletNames() {
        return null;
    }

    public void log(String s) {
    }

    public void log(Exception e, String s) {
    }

    public void log(String s, Throwable throwable) {
    }

    public String getServerInfo() {
        return servletInfo;
    }

    public String getInitParameter(String s) {
        return (String) initParams.get(s);
    }

    public Enumeration getInitParameterNames() {
        return Collections.enumeration(initParams.keySet());
    }

    public Object getAttribute(String s) {
        return attributes.get(s);
    }

    public Enumeration getAttributeNames() {
        return Collections.enumeration(attributes.keySet());
    }

    public void setAttribute(String s, Object o) {
        attributes.put(s, o);
    }

    public void removeAttribute(String s) {
        attributes.remove(s);
    }

    public String getServletContextName() {
        return null;
    }

    public void setServletInfo(String servletInfo) {
        this.servletInfo = servletInfo;
    }

    public String getContextPath() {
        return contextPath;
    }

    public void setContextPath(String contextPath) {
        this.contextPath = contextPath;
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="115" tokens="382">
<file line="48" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\StrutsMockServletContext.java"/>
<file line="47" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\test\java\org\apache\struts2\dojo\views\jsp\ui\StrutsMockServletContext.java"/>
<codefragment>
<![CDATA[
    Map initParams = new HashMap();
    Map attributes = new HashMap();
    InputStream resourceAsStream;

    public void setInitParameter(String name, String value) {
        initParams.put(name, value);
    }

    public void setRealPath(String value) {
        realPath = value;
    }

    public String getRealPath(String string) {
        return realPath;
    }

    public ServletContext getContext(String s) {
        return null;
    }

    public int getMajorVersion() {
        return 0;
    }

    public int getMinorVersion() {
        return 0;
    }

    public String getMimeType(String s) {
        return null;
    }

    public Set getResourcePaths(String s) {
        return null;
    }

    public URL getResource(String s) throws MalformedURLException {
        return null;
    }

    public InputStream getResourceAsStream(String s) {
        if (resourceAsStream != null) {
            return resourceAsStream;
        }
        return null;
    }

    public void setResourceAsStream(InputStream is) {
        this.resourceAsStream = is;
    }

    public RequestDispatcher getRequestDispatcher(String s) {
        return null;
    }

    public RequestDispatcher getNamedDispatcher(String s) {
        return null;
    }

    public Servlet getServlet(String s) throws ServletException {
        return null;
    }

    public Enumeration getServlets() {
        return null;
    }

    public Enumeration getServletNames() {
        return null;
    }

    public void log(String s) {
    }

    public void log(Exception e, String s) {
    }

    public void log(String s, Throwable throwable) {
    }

    public String getServerInfo() {
        return servletInfo;
    }

    public String getInitParameter(String s) {
        return (String) initParams.get(s);
    }

    public Enumeration getInitParameterNames() {
        return Collections.enumeration(initParams.keySet());
    }

    public Object getAttribute(String s) {
        return attributes.get(s);
    }

    public Enumeration getAttributeNames() {
        return Collections.enumeration(attributes.keySet());
    }

    public void setAttribute(String s, Object o) {
        attributes.put(s, o);
    }

    public void removeAttribute(String s) {
        attributes.remove(s);
    }

    public String getServletContextName() {
        return null;
    }

    public void setServletInfo(String servletInfo) {
        this.servletInfo = servletInfo;
    }
]]>
</codefragment>
</duplication>
<duplication lines="101" tokens="377">
<file line="60" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\freemarker\tags\TagModelTest.java"/>
<file line="193" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\freemarker\tags\TagModelTest.java"/>
<codefragment>
<![CDATA[
        MockHttpServletResponse response = new MockHttpServletResponse();

        Map params = new LinkedHashMap();

        // Try to test out the commons Freemarker's Template Model

        // TemplateBooleanModel
        params.put("property1", new TemplateBooleanModel() {
            public boolean getAsBoolean() throws TemplateModelException {
                return true;
            }
        });
        params.put("property2", new TemplateBooleanModel() {
            public boolean getAsBoolean() throws TemplateModelException {
                return false;
            }
        });

        // TemplateScalarModel
        params.put("property3", new TemplateScalarModel() {
            public String getAsString() throws TemplateModelException {
                return "toby";
            }
        });
        params.put("property4", new TemplateScalarModel() {
            public String getAsString() throws TemplateModelException {
                return "phil";
            }
        });

        // TemplateNumberModel
        params.put("property5", new TemplateNumberModel() {
            public Number getAsNumber() throws TemplateModelException {
                return new Integer("10");
            }
        });
        params.put("property6", new TemplateNumberModel() {
            public Number getAsNumber() throws TemplateModelException {
                return new Float("1.1");
            }
        });

        // TemplateHashModel
        params.put("property7", new TemplateHashModel() {
            public TemplateModel get(String arg0) throws TemplateModelException {
                return null;
            }

            public boolean isEmpty() throws TemplateModelException {
                return true;
            }
        });

        // TemplateSequenceModel
        params.put("property8", new TemplateSequenceModel() {
            public TemplateModel get(int arg0) throws TemplateModelException {
                return null;
            }

            public int size() throws TemplateModelException {
                return 0;
            }
        });

        // TemplateCollectionModel
        params.put("property9", new TemplateCollectionModel() {
            public TemplateModelIterator iterator() throws TemplateModelException {
                return new TemplateModelIterator() {
                    private Iterator i;
                    {
                        i = Collections.EMPTY_LIST.iterator();
                    }

                    public boolean hasNext() throws TemplateModelException {
                        return i.hasNext();
                    }

                    public TemplateModel next() throws TemplateModelException {
                        return (TemplateModel) i.next();
                    }
                };
            }
        });

        // AdapterTemplateModel
        params.put("property10", new AdapterTemplateModel() {
            public Object getAdaptedObject(Class arg0) {
                return ADAPTER_TEMPLATE_MODEL_CONTAINED_OBJECT;
            }
        });

        // WrapperTemplateModel
        params.put("property11", new WrapperTemplateModel() {
            public Object getWrappedObject() {
                return WRAPPING_TEMPLATE_MODEL_CONTAINED_OBJECT;
            }
        });

        TagModel tagModel = new TagModel(stack, request, response) {
            protected Component getBean() {
                return bean;
]]>
</codefragment>
</duplication>
<duplication lines="75" tokens="350">
<file line="30" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\apps\showcase\src\main\java\org\apache\struts2\showcase\ajax\tree\Category.java"/>
<file line="32" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\test\java\org\apache\struts2\dojo\views\jsp\ui\Category.java"/>
<codefragment>
<![CDATA[
public class Category {
    private static Map<Long, Category> catMap = new HashMap<Long, Category>();

    static {
        new Category(1, "Root",
                new Category(2, "Java",
                        new Category(3, "Web Frameworks",
                                new Category(4, "Struts"),
                                new Category(7, "Stripes"),
                                new Category(8, "Rife")),
                        new Category(9, "Persistence",
                                new Category(10, "iBatis"),
                                new Category(11, "Hibernate"),
                                new Category(12, "JDO"),
                                new Category(13, "JDBC"))),
                new Category(14, "JavaScript",
                        new Category(15, "Dojo"),
                        new Category(16, "Prototype"),
                        new Category(17, "Scriptaculous"),
                        new Category(18, "OpenRico"),
                        new Category(19, "DWR")));
    }

    public static Category getById(long id) {
        return catMap.get(id);
    }

    private long id;
    private String name;
    private List<Category> children;
    private boolean toggle;

    public Category(long id, String name, Category... children) {
        this.id = id;
        this.name = name;
        this.children = new ArrayList<Category>();
        for (Category child : children) {
            this.children.add(child);
        }

        catMap.put(id, this);
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public List<Category> getChildren() {
        return children;
    }

    public void setChildren(List<Category> children) {
        this.children = children;
    }

    public void toggle() {
        toggle = !toggle;
    }

    public boolean isToggle() {
        return toggle;
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="72" tokens="346">
<file line="189" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\main\java\org\apache\struts2\components\Anchor.java"/>
<file line="157" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\main\java\org\apache\struts2\components\URL.java"/>
<codefragment>
<![CDATA[
    }

    @StrutsTagAttribute(description="The includeParams attribute may have the value 'none', 'get' or 'all'", defaultValue="none")
    public void setIncludeParams(String includeParams) {
        urlProvider.setIncludeParams(includeParams);
    }

    @StrutsTagAttribute(description="Set scheme attribute")
    public void setScheme(String scheme) {
        urlProvider.setScheme(scheme);
    }

    @StrutsTagAttribute(description="The target value to use, if not using action")
    public void setValue(String value) {
        urlProvider.setValue(value);
    }

    @StrutsTagAttribute(description="The action to generate the URL for, if not using value")
    public void setAction(String action) {
        urlProvider.setAction(action);
    }

    @StrutsTagAttribute(description="The namespace to use")
    public void setNamespace(String namespace) {
        urlProvider.setNamespace(namespace);
    }

    @StrutsTagAttribute(description="The method of action to use")
    public void setMethod(String method) {
        urlProvider.setMethod(method);
    }

    @StrutsTagAttribute(description="Whether to encode parameters", type="Boolean", defaultValue="true")
    public void setEncode(boolean encode) {
        urlProvider.setEncode(encode);
    }

    @StrutsTagAttribute(description="Whether actual context should be included in URL", type="Boolean", defaultValue="true")
    public void setIncludeContext(boolean includeContext) {
        urlProvider.setIncludeContext(includeContext);
    }

    @StrutsTagAttribute(description="The resulting portlet mode")
    public void setPortletMode(String portletMode) {
        urlProvider.setPortletMode(portletMode);
    }

    @StrutsTagAttribute(description="The resulting portlet window state")
    public void setWindowState(String windowState) {
        urlProvider.setWindowState(windowState);
    }

    @StrutsTagAttribute(description="Specifies if this should be a portlet render or action URL. Default is \"render\". To create an action URL, use \"action\".")
    public void setPortletUrlType(String portletUrlType) {
       urlProvider.setPortletUrlType(portletUrlType);
    }

    @StrutsTagAttribute(description="The anchor for this URL")
    public void setAnchor(String anchor) {
        urlProvider.setAnchor(anchor);
    }

    @StrutsTagAttribute(description="Specifies whether to escape ampersand (&amp;) to (&amp;amp;) or not", type="Boolean", defaultValue="true")
    public void setEscapeAmp(boolean escapeAmp) {
        urlProvider.setEscapeAmp(escapeAmp);
    }

    @StrutsTagAttribute(description="Specifies whether to force the addition of scheme, host and port or not", type="Boolean", defaultValue="false")
    public void setForceAddSchemeHostAndPort(boolean forceAddSchemeHostAndPort) {
        urlProvider.setForceAddSchemeHostAndPort(forceAddSchemeHostAndPort);
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="79" tokens="312">
<file line="130" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\components\AbstractRemoteBean.java"/>
<file line="149" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\components\Bind.java"/>
<codefragment>
<![CDATA[
    }
    
    @Override
    @StrutsTagSkipInheritance
    public void setTheme(String theme) {
        super.setTheme(theme);
    }
    
    @Override
    public String getTheme() {
        return "ajax";
    }

    //these attributes are overwritten here just for the TLD generation
    
    @StrutsTagAttribute(description="Topic that will trigger the remote call")
    public void setListenTopics(String listenTopics) {
        this.listenTopics = listenTopics;
    }

    @StrutsTagAttribute(description="The URL to call to obtain the content. Note: If used with ajax context, the value must be set as an url tag value.")
    public void setHref(String href) {
        this.href = href;
    }


    @StrutsTagAttribute(description="The text to display to the user if the is an error fetching the content")
    public void setErrorText(String errorText) {
        this.errorText = errorText;
    }

    @StrutsTagAttribute(description="Javascript code in the fetched content will be executed", type="Boolean", defaultValue="false")
    public void setExecuteScripts(String executeScripts) {
        this.executeScripts = executeScripts;
    }

    @StrutsTagAttribute(description="Text to be shown while content is being fetched", defaultValue="Loading...")
    public void setLoadingText(String loadingText) {
        this.loadingText = loadingText;
    }


    @StrutsTagAttribute(description="Javascript function name that will make the request")
    public void setHandler(String handler) {
        this.handler = handler;
    }


    @StrutsTagAttribute(description="Function name used to filter the fields of the form.")
    public void setFormFilter(String formFilter) {
        this.formFilter = formFilter;
    }

    @StrutsTagAttribute(description="Form id whose fields will be serialized and passed as parameters")
    public void setFormId(String formId) {
        this.formId = formId;
    }

    @StrutsTagAttribute(description="Comma delimmited list of topics that will published before and after the request, and on errors")
    public void setNotifyTopics(String notifyTopics) {
        this.notifyTopics = notifyTopics;
    }

    @StrutsTagAttribute(description="Set whether errors will be shown or not", type="Boolean", defaultValue="true")
    public void setShowErrorTransportText(String showError) {
        this.showErrorTransportText = showError;
    }

    @StrutsTagAttribute(description="Id of element that will be shown while making request")
    public void setIndicator(String indicator) {
        this.indicator = indicator;
    }

    @StrutsTagAttribute(description="Show loading text on targets", type="Boolean", defaultValue="false")
    public void setShowLoadingText(String showLoadingText) {
        this.showLoadingText = showLoadingText;
    }

    @StrutsTagSkipInheritance
]]>
</codefragment>
</duplication>
<duplication lines="51" tokens="295">
<file line="479" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\java8-support\src\main\java\org\apache\struts2\convention\Java8ClassFinder.java"/>
<file line="497" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\util\finder\DefaultClassFinder.java"/>
<codefragment>
<![CDATA[
        }

        @Override
        public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {
            if (name.endsWith("package-info")) {
                info = new PackageInfo(javaName(name), classFinder);
            } else {
                ClassInfo classInfo = new ClassInfo(javaName(name), javaName(superName), classFinder);

                for (String interfce : interfaces) {
                    classInfo.getInterfaces().add(javaName(interfce));
                }
                info = classInfo;
                classInfos.put(classInfo.getName(), classInfo);

                if (extractBaseInterfaces)
                    extractSuperInterfaces(classInfo);
            }
        }

        private void extractSuperInterfaces(ClassInfo classInfo) {
            String superType = classInfo.getSuperType();

            if (superType != null) {
                ClassInfo base = classInfos.get(superType);

                if (base == null) {
                    //try to load base
                    String resource = superType.replace('.', '/') + ".class";
                    readClassDef(resource);
                    base = classInfos.get(superType);
                }

                if (base != null) {
                    List<String> interfaces = classInfo.getSuperInterfaces();
                    interfaces.addAll(base.getSuperInterfaces());
                    interfaces.addAll(base.getInterfaces());
                }
            }
        }

        private String javaName(String name) {
            return (name == null)? null:name.replace('/', '.');
        }

        @Override
        public AnnotationVisitor visitAnnotation(String desc, boolean visible) {
            AnnotationInfo annotationInfo = new AnnotationInfo(desc);
            info.getAnnotations().add(annotationInfo);
            getAnnotationInfos(annotationInfo.getName()).add(info);
            return new InfoBuildingVisitor(annotationInfo, classFinder);
]]>
</codefragment>
</duplication>
<duplication lines="64" tokens="295">
<file line="98" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\OptionTransferSelectTagTest.java"/>
<file line="238" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\OptionTransferSelectTagTest.java"/>
<codefragment>
<![CDATA[
    public void testWithoutHeaderOnOneSide() throws Exception {
        List left = new ArrayList();
        left.add("Left2");

        List right = new ArrayList();
        right.add("Right2");

        List leftVal = new ArrayList();
        leftVal.add("Left1");
        leftVal.add("Left2");
        leftVal.add("Left3");

        List rightVal = new ArrayList();
        rightVal.add("Right1");
        rightVal.add("Right2");
        rightVal.add("Right3");


        TestAction testaction = (TestAction) action;
        testaction.setCollection(left);
        testaction.setList2(right);
        testaction.setCollection2(leftVal);
        testaction.setList3(rightVal);


        OptionTransferSelectTag tag = new OptionTransferSelectTag();
        tag.setPageContext(pageContext);

        tag.setName("collection");
        tag.setId("id");
        tag.setList("collection2");
        tag.setSize("20");
        tag.setMultiple("true");
        tag.setEmptyOption("true");

        tag.setDoubleName("list2");
        tag.setDoubleList("list3");
        tag.setDoubleId("doubleId");
        tag.setDoubleSize("20");
        tag.setMultiple("true");
        tag.setDoubleEmptyOption("true");

        tag.setAllowAddAllToLeft("true");
        tag.setAllowAddAllToRight("true");
        tag.setAllowAddToLeft("true");
        tag.setAllowAddToRight("true");
        tag.setAllowSelectAll("true");

        tag.setAddAllToLeftLabel("All Left");
        tag.setAddAllToRightLabel("All Right");
        tag.setAddToLeftLabel("Left");
        tag.setAddToRightLabel("Right");
        tag.setSelectAllLabel("Select All");

        tag.setLeftTitle("Title Left");
        tag.setRightTitle("Title Right");

        tag.setButtonCssClass("buttonCssClass");
        tag.setButtonCssStyle("buttonCssStyle");

        tag.setHeaderKey("Header Key");
        tag.setHeaderValue("Header Value");

        tag.doStartTag();
]]>
</codefragment>
</duplication>
<duplication lines="34" tokens="289">
<file line="43" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\config\providers\XmlConfigurationProviderAllowedMethodsTest.java"/>
<file line="98" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\config\providers\XmlConfigurationProviderAllowedMethodsTest.java"/>
<codefragment>
<![CDATA[
        assertFalse(action.isAllowedMethod("xyz"));

        action = (ActionConfig) actionConfigs.get("Boring");
        assertEquals(0, action.getAllowedMethods().size());
        assertTrue(action.isAllowedMethod("execute"));
        assertFalse(action.isAllowedMethod("foo"));
        assertFalse(action.isAllowedMethod("bar"));
        assertFalse(action.isAllowedMethod("baz"));
        assertFalse(action.isAllowedMethod("xyz"));

        action = (ActionConfig) actionConfigs.get("Foo");
        assertEquals(1, action.getAllowedMethods().size());
        assertTrue(action.isAllowedMethod("execute"));
        assertTrue(action.isAllowedMethod("foo"));
        assertFalse(action.isAllowedMethod("bar"));
        assertFalse(action.isAllowedMethod("baz"));
        assertFalse(action.isAllowedMethod("xyz"));

        action = (ActionConfig) actionConfigs.get("Bar");
        assertEquals(2, action.getAllowedMethods().size());
        assertTrue(action.isAllowedMethod("execute"));
        assertTrue(action.isAllowedMethod("foo"));
        assertTrue(action.isAllowedMethod("bar"));
        assertFalse(action.isAllowedMethod("baz"));
        assertFalse(action.isAllowedMethod("xyz"));

        action = (ActionConfig) actionConfigs.get("Baz");
        assertEquals(2, action.getAllowedMethods().size());
        assertFalse(action.isAllowedMethod("execute"));
        assertTrue(action.isAllowedMethod("foo"));
        assertTrue(action.isAllowedMethod("bar"));
        assertTrue(action.isAllowedMethod("baz"));
        assertFalse(action.isAllowedMethod("xyz"));
    }
]]>
</codefragment>
</duplication>
<duplication lines="40" tokens="286">
<file line="140" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\AbstractUITagTest.java"/>
<file line="160" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\test\java\org\apache\struts2\dojo\views\jsp\ui\AbstractUITagTest.java"/>
<codefragment>
<![CDATA[
        Map result = new HashMap();
        new PropertyHolder("name", "someName").addToMap(result);
        new PropertyHolder("id", "someId").addToMap(result);
        new PropertyHolder("cssClass", "cssClass1", "class=\"cssClass1\"").addToMap(result);
        new PropertyHolder("cssStyle", "cssStyle1", "style=\"cssStyle1\"").addToMap(result);
        new PropertyHolder("title", "someTitle").addToMap(result);
        new PropertyHolder("disabled", "true", "disabled=\"disabled\"").addToMap(result);
        //new PropertyHolder("label", "label", "label=\"label\"").addToMap(result);
        //new PropertyHolder("required", "someTitle").addToMap(result);
        new PropertyHolder("tabindex", "99").addToMap(result);
        new PropertyHolder("value", "someValue").addToMap(result);
        new PropertyHolder("onclick", "onclick1").addToMap(result);
        new PropertyHolder("ondblclick", "ondblclick1").addToMap(result);
        new PropertyHolder("onmousedown", "onmousedown1").addToMap(result);
        new PropertyHolder("onmouseup", "onmouseup1").addToMap(result);
        new PropertyHolder("onmouseover", "onmouseover1").addToMap(result);
        new PropertyHolder("onmousemove", "onmousemove1").addToMap(result);
        new PropertyHolder("onmouseout", "onmouseout1").addToMap(result);
        new PropertyHolder("onfocus", "onfocus1").addToMap(result);
        new PropertyHolder("onblur", "onblur1").addToMap(result);
        new PropertyHolder("onkeypress", "onkeypress1").addToMap(result);
        new PropertyHolder("onkeydown", "onkeydown1").addToMap(result);
        new PropertyHolder("onkeyup", "onkeyup1").addToMap(result);
        new PropertyHolder("onclick", "onclick1").addToMap(result);
        new PropertyHolder("onselect", "onchange").addToMap(result);
        return result;
    }

    /**
     * Do a generic verification that setting certain properties on a tag causes expected output regarding this
     * property. In most cases you would not call this directly, instead use {@link
     * #verifyGenericProperties(org.apache.struts2.views.jsp.ui.AbstractUITag, String, String[])}.
     *
     * @param tag              The fresh created tag instance to test.
     * @param theme            The theme to use. If <tt>null</tt>, use configured default theme.
     * @param propertiesToTest Map of {@link PropertyHolder}s, defining properties to test.
     * @param exclude          Names of properties to exclude from particular test.
     * @throws Exception
     */
    public void verifyGenericProperties(AbstractUITag tag, String theme, Map propertiesToTest, String[] exclude) throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="61" tokens="283">
<file line="98" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\OptionTransferSelectTagTest.java"/>
<file line="171" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\OptionTransferSelectTagTest.java"/>
<codefragment>
<![CDATA[
    public void testWithoutHeaderOnBothSides() throws Exception {
        List left = new ArrayList();
        left.add("Left2");

        List right = new ArrayList();
        right.add("Right2");

        List leftVal = new ArrayList();
        leftVal.add("Left1");
        leftVal.add("Left2");
        leftVal.add("Left3");

        List rightVal = new ArrayList();
        rightVal.add("Right1");
        rightVal.add("Right2");
        rightVal.add("Right3");


        TestAction testaction = (TestAction) action;
        testaction.setCollection(left);
        testaction.setList2(right);
        testaction.setCollection2(leftVal);
        testaction.setList3(rightVal);


        OptionTransferSelectTag tag = new OptionTransferSelectTag();
        tag.setPageContext(pageContext);

        tag.setName("collection");
        tag.setId("id");
        tag.setList("collection2");
        tag.setSize("20");
        tag.setMultiple("true");
        tag.setEmptyOption("true");

        tag.setDoubleName("list2");
        tag.setDoubleList("list3");
        tag.setDoubleId("doubleId");
        tag.setDoubleSize("20");
        tag.setMultiple("true");
        tag.setDoubleEmptyOption("true");

        tag.setAllowAddAllToLeft("true");
        tag.setAllowAddAllToRight("true");
        tag.setAllowAddToLeft("true");
        tag.setAllowAddToRight("true");
        tag.setAllowSelectAll("true");

        tag.setAddAllToLeftLabel("All Left");
        tag.setAddAllToRightLabel("All Right");
        tag.setAddToLeftLabel("Left");
        tag.setAddToRightLabel("Right");
        tag.setSelectAllLabel("Select All");

        tag.setLeftTitle("Title Left");
        tag.setRightTitle("Title Right");

        tag.setButtonCssClass("buttonCssClass");
        tag.setButtonCssStyle("buttonCssStyle");

        tag.doStartTag();
]]>
</codefragment>
</duplication>
<duplication lines="51" tokens="280">
<file line="37" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\DoubleSelectTest.java"/>
<file line="100" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\DoubleSelectTest.java"/>
<codefragment>
<![CDATA[
    public void testOnchange() throws Exception {
        TestAction testAction = (TestAction) action;

        Region antwerp = new Region("Antwerp", "AN");
        Region gent = new Region("Gent", "GN");
        Region brugge = new Region("Brugge", "BRG");
        ArrayList belgiumRegions = new ArrayList();
        belgiumRegions.add(antwerp);
        belgiumRegions.add(gent);
        belgiumRegions.add(brugge);
        Country belgium = new Country("Belgium", "BE", belgiumRegions);

        Region paris = new Region("Paris", "PA");
        Region bordeaux = new Region("Bordeaux", "BOR");
        ArrayList franceRegions = new ArrayList();
        franceRegions.add(paris);
        franceRegions.add(bordeaux);
        Country france = new Country("France", "FR", franceRegions);

        Collection collection = new ArrayList(2);
        collection.add("AN");
        testAction.setCollection(collection);

        List countries = new ArrayList();
        countries.add(belgium);
        countries.add(france);

        testAction.setList2(countries);

        DoubleSelectTag tag = new DoubleSelectTag();
        tag.setPageContext(pageContext);
        tag.setLabel("mylabel");
        tag.setName("foo");
        tag.setDoubleName("region");

        tag.setList("list2");
        tag.setDoubleList("regions");

        tag.setListKey("iso");
        tag.setDoubleListKey("key");
        tag.setListValue("name");
        tag.setDoubleListValue("name");

        tag.setFormName("inputForm");

        tag.setOnmousedown("window.status='onmousedown';");
        tag.setOnmousemove("window.status='onmousemove';");
        tag.setOnmouseout("window.status='onmouseout';");
        tag.setOnmouseover("window.status='onmouseover';");
        tag.setOnmouseup("window.status='onmouseup';");
        tag.setOnchange("window.status='onchange';");
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="276">
<file line="70" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\config\providers\XmlConfigurationProviderInterceptorParamOverridingTest.java"/>
<file line="59" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\config\providers\XmlConfigurationProviderInterceptorStackParamOverridingTest.java"/>
<codefragment>
<![CDATA[
    	InterceptorMapping actionTwoInterceptorMapping3 = (InterceptorMapping) actionTwoInterceptors.get(2);

    	assertNotNull(actionOneInterceptorMapping1);
    	assertNotNull(actionOneInterceptorMapping2);
    	assertNotNull(actionOneInterceptorMapping3);
    	assertNotNull(actionTwoInterceptorMapping1);
    	assertNotNull(actionTwoInterceptorMapping2);
    	assertNotNull(actionTwoInterceptorMapping3);


    	assertEquals(((InterceptorForTestPurpose)actionOneInterceptorMapping1.getInterceptor()).getParamOne(), "i1p1");
		assertEquals(((InterceptorForTestPurpose)actionOneInterceptorMapping1.getInterceptor()).getParamTwo(), "i1p2");
		assertEquals(((InterceptorForTestPurpose)actionOneInterceptorMapping2.getInterceptor()).getParamOne(), "i2p1");
		assertEquals(((InterceptorForTestPurpose)actionOneInterceptorMapping2.getInterceptor()).getParamTwo(), null);
		assertEquals(((InterceptorForTestPurpose)actionOneInterceptorMapping3.getInterceptor()).getParamOne(), null);
		assertEquals(((InterceptorForTestPurpose)actionOneInterceptorMapping3.getInterceptor()).getParamTwo(), null);

    	assertEquals(((InterceptorForTestPurpose)actionTwoInterceptorMapping1.getInterceptor()).getParamOne(), null);
		assertEquals(((InterceptorForTestPurpose)actionTwoInterceptorMapping1.getInterceptor()).getParamTwo(), null);
		assertEquals(((InterceptorForTestPurpose)actionTwoInterceptorMapping2.getInterceptor()).getParamOne(), null);
		assertEquals(((InterceptorForTestPurpose)actionTwoInterceptorMapping2.getInterceptor()).getParamTwo(), "i2p2");
		assertEquals(((InterceptorForTestPurpose)actionTwoInterceptorMapping3.getInterceptor()).getParamOne(), "i3p1");
		assertEquals(((InterceptorForTestPurpose)actionTwoInterceptorMapping3.getInterceptor()).getParamTwo(), "i3p2");

    }

    @Override
    protected void tearDown() throws Exception {
    	configurationManager.clearContainerProviders();
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="44" tokens="273">
<file line="99" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\interceptor\MessageStorePreResultListenerTest.java"/>
<file line="180" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\interceptor\MessageStorePreResultListenerTest.java"/>
<codefragment>
<![CDATA[
        interceptor.setOperationMode(MessageStoreInterceptor.STORE_MODE);

        MessageStorePreResultListener listener = new MessageStorePreResultListener(interceptor);

        Map paramMap = new LinkedHashMap();
        Map sessionMap = new LinkedHashMap();

        ActionSupport action = new ActionSupport();
        action.addActionError("some action error 1");
        action.addActionError("some action error 2");
        action.addActionMessage("some action message 1");
        action.addActionMessage("some action message 2");
        action.addFieldError("field1", "some field error 1");
        action.addFieldError("field2", "some field error 2");

        ActionContext actionContext = new ActionContext(new HashMap());
        actionContext.put(ActionContext.PARAMETERS, paramMap);
        actionContext.put(ActionContext.SESSION, sessionMap);

        HttpSession mockedSession = EasyMock.createControl().createMock(HttpSession.class);
        HttpServletRequest mockedRequest = EasyMock.createControl().createMock(HttpServletRequest.class);
        mockedRequest.getSession(false);
        EasyMock.expectLastCall().andReturn(mockedSession);
        EasyMock.expectLastCall().once();
        ServletActionContext.setRequest(mockedRequest);

        EasyMock.replay(mockedRequest);

        HttpServletResponse mockedResponse = EasyMock.createControl().createMock(HttpServletResponse.class);
        mockedResponse.isCommitted();
        EasyMock.expectLastCall().andReturn(false);
        EasyMock.expectLastCall().once();
        ServletActionContext.setResponse(mockedResponse);

        EasyMock.replay(mockedResponse);

        // Mock (ActionInvocation)
        ActionInvocation mockActionInvocation = EasyMock.createControl().createMock(ActionInvocation.class);
        mockActionInvocation.getInvocationContext();
        EasyMock.expectLastCall().andReturn(actionContext);
        EasyMock.expectLastCall().anyTimes();

        mockActionInvocation.getAction();
        EasyMock.expectLastCall().andReturn(action);
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="267">
<file line="62" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\config\providers\InterceptorBuilderTest.java"/>
<file line="119" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\config\providers\InterceptorBuilderTest.java"/>
<codefragment>
<![CDATA[
                        put("interceptorStack3.interceptor2.param2", "interceptor2_value2");
                    }
                }, null, objectFactory);

        assertEquals(interceptorMappings.size(), 2);

        assertEquals(((InterceptorMapping) interceptorMappings.get(0)).getName(), "interceptor1");
        assertNotNull(((InterceptorMapping) interceptorMappings.get(0)).getInterceptor());
        assertEquals(((InterceptorMapping) interceptorMappings.get(0)).getInterceptor().getClass(), MockInterceptor1.class);
        assertEquals(((MockInterceptor1) ((InterceptorMapping) interceptorMappings.get(0)).getInterceptor()).getParam1(), "interceptor1_value1");
        assertEquals(((MockInterceptor1) ((InterceptorMapping) interceptorMappings.get(0)).getInterceptor()).getParam2(), "interceptor1_value2");

        assertEquals(((InterceptorMapping) interceptorMappings.get(1)).getName(), "interceptor2");
        assertNotNull(((InterceptorMapping) interceptorMappings.get(1)).getInterceptor());
        assertEquals(((InterceptorMapping) interceptorMappings.get(1)).getInterceptor().getClass(), MockInterceptor2.class);
        assertEquals(((MockInterceptor2) ((InterceptorMapping) interceptorMappings.get(1)).getInterceptor()).getParam1(), "interceptor2_value1");
        assertEquals(((MockInterceptor2) ((InterceptorMapping) interceptorMappings.get(1)).getInterceptor()).getParam2(), "interceptor2_value2");
    }

    /**
     * Try to test this
     * <interceptor-ref name="interceptorStack1">
     * <param name="interceptorStack2.interceptorStack3.interceptorStack4.interceptor1.param1">interceptor1_value1</param>
     * <param name="interceptorStack2.interceptorStack3.interceptorStack4.interceptor1.param2">interceptor1_value2</param>
     * <param name="interceptorStack5.interceptor2.param1">interceptor2_value1</param>
     * <param name="interceptorStack5.interceptor2.param2">interceptor2_value2</param>
     * </interceptor-ref>
     *
     * @throws Exception
     */
    public void testBuildInterceptor_3() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="266">
<file line="62" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\config\providers\InterceptorBuilderTest.java"/>
<file line="190" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\config\providers\InterceptorBuilderTest.java"/>
<codefragment>
<![CDATA[
                        put("interceptorStack5.interceptor2.param2", "interceptor2_value2");
                    }
                }, null, objectFactory);

        assertEquals(interceptorMappings.size(), 2);

        assertEquals(((InterceptorMapping) interceptorMappings.get(0)).getName(), "interceptor1");
        assertNotNull(((InterceptorMapping) interceptorMappings.get(0)).getInterceptor());
        assertEquals(((InterceptorMapping) interceptorMappings.get(0)).getInterceptor().getClass(), MockInterceptor1.class);
        assertEquals(((MockInterceptor1) ((InterceptorMapping) interceptorMappings.get(0)).getInterceptor()).getParam1(), "interceptor1_value1");
        assertEquals(((MockInterceptor1) ((InterceptorMapping) interceptorMappings.get(0)).getInterceptor()).getParam2(), "interceptor1_value2");

        assertEquals(((InterceptorMapping) interceptorMappings.get(1)).getName(), "interceptor2");
        assertNotNull(((InterceptorMapping) interceptorMappings.get(1)).getInterceptor());
        assertEquals(((InterceptorMapping) interceptorMappings.get(1)).getInterceptor().getClass(), MockInterceptor2.class);
        assertEquals(((MockInterceptor2) ((InterceptorMapping) interceptorMappings.get(1)).getInterceptor()).getParam1(), "interceptor2_value1");
        assertEquals(((MockInterceptor2) ((InterceptorMapping) interceptorMappings.get(1)).getInterceptor()).getParam2(), "interceptor2_value2");
    }


    public static class MockInterceptor1 implements Interceptor {
]]>
</codefragment>
</duplication>
<duplication lines="39" tokens="264">
<file line="74" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\java8-support\src\main\java\org\apache\struts2\convention\Java8ClassFinder.java"/>
<file line="66" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\util\finder\DefaultClassFinder.java"/>
<codefragment>
<![CDATA[
    public DefaultClassFinder(ClassLoaderInterface classLoaderInterface, Collection<URL> urls, boolean extractBaseInterfaces, Set<String> protocols, Test<String> classNameFilter) {
        this.classLoaderInterface = classLoaderInterface;
        this.extractBaseInterfaces = extractBaseInterfaces;
        this.fileManager = ActionContext.getContext().getInstance(FileManagerFactory.class).getFileManager();

        List<String> classNames = new ArrayList<String>();
        for (URL location : urls) {
            try {
                if (protocols.contains(location.getProtocol())) {
                    classNames.addAll(jar(location));
                } else if ("file".equals(location.getProtocol())) {
                    try {
                        // See if it's actually a jar
                        URL jarUrl = new URL("jar", "", location.toExternalForm() + "!/");
                        JarURLConnection juc = (JarURLConnection) jarUrl.openConnection();
                        juc.getJarFile();
                        classNames.addAll(jar(jarUrl));
                    } catch (IOException e) {
                        classNames.addAll(file(location));
                    }
                }
            } catch (Exception e) {
                if (LOG.isErrorEnabled())
                    LOG.error("Unable to read URL [#0]", e, location.toExternalForm());
            }
        }

        for (String className : classNames) {
            try {
                if (classNameFilter.test(className))
                    readClassDef(className);
            } catch (Throwable e) {
                if (LOG.isErrorEnabled())
                    LOG.error("Unable to read class [#0]", e, className);
            }
        }
    }

    public DefaultClassFinder(Class... classes){
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="264">
<file line="77" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\freemarker\FreemarkerResultMockedTest.java"/>
<file line="128" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\freemarker\FreemarkerResultMockedTest.java"/>
<codefragment>
<![CDATA[
        EasyMock.expect(servletContext.getRealPath("/template/simple/radiomap.ftl")).andReturn(file.getAbsolutePath());

        file = new File(ClassLoaderUtil.getResource("template/simple/css.ftl", getClass()).toURI());
        EasyMock.expect(servletContext.getRealPath("/template/simple/css.ftl")).andReturn(file.getAbsolutePath());
        EasyMock.expect(servletContext.getRealPath("/template/~~~simple/css.ftl")).andReturn(file.getAbsolutePath());

        file = new File(ClassLoaderUtil.getResource("template/simple/scripting-events.ftl", getClass()).toURI());
        EasyMock.expect(servletContext.getRealPath("/template/simple/scripting-events.ftl")).andReturn(file.getAbsolutePath());
        EasyMock.expect(servletContext.getRealPath("/template/~~~simple/scripting-events.ftl")).andReturn(file.getAbsolutePath());

        file = new File(ClassLoaderUtil.getResource("template/simple/common-attributes.ftl", getClass()).toURI());
        EasyMock.expect(servletContext.getRealPath("/template/simple/common-attributes.ftl")).andReturn(file.getAbsolutePath());
        EasyMock.expect(servletContext.getRealPath("/template/~~~simple/common-attributes.ftl")).andReturn(file.getAbsolutePath());

        file = new File(ClassLoaderUtil.getResource("template/simple/dynamic-attributes.ftl", getClass()).toURI());
        EasyMock.expect(servletContext.getRealPath("/template/simple/dynamic-attributes.ftl")).andReturn(file.getAbsolutePath());
        EasyMock.expect(servletContext.getRealPath("/template/~~~simple/dynamic-attributes.ftl")).andReturn(file.getAbsolutePath());

        EasyMock.replay(servletContext);

        init();

        request.setRequestURI("/tutorial/test7.action");
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="262">
<file line="73" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\conversion\impl\AnnotationXWorkConverterTest.java"/>
<file line="91" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\conversion\impl\XWorkConverterTest.java"/>
<codefragment>
<![CDATA[
    public void testArrayToNumberConversion() {
        String[] value = new String[]{"12345"};
        assertEquals(new Integer(12345), converter.convertValue(context, null, null, null, value, Integer.class));
        assertEquals(new Long(12345), converter.convertValue(context, null, null, null, value, Long.class));
        value[0] = "123.45";
        assertEquals(new Float(123.45), converter.convertValue(context, null, null, null, value, Float.class));
        assertEquals(new Double(123.45), converter.convertValue(context, null, null, null, value, Double.class));
        value[0] = "1234567890123456789012345678901234567890";
        assertEquals(new BigInteger(value[0]), converter.convertValue(context, null, null, null, value, BigInteger.class));
        value[0] = "1234567890123456789.012345678901234567890";
        assertEquals(new BigDecimal(value[0]), converter.convertValue(context, null, null, null, value, BigDecimal.class));
    }

    public void testDateConversion() throws ParseException {
        java.sql.Date sqlDate = new java.sql.Date(System.currentTimeMillis());
        assertEquals(sqlDate, converter.convertValue(context, null, null, null, sqlDate, Date.class));

        SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss");
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="256">
<file line="322" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\conversion\impl\AnnotationXWorkConverterTest.java"/>
<file line="429" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\conversion\impl\XWorkConverterTest.java"/>
<codefragment>
<![CDATA[
        Bar bar = (Bar) converter.convertValue(null, null, null, null, "blah:123", Bar.class);
        assertNotNull("conversion failed", bar);
        assertEquals(123, bar.getSomethingElse());
        assertEquals("blah", bar.getTitle());
    }

    public void testStringToPrimitiveWrappers() {
        assertEquals(new Long(123), converter.convertValue(context, null, null, null, "123", Long.class));
        assertEquals(new Integer(123), converter.convertValue(context, null, null, null, "123", Integer.class));
        assertEquals(new Double(123.5), converter.convertValue(context, null, null, null, "123.5", Double.class));
        assertEquals(new Float(123.5), converter.convertValue(context, null, null, null, "123.5", float.class));
        assertEquals(new Boolean(false), converter.convertValue(context, null, null, null, "false", Boolean.class));
        assertEquals(new Boolean(true), converter.convertValue(context, null, null, null, "true", Boolean.class));
    }

    public void testStringToPrimitives() {
        assertEquals(new Long(123), converter.convertValue(context, null, null, null, "123", long.class));
        assertEquals(new Double(123.5), converter.convertValue(context, null, null, null, "123.5", double.class));
]]>
</codefragment>
</duplication>
<duplication lines="38" tokens="243">
<file line="64" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\junit\src\main\java\org\apache\struts2\StrutsJUnit4TestCase.java"/>
<file line="59" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\junit\src\main\java\org\apache\struts2\StrutsTestCase.java"/>
<codefragment>
<![CDATA[
public abstract class StrutsTestCase extends XWorkTestCase {
    protected MockHttpServletResponse response;
    protected MockHttpServletRequest request;
    protected MockPageContext pageContext;
    protected MockServletContext servletContext;
    protected Map<String, String> dispatcherInitParams;
    protected Dispatcher dispatcher;

    protected DefaultResourceLoader resourceLoader = new DefaultResourceLoader();

    static {
        ConsoleHandler handler = new ConsoleHandler();
        final SimpleDateFormat df = new SimpleDateFormat("mm:ss.SSS");
        Formatter formatter = new Formatter() {
            @Override
            public String format(LogRecord record) {
                StringBuilder sb = new StringBuilder();
                sb.append(record.getLevel());
                sb.append(':');
                for (int x = 9 - record.getLevel().toString().length(); x > 0; x--) {
                    sb.append(' ');
                }
                sb.append('[');
                sb.append(df.format(new Date(record.getMillis())));
                sb.append("] ");
                sb.append(formatMessage(record));
                sb.append('\n');
                return sb.toString();
            }
        };
        handler.setFormatter(formatter);
        Logger logger = Logger.getLogger("");
        if (logger.getHandlers().length > 0)
            logger.removeHandler(logger.getHandlers()[0]);
        logger.addHandler(handler);
        logger.setLevel(Level.WARNING);
        LoggerFactory.setLoggerFactory(new JdkLoggerFactory());
    }
]]>
</codefragment>
</duplication>
<duplication lines="76" tokens="232">
<file line="36" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\StrutsMockHttpServletResponse.java"/>
<file line="15" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\json\src\test\java\org\apache\struts2\json\StrutsMockHttpServletResponse.java"/>
<codefragment>
<![CDATA[
public class StrutsMockHttpServletResponse extends MockHttpServletResponse {
    private Locale locale;
    private PrintWriter writer;
    private int status;
    private String redirectURL;
    private String contentType;
    private String encoding;

    public Locale getLocale() {
        return locale;
    }

    public void setLocale(Locale locale) {
        this.locale = locale;
    }

    public String getContentType() {
        return contentType;  //To change body of implemented methods use File | Settings | File Templates.
    }

    @Override
    public void setContentType(String type) {
        this.contentType = type;
    }

    public PrintWriter getWriter() throws IOException {
        if (writer == null)
            return new PrintWriter(new ByteArrayOutputStream());
        else
            return writer;
    }

    public void setCharacterEncoding(String string) {
        this.encoding = string;
    }

    public void setWriter(PrintWriter writer) {
        this.writer = writer;
    }

    public String encodeURL(String s) {
        return s;
    }

    public String encodeRedirectURL(String s) {
        return s;
    }

    public String encodeUrl(String s) {
        return s;
    }

    public void setStatus(int i) {
        this.status = i;
        super.setStatus(i);
    }

    public int getStatus() {
        return status;
    }


    public String getRedirectURL() {
        return redirectURL;
    }

    public void sendRedirect(String redirectURL) throws IOException {
        this.redirectURL = redirectURL;
        super.sendRedirect(redirectURL);
    }

    @Override
    public String getCharacterEncoding() {
        return encoding;
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="40" tokens="229">
<file line="54" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\MergeIteratorTagTest.java"/>
<file line="106" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\MergeIteratorTagTest.java"/>
<codefragment>
<![CDATA[
        iterator3ParamTag.setValue("myList3");


        tag.doStartTag();
        iterator1ParamTag.doStartTag();
        iterator1ParamTag.doEndTag();
        iterator2ParamTag.doStartTag();
        iterator2ParamTag.doEndTag();
        iterator3ParamTag.doStartTag();
        iterator3ParamTag.doEndTag();
        tag.doEndTag();

        Iterator mergedIterator = (Iterator) stack.findValue("#myMergedIterator"); // if not iterator, let CCE surface

        assertNotNull(mergedIterator);
        assertTrue(mergedIterator.hasNext());
        assertEquals(mergedIterator.next(), "1");
        assertTrue(mergedIterator.hasNext());
        assertEquals(mergedIterator.next(), "a");
        assertTrue(mergedIterator.hasNext());
        assertEquals(mergedIterator.next(), "A");
        assertTrue(mergedIterator.hasNext());
        assertEquals(mergedIterator.next(), "2");
        assertTrue(mergedIterator.hasNext());
        assertEquals(mergedIterator.next(), "b");
        assertTrue(mergedIterator.hasNext());
        assertEquals(mergedIterator.next(), "B");
        assertTrue(mergedIterator.hasNext());
        assertEquals(mergedIterator.next(), "3");
        assertTrue(mergedIterator.hasNext());
        assertEquals(mergedIterator.next(), "c");
        assertTrue(mergedIterator.hasNext());
        assertEquals(mergedIterator.next(), "C");
        assertFalse(mergedIterator.hasNext());
    }




    public Action getAction() {
]]>
</codefragment>
</duplication>
<duplication lines="39" tokens="229">
<file line="54" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\AppendIteratorTagTest.java"/>
<file line="105" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\AppendIteratorTagTest.java"/>
<codefragment>
<![CDATA[
        iterator3ParamTag.setValue("%{myList3}");


        tag.doStartTag();
        iterator1ParamTag.doStartTag();
        iterator1ParamTag.doEndTag();
        iterator2ParamTag.doStartTag();
        iterator2ParamTag.doEndTag();
        iterator3ParamTag.doStartTag();
        iterator3ParamTag.doEndTag();
        tag.doEndTag();

        Iterator appendedIterator = (Iterator) stack.findValue("#myAppendedIterator");

        assertNotNull(appendedIterator);
        assertTrue(appendedIterator.hasNext());
        assertEquals(appendedIterator.next(), "1");
        assertTrue(appendedIterator.hasNext());
        assertEquals(appendedIterator.next(), "2");
        assertTrue(appendedIterator.hasNext());
        assertEquals(appendedIterator.next(), "3");
        assertTrue(appendedIterator.hasNext());
        assertEquals(appendedIterator.next(), "a");
        assertTrue(appendedIterator.hasNext());
        assertEquals(appendedIterator.next(), "b");
        assertTrue(appendedIterator.hasNext());
        assertEquals(appendedIterator.next(), "c");
        assertTrue(appendedIterator.hasNext());
        assertEquals(appendedIterator.next(), "A");
        assertTrue(appendedIterator.hasNext());
        assertEquals(appendedIterator.next(), "B");
        assertTrue(appendedIterator.hasNext());
        assertEquals(appendedIterator.next(), "C");
        assertFalse(appendedIterator.hasNext());
    }



    public Action getAction() {
]]>
</codefragment>
</duplication>
<duplication lines="32" tokens="225">
<file line="176" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\interceptor\DefaultWorkflowInterceptorTest.java"/>
<file line="64" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\interceptor\ValidationErrorAwareTest.java"/>
<codefragment>
<![CDATA[
        EasyMock.expect(action.hasErrors()).andReturn(true).anyTimes();

        EasyMock.expect(invocation.getProxy()).andReturn(proxy).anyTimes();
        EasyMock.expect(invocation.getAction()).andReturn(action).anyTimes();
        EasyMock.expect(invocation.invoke()).andAnswer(new IAnswer<String>() {
            public String answer() throws Throwable {
                return result;
            }
        }).anyTimes();

        EasyMock.expect(proxy.getConfig()).andReturn(config).anyTimes();
        EasyMock.expect(proxy.getMethod()).andReturn("execute").anyTimes();


        EasyMock.replay(invocation);
        EasyMock.replay(action);
        EasyMock.replay(proxy);

        ActionContext contex = new ActionContext(new HashMap<String, Object>());
        ActionContext.setContext(contex);
        contex.setActionInvocation(invocation);
    }

    @Override
    protected void tearDown() throws Exception {
        super.tearDown();
    }

    protected ValidationInterceptor create() {
        ObjectFactory objectFactory = container.getInstance(ObjectFactory.class);
        return (ValidationInterceptor) objectFactory.buildInterceptor(
                new InterceptorConfig.Builder("model", ValidationInterceptor.class.getName()).build(), new HashMap<String, String>());
]]>
</codefragment>
</duplication>
<duplication lines="34" tokens="218">
<file line="203" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\jasper\tagplugins\jstl\core\Import.java"/>
<file line="334" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\jasper\tagplugins\jstl\core\Import.java"/>
<codefragment>
<![CDATA[
                ctxt.generateJavaSource("        throw new JspTagException(\"Unable to get RequestDispatcher for URL: \\\" \" +" + urlName + "+ \" \\\". Verify values and/or enable cross context access.\");");
            }
            ctxt.generateJavaSource("    }");
            
            //get the request dispatcher
            ctxt.generateJavaSource("    RequestDispatcher " + requestDispatcherName + " = " + servletContextName + ".getRequestDispatcher(org.apache.struts2.jasper.tagplugins.jstl.Util.stripSession("+urlName+"));");
            ctxt.generateJavaSource("    if(" + requestDispatcherName + " == null) throw new JspTagException(org.apache.struts2.jasper.tagplugins.jstl.Util.stripSession("+urlName+"));");
            
            //initialize a ImportResponseWrapper to include the resource
            ctxt.generateJavaSource("    org.apache.struts2.jasper.tagplugins.jstl.Util.ImportResponseWrapper " + irwName + " = new org.apache.struts2.jasper.tagplugins.jstl.Util.ImportResponseWrapper((HttpServletResponse) pageContext.getResponse());");
            ctxt.generateJavaSource("    if(" + charSetName + " == null){");
            ctxt.generateJavaSource("        " + charSetName + " = org.apache.struts2.jasper.tagplugins.jstl.Util.DEFAULT_ENCODING;");
            ctxt.generateJavaSource("    }");
            ctxt.generateJavaSource("    " + irwName + ".setCharEncoding(" + charSetName + ");");
            ctxt.generateJavaSource("    try{");
            ctxt.generateJavaSource("        " + requestDispatcherName + ".include(pageContext.getRequest(), " + irwName + ");");
            ctxt.generateJavaSource("    }catch(java.io.IOException ex){");
            ctxt.generateJavaSource("        throw new JspException(ex);");
            ctxt.generateJavaSource("    }catch(RuntimeException ex){");
            ctxt.generateJavaSource("        throw new JspException(ex);");
            ctxt.generateJavaSource("    }catch(ServletException ex){");
            ctxt.generateJavaSource("        Throwable rc = ex.getRootCause();");
            ctxt.generateJavaSource("        if (rc == null)");
            ctxt.generateJavaSource("            throw new JspException(ex);");
            ctxt.generateJavaSource("        else");
            ctxt.generateJavaSource("            throw new JspException(rc);");
            ctxt.generateJavaSource("    }");
            
            //validate the response status
            ctxt.generateJavaSource("    if(" + irwName + ".getStatus() < 200 || " + irwName + ".getStatus() > 299){");
            ctxt.generateJavaSource("        throw new JspTagException(" + irwName + ".getStatus()+\" \" + org.apache.struts2.jasper.tagplugins.jstl.Util.stripSession(" + urlName + "));");
            ctxt.generateJavaSource("    }");
            
            ctxt.generateJavaSource("    " + tempStringName + " = " + irwName + ".getString();");
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="212">
<file line="46" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\StrutsInternalTestCase.java"/>
<file line="75" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\junit\src\main\java\org\apache\struts2\StrutsJUnit4TestCase.java"/>
<codefragment>
<![CDATA[
    static {
        ConsoleHandler handler = new ConsoleHandler();
        final SimpleDateFormat df = new SimpleDateFormat("mm:ss.SSS");
        Formatter formatter = new Formatter() {
            @Override
            public String format(LogRecord record) {
                StringBuilder sb = new StringBuilder();
                sb.append(record.getLevel());
                sb.append(':');
                for (int x = 9 - record.getLevel().toString().length(); x > 0; x--) {
                    sb.append(' ');
                }
                sb.append('[');
                sb.append(df.format(new Date(record.getMillis())));
                sb.append("] ");
                sb.append(formatMessage(record));
                sb.append('\n');
                return sb.toString();
            }
        };
        handler.setFormatter(formatter);
        Logger logger = Logger.getLogger("");
        if (logger.getHandlers().length > 0)
            logger.removeHandler(logger.getHandlers()[0]);
        logger.addHandler(handler);
        logger.setLevel(Level.WARNING);
        LoggerFactory.setLoggerFactory(new JdkLoggerFactory());
    }

    /**
     * gets an object from the stack after an action is executed
     */
    protected Object findValueAfterExecute(String key) {
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="211">
<file line="46" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\StrutsInternalTestCase.java"/>
<file line="69" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\junit\src\main\java\org\apache\struts2\StrutsTestCase.java"/>
<codefragment>
<![CDATA[
    static {
        ConsoleHandler handler = new ConsoleHandler();
        final SimpleDateFormat df = new SimpleDateFormat("mm:ss.SSS");
        Formatter formatter = new Formatter() {
            @Override
            public String format(LogRecord record) {
                StringBuilder sb = new StringBuilder();
                sb.append(record.getLevel());
                sb.append(':');
                for (int x = 9 - record.getLevel().toString().length(); x > 0; x--) {
                    sb.append(' ');
                }
                sb.append('[');
                sb.append(df.format(new Date(record.getMillis())));
                sb.append("] ");
                sb.append(formatMessage(record));
                sb.append('\n');
                return sb.toString();
            }
        };
        handler.setFormatter(formatter);
        Logger logger = Logger.getLogger("");
        if (logger.getHandlers().length > 0)
            logger.removeHandler(logger.getHandlers()[0]);
        logger.addHandler(handler);
        logger.setLevel(Level.WARNING);
        LoggerFactory.setLoggerFactory(new JdkLoggerFactory());
    }
]]>
</codefragment>
</duplication>
<duplication lines="38" tokens="209">
<file line="360" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\validator\AnnotationActionValidatorManager.java"/>
<file line="303" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\validator\DefaultActionValidatorManager.java"/>
<codefragment>
<![CDATA[
        for (Class anInterface1 : clazz.getInterfaces()) {
            if (checked.contains(anInterface1.getName())) {
                continue;
            }

            validatorConfigs.addAll(buildClassValidatorConfigs(anInterface1, checkFile));

            if (context != null) {
                validatorConfigs.addAll(buildAliasValidatorConfigs(anInterface1, context, checkFile));
            }

            checked.add(anInterface1.getName());
        }

        validatorConfigs.addAll(buildClassValidatorConfigs(clazz, checkFile));

        if (context != null) {
            validatorConfigs.addAll(buildAliasValidatorConfigs(clazz, context, checkFile));
        }

        checked.add(clazz.getName());

        return validatorConfigs;
    }

    private List<ValidatorConfig> loadFile(String fileName, Class clazz, boolean checkFile) {
        List<ValidatorConfig> retList = Collections.emptyList();
        URL fileUrl = ClassLoaderUtil.getResource(fileName, clazz);
        if ((checkFile && fileManager.fileNeedsReloading(fileUrl)) || !validatorFileCache.containsKey(fileName)) {
            InputStream is = null;

            try {
                is = fileManager.loadFile(fileUrl);

                if (is != null) {
                    retList = new ArrayList<ValidatorConfig>(validatorFileParser.parseActionValidatorConfigs(validatorFactory, is, fileName));
                }
            } finally {
]]>
</codefragment>
</duplication>
<duplication lines="37" tokens="208">
<file line="37" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\DoubleSelectTest.java"/>
<file line="165" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\DoubleSelectTest.java"/>
<codefragment>
<![CDATA[
    public void testDoubleWithDefaultSelectedValues() throws Exception {

        TestAction testAction = (TestAction) action;

        Region antwerp = new Region("Antwerp", "AN");
        Region gent = new Region("Gent", "GN");
        Region brugge = new Region("Brugge", "BRG");
        ArrayList belgiumRegions = new ArrayList();
        belgiumRegions.add(antwerp);
        belgiumRegions.add(gent);
        belgiumRegions.add(brugge);
        Country belgium = new Country("Belgium", "BE", belgiumRegions);

        Region paris = new Region("Paris", "PA");
        Region bordeaux = new Region("Bordeaux", "BOR");
        ArrayList franceRegions = new ArrayList();
        franceRegions.add(paris);
        franceRegions.add(bordeaux);
        Country france = new Country("France", "FR", franceRegions);

        Collection collection = new ArrayList(2);
        collection.add("AN");
        testAction.setCollection(collection);

        List countries = new ArrayList();
        countries.add(belgium);
        countries.add(france);

        testAction.setList2(countries);

        DoubleSelectTag tag = new DoubleSelectTag();
        tag.setPageContext(pageContext);
        tag.setLabel("mylabel");
        tag.setName("foo");
        tag.setDoubleName("region");

        tag.setValue("'FR'");
]]>
</codefragment>
</duplication>
<duplication lines="9" tokens="205">
<file line="536" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\conversion\impl\XWorkConverterTest.java"/>
<file line="546" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\conversion\impl\XWorkConverterTest.java"/>
<codefragment>
<![CDATA[
        context.put(ActionContext.LOCALE, Locale.GERMANY);
        assertEquals(new Double(123.12), converter.convertValue(context, null, null, null, "123.12", double.class));
        assertEquals(OgnlRuntime.NoConversionPossible, converter.convertValue(context, null, null, null, "123aa", double.class));
        assertEquals(OgnlRuntime.NoConversionPossible, converter.convertValue(context, null, null, null, "aa123", double.class));
        assertEquals(OgnlRuntime.NoConversionPossible, converter.convertValue(context, null, null, null, "1,234", double.class));
        assertEquals(OgnlRuntime.NoConversionPossible, converter.convertValue(context, null, null, null, "1,234.12", double.class));
        assertEquals(OgnlRuntime.NoConversionPossible, converter.convertValue(context, null, null, null, "1,23", double.class));
        assertEquals(new Double(1.234), converter.convertValue(context, null, null, null, "1.234", double.class));
        assertEquals(OgnlRuntime.NoConversionPossible, converter.convertValue(context, null, null, null, "1.234,12", double.class));
]]>
</codefragment>
</duplication>
<duplication lines="44" tokens="205">
<file line="152" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\ParseException.java"/>
<file line="43" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\TokenMgrError.java"/>
<codefragment>
<![CDATA[
   protected static final String addEscapes(String str) {
      StringBuffer retval = new StringBuffer();
      char ch;
      for (int i = 0; i < str.length(); i++) {
        switch (str.charAt(i))
        {
           case 0 :
              continue;
           case '\b':
              retval.append("\\b");
              continue;
           case '\t':
              retval.append("\\t");
              continue;
           case '\n':
              retval.append("\\n");
              continue;
           case '\f':
              retval.append("\\f");
              continue;
           case '\r':
              retval.append("\\r");
              continue;
           case '\"':
              retval.append("\\\"");
              continue;
           case '\'':
              retval.append("\\\'");
              continue;
           case '\\':
              retval.append("\\\\");
              continue;
           default:
              if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
                 String s = "0000" + Integer.toString(ch, 16);
                 retval.append("\\u" + s.substring(s.length() - 4, s.length()));
              } else {
                 retval.append(ch);
              }
              continue;
        }
      }
      return retval.toString();
   }
]]>
</codefragment>
</duplication>
<duplication lines="9" tokens="201">
<file line="488" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\conversion\impl\XWorkConverterTest.java"/>
<file line="497" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\conversion\impl\XWorkConverterTest.java"/>
<codefragment>
<![CDATA[
        context.put(ActionContext.LOCALE, Locale.GERMANY);
        assertEquals(OgnlRuntime.NoConversionPossible, converter.convertValue(context, null, null, null, "123.12", int.class));
        assertEquals(OgnlRuntime.NoConversionPossible, converter.convertValue(context, null, null, null, "123aa", int.class));
        assertEquals(OgnlRuntime.NoConversionPossible, converter.convertValue(context, null, null, null, "aa123", int.class));
        assertEquals(OgnlRuntime.NoConversionPossible, converter.convertValue(context, null, null, null, "1,234", int.class));
        assertEquals(OgnlRuntime.NoConversionPossible, converter.convertValue(context, null, null, null, "1,23", int.class));
        assertEquals(OgnlRuntime.NoConversionPossible, converter.convertValue(context, null, null, null, "1,234.12", int.class));
        assertEquals(OgnlRuntime.NoConversionPossible, converter.convertValue(context, null, null, null, "1.234", int.class));
        assertEquals(OgnlRuntime.NoConversionPossible, converter.convertValue(context, null, null, null, "1.234,12", int.class));
]]>
</codefragment>
</duplication>
<duplication lines="43" tokens="201">
<file line="98" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\OptionTransferSelectTagTest.java"/>
<file line="454" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\OptionTransferSelectTagTest.java"/>
<codefragment>
<![CDATA[
    public void testDisableSomeButtons() throws Exception {
        List left = new ArrayList();
        left.add("Left2");

        List right = new ArrayList();
        right.add("Right2");

        List leftVal = new ArrayList();
        leftVal.add("Left1");
        leftVal.add("Left2");
        leftVal.add("Left3");

        List rightVal = new ArrayList();
        rightVal.add("Right1");
        rightVal.add("Right2");
        rightVal.add("Right3");


        TestAction testaction = (TestAction) action;
        testaction.setCollection(left);
        testaction.setList2(right);
        testaction.setCollection2(leftVal);
        testaction.setList3(rightVal);


        OptionTransferSelectTag tag = new OptionTransferSelectTag();
        tag.setPageContext(pageContext);

        tag.setName("collection");
        tag.setId("id");
        tag.setList("collection2");
        tag.setSize("20");
        tag.setMultiple("true");
        tag.setEmptyOption("true");

        tag.setDoubleName("list2");
        tag.setDoubleList("list3");
        tag.setDoubleId("doubleId");
        tag.setDoubleSize("20");
        tag.setMultiple("true");
        tag.setDoubleEmptyOption("true");

        tag.setAllowAddAllToLeft("false");
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="198">
<file line="37" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\DoubleSelectTest.java"/>
<file line="228" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\DoubleSelectTest.java"/>
<codefragment>
<![CDATA[
    public void testDoubleWithDotName() throws Exception {
        TestAction testAction = (TestAction) action;

        Region antwerp = new Region("Antwerp", "AN");
        Region gent = new Region("Gent", "GN");
        Region brugge = new Region("Brugge", "BRG");
        ArrayList belgiumRegions = new ArrayList();
        belgiumRegions.add(antwerp);
        belgiumRegions.add(gent);
        belgiumRegions.add(brugge);
        Country belgium = new Country("Belgium", "BE", belgiumRegions);

        Region paris = new Region("Paris", "PA");
        Region bordeaux = new Region("Bordeaux", "BOR");
        ArrayList franceRegions = new ArrayList();
        franceRegions.add(paris);
        franceRegions.add(bordeaux);
        Country france = new Country("France", "FR", franceRegions);

        Collection collection = new ArrayList(2);
        collection.add("AN");
        testAction.setCollection(collection);

        List countries = new ArrayList();
        countries.add(belgium);
        countries.add(france);

        testAction.setList2(countries);

        DoubleSelectTag tag = new DoubleSelectTag();
        tag.setPageContext(pageContext);
        tag.setLabel("mylabel");
        tag.setName("foo.bar");
]]>
</codefragment>
</duplication>
<duplication lines="32" tokens="197">
<file line="74" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ActionTagTest.java"/>
<file line="112" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ActionTagTest.java"/>
<codefragment>
<![CDATA[
        request.setupGetServletPath("/foo!foo.action");

        ActionConfig config = configuration.getRuntimeConfiguration().getActionConfig("", "testAction");
        container.inject(config.getInterceptors().get(0).getInterceptor());

        ActionTag tag = new ActionTag();
        tag.setPageContext(pageContext);
        tag.setName("testAction");
        tag.setId("testAction");

        int stackSize = stack.size();

        try {
            tag.doStartTag();
            tag.addParameter("foo", "myFoo");
            tag.doEndTag();

            assertEquals(stack.size(), ActionContext.getContext().getValueStack().size());
            assertEquals("myFoo", stack.findValue("#testAction.foo"));
            assertEquals(stackSize, stack.size());

            Object o = pageContext.findAttribute("testAction");
            assertTrue(o instanceof TestAction);
            assertEquals("myFoo", ((TestAction) o).getFoo());
            assertEquals(Action.SUCCESS, ((TestAction) o).getResult());
        } catch (JspException ex) {
            ex.printStackTrace();
            fail();
        }
    }

    public void testActionWithExecuteResult() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="58" tokens="196">
<file line="86" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\main\java\org\apache\struts2\views\jsp\URLTag.java"/>
<file line="90" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\main\java\org\apache\struts2\views\jsp\ui\AnchorTag.java"/>
<codefragment>
<![CDATA[
    }

    public void setEncode(String encode) {
        this.encode = encode;
    }

    public void setIncludeContext(String includeContext) {
        this.includeContext = includeContext;
    }

    public void setEscapeAmp(String escapeAmp) {
        this.escapeAmp = escapeAmp;
    }

    public void setIncludeParams(String name) {
        includeParams = name;
    }

    public void setAction(String action) {
        this.action = action;
    }

    public void setNamespace(String namespace) {
        this.namespace = namespace;
    }

    public void setMethod(String method) {
        this.method = method;
    }

    public void setScheme(String scheme) {
        this.scheme = scheme;
    }

    public void setValue(String value) {
        this.value = value;
    }

    public void setPortletMode(String portletMode) {
        this.portletMode = portletMode;
    }

    public void setPortletUrlType(String portletUrlType) {
        this.portletUrlType = portletUrlType;
    }

    public void setWindowState(String windowState) {
        this.windowState = windowState;
    }

    public void setAnchor(String anchor) {
        this.anchor = anchor;
    }

    public void setForceAddSchemeHostAndPort(String forceAddSchemeHostAndPort) {
        this.forceAddSchemeHostAndPort = forceAddSchemeHostAndPort;
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="41" tokens="195">
<file line="98" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\OptionTransferSelectTagTest.java"/>
<file line="381" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\OptionTransferSelectTagTest.java"/>
<codefragment>
<![CDATA[
    public void testWithoutEmptyOptionOnOneSide() throws Exception {
        List left = new ArrayList();
        left.add("Left2");

        List right = new ArrayList();
        right.add("Right2");

        List leftVal = new ArrayList();
        leftVal.add("Left1");
        leftVal.add("Left2");
        leftVal.add("Left3");

        List rightVal = new ArrayList();
        rightVal.add("Right1");
        rightVal.add("Right2");
        rightVal.add("Right3");


        TestAction testaction = (TestAction) action;
        testaction.setCollection(left);
        testaction.setList2(right);
        testaction.setCollection2(leftVal);
        testaction.setList3(rightVal);


        OptionTransferSelectTag tag = new OptionTransferSelectTag();
        tag.setPageContext(pageContext);

        tag.setName("collection");
        tag.setId("id");
        tag.setList("collection2");
        tag.setSize("20");
        tag.setMultiple("true");
        tag.setEmptyOption("true");

        tag.setDoubleName("list2");
        tag.setDoubleList("list3");
        tag.setDoubleId("doubleId");
        tag.setDoubleSize("20");
        tag.setMultiple("true");
        tag.setDoubleEmptyOption("false");
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="194">
<file line="129" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\test\java\org\apache\struts2\portlet\result\PortletResultTest.java"/>
<file line="197" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\test\java\org\apache\struts2\portlet\result\PortletResultTest.java"/>
<codefragment>
<![CDATA[
        params = new Constraint[]{eq("testParam2"), eq("testValue2")};
        mockResponse.expects(once()).method("setRenderParameter").with(params);
        params = new Constraint[]{eq(MODE_PARAM), eq(PortletMode.VIEW.toString())};
        mockResponse.expects(once()).method("setRenderParameter").with(params);
        params = new Constraint[]{eq(PortletConstants.RENDER_DIRECT_NAMESPACE), eq("/test")};
        mockResponse.expects(once()).method("setRenderParameter").with(params);
        
        mockRequest.stubs().method("getPortletMode").will(returnValue(PortletMode.VIEW));
        mockCtx.expects(atLeastOnce()).method("getMajorVersion").will(returnValue(1));

        ActionContext ctx = ActionContext.getContext();

        ctx.put(REQUEST, mockRequest.proxy());
        ctx.put(RESPONSE, mockResponse.proxy());
        ctx.put(PHASE, PortletPhase.ACTION_PHASE);

        PortletResult result = new PortletResult();
        try {
            result.doExecute("testView.action?testParam1=testValue1&testParam2=testValue2", (ActionInvocation)mockInvocation.proxy());
]]>
</codefragment>
</duplication>
<duplication lines="48" tokens="192">
<file line="36" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\StrutsMockPageContext.java"/>
<file line="36" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\test\java\org\apache\struts2\dojo\views\jsp\ui\StrutsMockPageContext.java"/>
<codefragment>
<![CDATA[
public class StrutsMockPageContext extends MockPageContext {

    private Map attributes = new HashMap();
    private ServletResponse response;


    public void setAttribute(String s, Object o) {
        if ((s == null) || (o == null)) {
            throw new NullPointerException("PageContext does not accept null attributes");
        }

        this.attributes.put(s, o);
    }

    public Object getAttribute(String key) {
        return attributes.get(key);
    }

    public Object getAttributes(String key) {
        return this.attributes.get(key);
    }

    public void setResponse(ServletResponse response) {
        this.response = response;
    }

    public ServletResponse getResponse() {
        return response;
    }

    public HttpSession getSession() {
        HttpSession session = super.getSession();

        if (session == null) {
            session = ((HttpServletRequest) getRequest()).getSession(true);
        }

        return session;
    }

    public Object findAttribute(String s) {
        return attributes.get(s);
    }

    public void removeAttribute(String key) {
        this.attributes.remove(key);
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="43" tokens="186">
<file line="141" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\components\AbstractRemoteBean.java"/>
<file line="299" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\components\Submit.java"/>
<codefragment>
<![CDATA[
    }

    @StrutsTagAttribute(description="Topic that will trigger the remote call")
    public void setListenTopics(String listenTopics) {
        this.listenTopics = listenTopics;
    }

    @StrutsTagAttribute(description="The URL to call to obtain the content. Note: If used with ajax context, the value must be set as an url tag value.")
    public void setHref(String href) {
        this.href = href;
    }

    @StrutsTagAttribute(description="The text to display to the user if the is an error fetching the content")
    public void setErrorText(String errorText) {
        this.errorText = errorText;
    }

    @StrutsTagAttribute(description="Javascript code in the fetched content will be executed", type="Boolean", defaultValue="false")
    public void setExecuteScripts(String executeScripts) {
        this.executeScripts = executeScripts;
    }

    @StrutsTagAttribute(description="Text to be shown while content is being fetched", defaultValue="Loading...")
    public void setLoadingText(String loadingText) {
        this.loadingText = loadingText;
    }

    @StrutsTagAttribute(description="Javascript function name that will make the request")
    public void setHandler(String handler) {
        this.handler = handler;
    }

    @StrutsTagAttribute(description="Function name used to filter the fields of the form.")
    public void setFormFilter(String formFilter) {
        this.formFilter = formFilter;
    }

    @StrutsTagAttribute(description="Form id whose fields will be serialized and passed as parameters")
    public void setFormId(String formId) {
        this.formId = formId;
    }

    @StrutsTagAttribute(description="Supply an image src for <i>image</i> type submit button. Will have no effect for types <i>input</i> and <i>button</i>.")
]]>
</codefragment>
</duplication>
<duplication lines="30" tokens="186">
<file line="84" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\main\java\org\apache\struts2\dispatcher\ApplicationMap.java"/>
<file line="120" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\main\java\org\apache\struts2\dispatcher\ApplicationMap.java"/>
<codefragment>
<![CDATA[
                final Object value = context.getInitParameter(key);
                entries.add(new Map.Entry() {
                    public boolean equals(Object obj) {
                        if (!(obj instanceof Map.Entry)) {
                            return false;
                        }
                        Map.Entry entry = (Map.Entry) obj;

                        return ((key == null) ? (entry.getKey() == null) : key.equals(entry.getKey())) && ((value == null) ? (entry.getValue() == null) : value.equals(entry.getValue()));
                    }

                    public int hashCode() {
                        return ((key == null) ? 0 : key.hashCode()) ^ ((value == null) ? 0 : value.hashCode());
                    }

                    public Object getKey() {
                        return key;
                    }

                    public Object getValue() {
                        return value;
                    }

                    public Object setValue(Object obj) {
                        context.setAttribute(key, obj);

                        return value;
                    }
                });
            }
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="185">
<file line="114" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\validator\ExpressionValidatorTest.java"/>
<file line="193" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\validator\StringValidatorTest.java"/>
<codefragment>
<![CDATA[
        assertEquals(false, val.isTrim());
    }

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        loadConfigurationProviders(new MockConfigurationProvider());

        ActionConfig config = new ActionConfig.Builder("", "name", "").build();
        ActionInvocation invocation = EasyMock.createNiceMock(ActionInvocation.class);
        ActionProxy proxy = EasyMock.createNiceMock(ActionProxy.class);

        EasyMock.expect(invocation.getProxy()).andReturn(proxy).anyTimes();
        EasyMock.expect(invocation.getAction()).andReturn(null).anyTimes();
        EasyMock.expect(invocation.invoke()).andReturn(Action.SUCCESS).anyTimes();
        EasyMock.expect(proxy.getMethod()).andReturn("execute").anyTimes();
        EasyMock.expect(proxy.getConfig()).andReturn(config).anyTimes();


        EasyMock.replay(invocation);
        EasyMock.replay(proxy);

        ActionContext.getContext().setActionInvocation(invocation);
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="59" tokens="181">
<file line="126" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\TestAction.java"/>
<file line="80" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\test\java\org\apache\struts2\dojo\TestAction.java"/>
<codefragment>
<![CDATA[
    }

    public String[] getArray() {
        return array;
    }

    public void setArray(String[] array) {
        this.array = array;
    }

    public String[][] getList() {
        return list;
    }

    public void setList(String[][] list) {
        this.list = list;
    }

    public List getList2() {
        return list2;
    }

    public void setList2(List list2) {
        this.list2 = list2;
    }

    public void setList3(List list) {
        this.list3 = list;
    }

    public List getList3() {
        return this.list3;
    }

    public Collection getCollection2() {
        return this.collection2;
    }

    public void setCollection2(Collection collection) {
        this.collection2 = collection;
    }

    public Integer getFooInt() {
        return fooInt;
    }

    public void setFooInt(Integer fooInt) {
        this.fooInt = fooInt;
    }

    public String execute() throws Exception {
        if (result == null) {
            result = Action.SUCCESS;
        }

        return result;
    }

    public String doInput() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="107" tokens="177">
<file line="336" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\jasper\runtime\BodyContentImpl.java"/>
<file line="482" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\jasper\runtime\JspWriterImpl.java"/>
<codefragment>
<![CDATA[
    }
    
    /* Methods that do terminate lines */
    
    /**
     * Terminate the current line by writing the line separator string.  The
     * line separator string is defined by the system property
     * <code>line.separator</code>, and is not necessarily a single newline
     * character (<code>'\n'</code>).
     *
     * Need to change this from PrintWriter because the default
     * println() writes  to the sink directly instead of through the
     * write method...  
     */
    public void println() throws IOException {
        newLine();
    }
    
    /**
     * Print a boolean value and then terminate the line.  This method behaves
     * as though it invokes <code>{@link #print(boolean)}</code> and then
     * <code>{@link #println()}</code>.
     */
    public void println(boolean x) throws IOException {
        print(x);
        println();
    }
    
    /**
     * Print a character and then terminate the line.  This method behaves as
     * though it invokes <code>{@link #print(char)}</code> and then <code>{@link
     * #println()}</code>.
     */
    public void println(char x) throws IOException {
        print(x);
        println();
    }
    
    /**
     * Print an integer and then terminate the line.  This method behaves as
     * though it invokes <code>{@link #print(int)}</code> and then <code>{@link
     * #println()}</code>.
     */
    public void println(int x) throws IOException {
        print(x);
        println();
    }
    
    /**
     * Print a long integer and then terminate the line.  This method behaves
     * as though it invokes <code>{@link #print(long)}</code> and then
     * <code>{@link #println()}</code>.
     */
    public void println(long x) throws IOException {
        print(x);
        println();
    }
    
    /**
     * Print a floating-point number and then terminate the line.  This method
     * behaves as though it invokes <code>{@link #print(float)}</code> and then
     * <code>{@link #println()}</code>.
     */
    public void println(float x) throws IOException {
        print(x);
        println();
    }
    
    /**
     * Print a double-precision floating-point number and then terminate the
     * line.  This method behaves as though it invokes <code>{@link
     * #print(double)}</code> and then <code>{@link #println()}</code>.
     */
    public void println(double x) throws IOException {
        print(x);
        println();
    }
    
    /**
     * Print an array of characters and then terminate the line.  This method
     * behaves as though it invokes <code>{@link #print(char[])}</code> and then
     * <code>{@link #println()}</code>.
     */
    public void println(char x[]) throws IOException {
        print(x);
        println();
    }
    
    /**
     * Print a String and then terminate the line.  This method behaves as
     * though it invokes <code>{@link #print(String)}</code> and then
     * <code>{@link #println()}</code>.
     */
    public void println(String x) throws IOException {
        print(x);
        println();
    }
    
    /**
     * Print an Object and then terminate the line.  This method behaves as
     * though it invokes <code>{@link #print(Object)}</code> and then
     * <code>{@link #println()}</code>.
     */
    public void println(Object x) throws IOException {
        print(x);
        println();
    }
]]>
</codefragment>
</duplication>
<duplication lines="35" tokens="176">
<file line="49" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\XWorkJUnit4TestCase.java"/>
<file line="56" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\XWorkTestCase.java"/>
<codefragment>
<![CDATA[
    protected void tearDown() throws Exception {
        XWorkTestCaseHelper.tearDown(configurationManager);
        configurationManager = null;
        configuration = null;
        container = null;
        actionProxyFactory = null;
    }
    
    protected void loadConfigurationProviders(ConfigurationProvider... providers) {
        configurationManager = XWorkTestCaseHelper.loadConfigurationProviders(configurationManager, providers);
        configuration = configurationManager.getConfiguration();
        container = configuration.getContainer();
        actionProxyFactory = container.getInstance(ActionProxyFactory.class);
    }
    
    protected void loadButAdd(final Class<?> type, final Object impl) {
        loadButAdd(type, Container.DEFAULT_NAME, impl);
    }
    
    protected void loadButAdd(final Class<?> type, final String name, final Object impl) {
        loadConfigurationProviders(new StubConfigurationProvider() {
            @Override
            public void register(ContainerBuilder builder,
                    LocatableProperties props) throws ConfigurationException {
                builder.factory(type, name, new Factory() {
                    public Object create(Context context) throws Exception {
                        return impl;
                    }
                    
                }, Scope.SINGLETON);
            }
        });
    }
    
}
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="174">
<file line="83" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\main\java\org\apache\struts2\portlet\PortletApplicationMap.java"/>
<file line="120" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\main\java\org\apache\struts2\portlet\PortletApplicationMap.java"/>
<codefragment>
<![CDATA[
                final Object value = context.getInitParameter(key);
                entries.add(new Entry<String, Object>() {
                    public boolean equals(Object obj) {
                        Map.Entry entry = (Map.Entry) obj;

                        return ((key == null) ? (entry.getKey() == null) : key
                                .equals(entry.getKey()))
                                && ((value == null) ? (entry.getValue() == null)
                                        : value.equals(entry.getValue()));
                    }

                    public int hashCode() {
                        return ((key == null) ? 0 : key.hashCode())
                                ^ ((value == null) ? 0 : value.hashCode());
                    }

                    public String getKey() {
                        return key;
                    }

                    public Object getValue() {
                        return value;
                    }

                    public Object setValue(Object obj) {
                        context.setAttribute(key, obj);

                        return value;
                    }
                });
            }
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="174">
<file line="266" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\json\src\test\java\org\apache\struts2\json\JSONResultTest.java"/>
<file line="363" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\json\src\test\java\org\apache\struts2\json\JSONResultTest.java"/>
<codefragment>
<![CDATA[
        bean2.setEnumBean(AnEnumBean.Three);

        // circular reference
        bean1.setObjectField(bean2);
        bean2.setObjectField(bean1);

        collection2.add(bean1);
        action.setCollection2(collection2);

        // keep order in map
        Map map = new LinkedHashMap();

        map.put("a", 1);
        map.put("c", new float[] { 1.0f, 2.0f });
        action.setMap(map);

        action.setFoo("foo");
        // should be ignored, marked 'transient'
        action.setBar("bar");

        // date
        Calendar calendar = Calendar.getInstance();
        calendar.set(Calendar.YEAR, 1999);
        calendar.set(Calendar.MONTH, Calendar.DECEMBER);
        calendar.set(Calendar.DAY_OF_MONTH, 31);
        calendar.set(Calendar.HOUR_OF_DAY, 11);
        calendar.set(Calendar.MINUTE, 59);
        calendar.set(Calendar.SECOND, 59);
        action.setDate(calendar.getTime());
        action.setDate2(calendar.getTime());

        this.invocation.setAction(action);
        result.setWrapWithComments(true);
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="173">
<file line="52" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\DefaultTextProviderTest.java"/>
<file line="53" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\TextProviderSupportTest.java"/>
<codefragment>
<![CDATA[
        assertEquals("not.in.bundle", tp.getText("not.in.bundle"));
    }

    public void testGetTextsWithListArgs() throws Exception {
        List<Object> args = new ArrayList<Object>();
        args.add("Santa");
        args.add("loud");
        assertEquals("Hello World", tp.getText("hello", "this is default", args)); // no args in bundle
        assertEquals("Hello World Santa", tp.getText("hello.0", "this is default", args)); // only 1 arg in bundle
        assertEquals("Hello World. This is Santa speaking loud", tp.getText("hello.1", "this is default", args));

        assertEquals("this is default", tp.getText("not.in.bundle", "this is default", args));
        assertEquals("this is default Santa", tp.getText("not.in.bundle", "this is default {0}", args));
        assertEquals("this is default Santa speaking loud", tp.getText("not.in.bundle", "this is default {0} speaking {1}", args));

        assertEquals("Hello World", tp.getText("hello", args)); // no args in bundle
        assertEquals("Hello World Santa", tp.getText("hello.0", args)); // only 1 arg in bundle
        assertEquals("Hello World. This is Santa speaking loud", tp.getText("hello.1", args));

        assertEquals("not.in.bundle", tp.getText("not.in.bundle", args));
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="170">
<file line="238" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\ognl\accessor\XWorkCollectionPropertyAccessor.java"/>
<file line="127" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\ognl\accessor\XWorkListPropertyAccessor.java"/>
<codefragment>
<![CDATA[
    }

    @Override
    public void setProperty(Map context, Object target, Object name, Object value)
            throws OgnlException {

        Class lastClass = (Class) context.get(XWorkConverter.LAST_BEAN_CLASS_ACCESSED);
        String lastProperty = (String) context.get(XWorkConverter.LAST_BEAN_PROPERTY_ACCESSED);
        Class convertToClass = objectTypeDeterminer.getElementClass(lastClass, lastProperty, name);

        if (name instanceof String && value.getClass().isArray()) {
            // looks like the input game in the form of "someList.foo" and
            // we are expected to define the index values ourselves.
            // So let's do it:

            Collection c = (Collection) target;
            Object[] values = (Object[]) value;
            for (Object v : values) {
                try {
                    Object o = objectFactory.buildBean(convertToClass, context);
                    ognlUtil.setValue((String) name, context, o, v);
                    c.add(o);
                } catch (Exception e) {
                    throw new OgnlException("Error converting given String values for Collection.", e);
                }
            }

            // we don't want to do the normal list property setting now, since we've already done the work
            // just return instead
            return;
        }

        Object realValue = getRealValue(context, value, convertToClass);
]]>
</codefragment>
</duplication>
<duplication lines="35" tokens="169">
<file line="71" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\jasper\el\JspMethodExpression.java"/>
<file line="101" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\jasper\el\JspValueExpression.java"/>
<codefragment>
<![CDATA[
            return this.target.getValue(context);
        } catch (PropertyNotFoundException e) {
            if (e instanceof JspPropertyNotFoundException) throw e;
            throw new JspPropertyNotFoundException(this.mark, e);
        } catch (ELException e) {
            if (e instanceof JspELException) throw e;
            throw new JspELException(this.mark, e);
        }
    }

    public boolean equals(Object obj) {
        return this.target.equals(obj);
    }

    public int hashCode() {
        return this.target.hashCode();
    }

    public String getExpressionString() {
        return this.target.getExpressionString();
    }

    public boolean isLiteralText() {
        return this.target.isLiteralText();
    }

    public void writeExternal(ObjectOutput out) throws IOException {
        out.writeUTF(this.mark);
        out.writeObject(this.target);
    }

    public void readExternal(ObjectInput in) throws IOException,
            ClassNotFoundException {
        this.mark = in.readUTF();
        this.target = (ValueExpression) in.readObject();
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="168">
<file line="195" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\interceptor\CookieInterceptorTest.java"/>
<file line="237" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\interceptor\CookieInterceptorTest.java"/>
<file line="279" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\interceptor\CookieInterceptorTest.java"/>
<codefragment>
<![CDATA[
        interceptor.setCookiesValue("");
        interceptor.intercept(invocation);

        assertFalse(action.getCookiesMap().isEmpty());
        assertEquals(action.getCookiesMap().size(), 2);
        assertEquals(action.getCookiesMap().get("cookie1"), "cookie1value");
        assertEquals(action.getCookiesMap().get("cookie2"), null);
        assertEquals(action.getCookiesMap().get("cookie3"), "cookie3value");
        assertEquals(action.getCookie1(), "cookie1value");
        assertEquals(action.getCookie2(), null);
        assertEquals(action.getCookie3(), "cookie3value");
        assertEquals(ActionContext.getContext().getValueStack().findValue("cookie1"), "cookie1value");
        assertEquals(ActionContext.getContext().getValueStack().findValue("cookie2"), null);
        assertEquals(ActionContext.getContext().getValueStack().findValue("cookie3"), "cookie3value");
    }


    public void testInterceptSelectedCookiesNameAndValue() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="168">
<file line="110" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\interceptor\CookieInterceptorTest.java"/>
<file line="153" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\interceptor\CookieInterceptorTest.java"/>
<codefragment>
<![CDATA[
        interceptor.setCookiesValue("cookie1value, cookie2value, cookie3value");
        interceptor.intercept(invocation);

        assertFalse(action.getCookiesMap().isEmpty());
        assertEquals(action.getCookiesMap().size(), 3);
        assertEquals(action.getCookiesMap().get("cookie1"), "cookie1value");
        assertEquals(action.getCookiesMap().get("cookie2"), "cookie2value");
        assertEquals(action.getCookiesMap().get("cookie3"), "cookie3value");
        assertEquals(action.getCookie1(), "cookie1value");
        assertEquals(action.getCookie2(), "cookie2value");
        assertEquals(action.getCookie3(), "cookie3value");
        assertEquals(ActionContext.getContext().getValueStack().findValue("cookie1"), "cookie1value");
        assertEquals(ActionContext.getContext().getValueStack().findValue("cookie2"), "cookie2value");
        assertEquals(ActionContext.getContext().getValueStack().findValue("cookie3"), "cookie3value");
    }

    public void testInterceptSelectedCookiesNameOnly1() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="166">
<file line="245" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\util\DomHelper.java"/>
<file line="317" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\util\location\LocationAttributes.java"/>
<codefragment>
<![CDATA[
            nextHandler.startElement(uri, loc, raw, LocationAttributes.addLocationAttributes(locator, attrs));
        }

        public void endElement(String arg0, String arg1, String arg2) throws SAXException {
            nextHandler.endElement(arg0, arg1, arg2);
        }

        public void startPrefixMapping(String arg0, String arg1) throws SAXException {
            nextHandler.startPrefixMapping(arg0, arg1);
        }

        public void endPrefixMapping(String arg0) throws SAXException {
            nextHandler.endPrefixMapping(arg0);
        }

        public void characters(char[] arg0, int arg1, int arg2) throws SAXException {
            nextHandler.characters(arg0, arg1, arg2);
        }

        public void ignorableWhitespace(char[] arg0, int arg1, int arg2) throws SAXException {
            nextHandler.ignorableWhitespace(arg0, arg1, arg2);
        }

        public void processingInstruction(String arg0, String arg1) throws SAXException {
            nextHandler.processingInstruction(arg0, arg1);
        }

        public void skippedEntity(String arg0) throws SAXException {
            nextHandler.skippedEntity(arg0);
        }
    }
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="166">
<file line="44" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\IteratorGeneratorTagTest.java"/>
<file line="82" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\IteratorGeneratorTagTest.java"/>
<codefragment>
<![CDATA[
        Object afterTopOfStack = stack.findValue("top");

        assertTrue(topOfStack instanceof Iterator);
        // 1
        assertTrue(((Iterator)topOfStack).hasNext());
        assertEquals(((Iterator)topOfStack).next(), "aaa");
        // 2
        assertTrue(((Iterator)topOfStack).hasNext());
        assertEquals(((Iterator)topOfStack).next(), "bbb");
        // 3
        assertTrue(((Iterator)topOfStack).hasNext());
        assertEquals(((Iterator)topOfStack).next(), "ccc");
        // 4
        assertTrue(((Iterator)topOfStack).hasNext());
        assertEquals(((Iterator)topOfStack).next(), "ddd");
        // 5
        assertTrue(((Iterator)topOfStack).hasNext());
        assertEquals(((Iterator)topOfStack).next(), "eee");

        assertFalse(((Iterator)topOfStack).hasNext());
]]>
</codefragment>
</duplication>
<duplication lines="40" tokens="166">
<file line="504" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\main\java\org\apache\struts2\util\tomcat\buf\StringCache.java"/>
<file line="598" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\main\java\org\apache\struts2\util\tomcat\buf\StringCache.java"/>
<codefragment>
<![CDATA[
    protected static final int findClosest(CharChunk name, CharEntry[] array,
            int len) {

        int a = 0;
        int b = len - 1;

        // Special cases: -1 and 0
        if (b == -1) {
            return -1;
        }

        if (compare(name, array[0].name) < 0 ) {
            return -1;
        }
        if (b == 0) {
            return 0;
        }

        int i = 0;
        while (true) {
            i = (b + a) >>> 1;
            int result = compare(name, array[i].name);
            if (result == 1) {
                a = i;
            } else if (result == 0) {
                return i;
            } else {
                b = i;
            }
            if ((b - a) == 1) {
                int result2 = compare(name, array[b].name);
                if (result2 < 0) {
                    return a;
                } else {
                    return b;
                }
            }
        }

    }
]]>
</codefragment>
</duplication>
<duplication lines="38" tokens="163">
<file line="341" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\OptionTransferSelectTagTest.java"/>
<file line="414" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\OptionTransferSelectTagTest.java"/>
<codefragment>
<![CDATA[
        tag.setEmptyOption("true");

        tag.setDoubleName("list2");
        tag.setDoubleList("list3");
        tag.setDoubleId("doubleId");
        tag.setDoubleSize("20");
        tag.setMultiple("true");
        tag.setDoubleEmptyOption("false");

        tag.setAllowAddAllToLeft("true");
        tag.setAllowAddAllToRight("true");
        tag.setAllowAddToLeft("true");
        tag.setAllowAddToRight("true");
        tag.setAllowSelectAll("true");

        tag.setAddAllToLeftLabel("All Left");
        tag.setAddAllToRightLabel("All Right");
        tag.setAddToLeftLabel("Left");
        tag.setAddToRightLabel("Right");
        tag.setSelectAllLabel("Select All");

        tag.setLeftTitle("Title Left");
        tag.setRightTitle("Title Right");

        tag.setButtonCssClass("buttonCssClass");
        tag.setButtonCssStyle("buttonCssStyle");

        tag.setHeaderKey("Header Key");
        tag.setHeaderValue("Header Value");

        tag.setDoubleHeaderKey("Double Header Key");
        tag.setDoubleHeaderValue("Double Header Value");

        tag.doStartTag();
        tag.doEndTag();

        //System.out.println(writer.toString());
        verify(OptionTransferSelectTagTest.class.getResource("optiontransferselect-6.txt"));
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="163">
<file line="347" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\FormTagTest.java"/>
<file line="45" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\validator\VisitorFieldValidatorModelTest.java"/>
<codefragment>
<![CDATA[
        bean.setCount(-1);

        ActionConfig config = new ActionConfig.Builder("", "name", "").build();
        ActionInvocation invocation = EasyMock.createNiceMock(ActionInvocation.class);
        ActionProxy proxy = EasyMock.createNiceMock(ActionProxy.class);

        EasyMock.expect(invocation.getProxy()).andReturn(proxy).anyTimes();
        EasyMock.expect(invocation.getAction()).andReturn(null).anyTimes();
        EasyMock.expect(invocation.invoke()).andReturn(Action.SUCCESS).anyTimes();
        EasyMock.expect(proxy.getMethod()).andReturn("execute").anyTimes();
        EasyMock.expect(proxy.getConfig()).andReturn(config).anyTimes();


        EasyMock.replay(invocation);
        EasyMock.replay(proxy);

        ActionContext.getContext().setActionInvocation(invocation);

    }

    public void testModelFieldErrorsAddedWithoutFieldPrefix() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="162">
<file line="83" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\main\java\org\apache\struts2\portlet\PortletApplicationMap.java"/>
<file line="63" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\main\java\org\apache\struts2\portlet\PortletSessionMap.java"/>
<codefragment>
<![CDATA[
                    final Object value = session.getAttribute(key);
                    entries.add(new Entry<String, Object>() {
                        public boolean equals(Object obj) {
                            Map.Entry entry = (Map.Entry) obj;

                            return ((key == null) ? (entry.getKey() == null)
                                    : key.equals(entry.getKey()))
                                    && ((value == null) ? (entry.getValue() == null)
                                            : value.equals(entry.getValue()));
                        }

                        public int hashCode() {
                            return ((key == null) ? 0 : key.hashCode())
                                    ^ ((value == null) ? 0 : value.hashCode());
                        }

                        public String getKey() {
                            return key;
                        }

                        public Object getValue() {
                            return value;
                        }

                        public Object setValue(Object obj) {
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="162">
<file line="55" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\components\FormTest.java"/>
<file line="121" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\validator\ExpressionValidatorTest.java"/>
<codefragment>
<![CDATA[
        loadConfigurationProviders(new MockConfigurationProvider());

        ActionConfig config = new ActionConfig.Builder("", "name", "").build();
        ActionInvocation invocation = EasyMock.createNiceMock(ActionInvocation.class);
        ActionProxy proxy = EasyMock.createNiceMock(ActionProxy.class);

        EasyMock.expect(invocation.getProxy()).andReturn(proxy).anyTimes();
        EasyMock.expect(invocation.getAction()).andReturn(null).anyTimes();
        EasyMock.expect(invocation.invoke()).andReturn(Action.SUCCESS).anyTimes();
        EasyMock.expect(proxy.getMethod()).andReturn("execute").anyTimes();
        EasyMock.expect(proxy.getConfig()).andReturn(config).anyTimes();


        EasyMock.replay(invocation);
        EasyMock.replay(proxy);

        ActionContext.getContext().setActionInvocation(invocation);
    }

}
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="161">
<file line="55" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\components\FormTest.java"/>
<file line="347" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\FormTagTest.java"/>
<codefragment>
<![CDATA[
        ActionContext.getContext().setValueStack(stack);

        ActionConfig config = new ActionConfig.Builder("", "name", "").build();
        ActionInvocation invocation = EasyMock.createNiceMock(ActionInvocation.class);
        ActionProxy proxy = EasyMock.createNiceMock(ActionProxy.class);

        EasyMock.expect(invocation.getProxy()).andReturn(proxy).anyTimes();
        EasyMock.expect(invocation.getAction()).andReturn(null).anyTimes();
        EasyMock.expect(invocation.invoke()).andReturn(Action.SUCCESS).anyTimes();
        EasyMock.expect(proxy.getMethod()).andReturn("execute").anyTimes();
        EasyMock.expect(proxy.getConfig()).andReturn(config).anyTimes();

        EasyMock.replay(invocation);
        EasyMock.replay(proxy);

        ActionContext.getContext().setActionInvocation(invocation);
    }
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="160">
<file line="191" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\interceptor\MessageStoreInterceptorTest.java"/>
<file line="101" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\interceptor\MessageStorePreResultListenerTest.java"/>
<codefragment>
<![CDATA[
        MessageStorePreResultListener listener = new MessageStorePreResultListener(interceptor);

        Map paramMap = new LinkedHashMap();
        Map sessionMap = new LinkedHashMap();

        ActionSupport action = new ActionSupport();
        action.addActionError("some action error 1");
        action.addActionError("some action error 2");
        action.addActionMessage("some action message 1");
        action.addActionMessage("some action message 2");
        action.addFieldError("field1", "some field error 1");
        action.addFieldError("field2", "some field error 2");

        ActionContext actionContext = new ActionContext(new HashMap());
        actionContext.put(ActionContext.PARAMETERS, paramMap);
        actionContext.put(ActionContext.SESSION, sessionMap);

        HttpSession mockedSession = EasyMock.createControl().createMock(HttpSession.class);
        HttpServletRequest mockedRequest = EasyMock.createControl().createMock(HttpServletRequest.class);
        mockedRequest.getSession(false);
        EasyMock.expectLastCall().andReturn(mockedSession);
        EasyMock.expectLastCall().once();
        ServletActionContext.setRequest(mockedRequest);

        EasyMock.replay(mockedRequest);
]]>
</codefragment>
</duplication>
<duplication lines="34" tokens="160">
<file line="45" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\interceptor\CheckboxInterceptorTest.java"/>
<file line="47" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\interceptor\MultiselectInterceptorTest.java"/>
<codefragment>
<![CDATA[
        interceptor = new MultiselectInterceptor();
        ai = new MockActionInvocation();
        ai.setInvocationContext(ActionContext.getContext());
        ActionContext.getContext().setParameters(param);
    }

    public void testNoParam() throws Exception {
        interceptor.init();
        interceptor.intercept(ai);
        interceptor.destroy();

        assertEquals(0, param.size());
    }

    public void testPassthroughOne() throws Exception {
        param.put("user", "batman");
        interceptor.init();
        interceptor.intercept(ai);
        interceptor.destroy();

        assertEquals(1, param.size());
    }

    public void testPassthroughTwo() throws Exception {
        param.put("user", "batman");
        param.put("email", "batman@comic.org");
        interceptor.init();
        interceptor.intercept(ai);
        interceptor.destroy();

        assertEquals(2, param.size());
    }

    public void testSelectedMultiselect() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="160">
<file line="121" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\main\java\org\apache\struts2\dispatcher\VelocityResult.java"/>
<file line="153" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\main\java\org\apache\struts2\portlet\result\PortletVelocityResult.java"/>
<codefragment>
<![CDATA[
    public void executeRenderResult(String finalLocation, ActionInvocation invocation) throws Exception {
        ValueStack stack = ActionContext.getContext().getValueStack();

        HttpServletRequest request = ServletActionContext.getRequest();
        HttpServletResponse response = ServletActionContext.getResponse();
        ServletContext servletContext = ServletActionContext.getServletContext();
        Servlet servlet = JspSupportServlet.jspSupportServlet;

        velocityManager.init(servletContext);

        boolean usedJspFactory = false;
        PageContext pageContext = (PageContext) ActionContext.getContext().get(ServletActionContext.PAGE_CONTEXT);

        if (pageContext == null && servlet != null) {
            pageContext = jspFactory.getPageContext(servlet, request, response, null, true, 8192, true);
            ActionContext.getContext().put(ServletActionContext.PAGE_CONTEXT, pageContext);
            usedJspFactory = true;
        }

        try {
            String encoding = getEncoding(finalLocation);
            String contentType = getContentType(finalLocation);

            if (encoding != null) {
                contentType = contentType + ";charset=" + encoding;
            }
]]>
</codefragment>
</duplication>
<duplication lines="34" tokens="159">
<file line="98" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\OptionTransferSelectTagTest.java"/>
<file line="308" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\OptionTransferSelectTagTest.java"/>
<codefragment>
<![CDATA[
    public void testWithoutEmptyOptionOnBothSides() throws Exception {
        List left = new ArrayList();
        left.add("Left2");

        List right = new ArrayList();
        right.add("Right2");

        List leftVal = new ArrayList();
        leftVal.add("Left1");
        leftVal.add("Left2");
        leftVal.add("Left3");

        List rightVal = new ArrayList();
        rightVal.add("Right1");
        rightVal.add("Right2");
        rightVal.add("Right3");


        TestAction testaction = (TestAction) action;
        testaction.setCollection(left);
        testaction.setList2(right);
        testaction.setCollection2(leftVal);
        testaction.setList3(rightVal);


        OptionTransferSelectTag tag = new OptionTransferSelectTag();
        tag.setPageContext(pageContext);

        tag.setName("collection");
        tag.setId("id");
        tag.setList("collection2");
        tag.setSize("20");
        tag.setMultiple("true");
        tag.setEmptyOption("false");
]]>
</codefragment>
</duplication>
<duplication lines="72" tokens="156">
<file line="193" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\json\src\main\java\org\apache\struts2\json\JSONCleaner.java"/>
<file line="166" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\interceptor\ParameterFilterInterceptor.java"/>
<codefragment>
<![CDATA[
    }

    /**
     * @return Returns the defaultBlock.
     */
    public boolean isDefaultBlock() {
        return defaultBlock;
    }

    /**
     * @param defaultExclude The defaultExclude to set.
     */
    public void setDefaultBlock(boolean defaultExclude) {
        this.defaultBlock = defaultExclude;
    }

    /**
     * @return Returns the blocked.
     */
    public Collection<String> getBlockedCollection() {
        return blocked;
    }

    /**
     * @param blocked The blocked to set.
     */
    public void setBlockedCollection(Collection<String> blocked) {
        this.blocked = blocked;
    }

    /**
     * @param blocked The blocked paramters as comma separated String.
     */
    public void setBlocked(String blocked) {
        setBlockedCollection(asCollection(blocked));
    }

    /**
     * @return Returns the allowed.
     */
    public Collection<String> getAllowedCollection() {
        return allowed;
    }

    /**
     * @param allowed The allowed to set.
     */
    public void setAllowedCollection(Collection<String> allowed) {
        this.allowed = allowed;
    }

    /**
     * @param allowed The allowed paramters as comma separated String.
     */
    public void setAllowed(String allowed) {
        setAllowedCollection(asCollection(allowed));
    }

    /**
     * Return a collection from the comma delimited String.
     *
     * @param commaDelim the comma delimited String.
     * @return A collection from the comma delimited String. Returns <tt>null</tt> if the string is empty.
     */
    private Collection<String> asCollection(String commaDelim) {
        if (commaDelim == null || commaDelim.trim().length() == 0) {
            return null;
        }
        return TextParseUtil.commaDelimitedStringToSet(commaDelim);
    }

}
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="156">
<file line="144" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\dispatcher\ServletActionRedirectResultTest.java"/>
<file line="243" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\dispatcher\ServletRedirectResultTest.java"/>
<codefragment>
<![CDATA[
        result.setLocation("/myNamespace/myAction.action");
        result.setParse(false);
        result.setEncode(false);
        result.setPrependServletContext(false);
        result.setAnchor("fragment");
        result.setUrlHelper(new DefaultUrlHelper());

        IMocksControl control = createControl();
        ActionProxy mockActionProxy = control.createMock(ActionProxy.class);
        ActionInvocation mockInvocation = control.createMock(ActionInvocation.class);
        expect(mockInvocation.getProxy()).andReturn(mockActionProxy);
        expect(mockInvocation.getResultCode()).andReturn("myResult");
        expect(mockActionProxy.getConfig()).andReturn(actionConfig);
        expect(mockInvocation.getInvocationContext()).andReturn(context);

        control.replay();
        result.setActionMapper(container.getInstance(ActionMapper.class));
        result.execute(mockInvocation);
        assertEquals("/myNamespace/myAction.action?param1=value+1&param2=value+2&param3=value+3#fragment", res.getRedirectedUrl());
        control.verify();
    }

    public void testIncludeCollectionParameterInResult() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="155">
<file line="59" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\DefaultTextProviderTest.java"/>
<file line="79" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\DefaultTextProviderTest.java"/>
<codefragment>
<![CDATA[
        assertEquals("Hello World", tp.getText("hello", "this is default", args)); // no args in bundle
        assertEquals("Hello World Santa", tp.getText("hello.0", "this is default", args)); // only 1 arg in bundle
        assertEquals("Hello World. This is Santa speaking loud", tp.getText("hello.1", "this is default", args));

        assertEquals("this is default", tp.getText("not.in.bundle", "this is default", args));
        assertEquals("this is default Santa", tp.getText("not.in.bundle", "this is default {0}", args));
        assertEquals("this is default Santa speaking loud", tp.getText("not.in.bundle", "this is default {0} speaking {1}", args));

        assertEquals("Hello World", tp.getText("hello", args)); // no args in bundle
        assertEquals("Hello World Santa", tp.getText("hello.0", args)); // only 1 arg in bundle
        assertEquals("Hello World. This is Santa speaking loud", tp.getText("hello.1", args));

        assertEquals(null, tp.getText("not.in.bundle", args));

        assertEquals("Hello World", tp.getText("hello", "this is default", (String[]) null));
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="155">
<file line="232" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\ActionSupportTest.java"/>
<file line="255" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\ActionSupportTest.java"/>
<codefragment>
<![CDATA[
        assertEquals("Hello World", mas.getText("hello", "this is default", args)); // no args in bundle
        assertEquals("Hello World Santa", mas.getText("hello.0", "this is default", args)); // only 1 arg in bundle
        assertEquals("Hello World. This is Santa speaking loud", mas.getText("hello.1", "this is default", args));

        assertEquals("this is default", mas.getText("not.in.bundle", "this is default", args));
        assertEquals("this is default Santa", mas.getText("not.in.bundle", "this is default {0}", args));
        assertEquals("this is default Santa speaking loud", mas.getText("not.in.bundle", "this is default {0} speaking {1}", args));

        assertEquals("Hello World", mas.getText("hello", args)); // no args in bundle
        assertEquals("Hello World Santa", mas.getText("hello.0", args)); // only 1 arg in bundle
        assertEquals("Hello World. This is Santa speaking loud", mas.getText("hello.1", args));

        assertEquals("not.in.bundle", mas.getText("not.in.bundle", args));

        assertEquals("Hello World", mas.getText("hello", "this is default", (String[]) null));
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="155">
<file line="169" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\interceptor\CookieInterceptorTest.java"/>
<file line="211" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\interceptor\CookieInterceptorTest.java"/>
<file line="253" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\interceptor\CookieInterceptorTest.java"/>
<file line="296" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\interceptor\CookieInterceptorTest.java"/>
<codefragment>
<![CDATA[
    public void testInterceptSelectedCookiesNameAndValue() throws Exception {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setCookies(
                new Cookie("cookie1", "cookie1value"),
                new Cookie("cookie2", "cookie2value"),
                new Cookie("cookie3", "cookie3value")
        );
        ServletActionContext.setRequest(request);

        MockActionWithCookieAware action = new MockActionWithCookieAware();

        ActionContext.getContext().getValueStack().push(action);

        MockControl actionInvocationControl = MockControl.createControl(ActionInvocation.class);
        ActionInvocation invocation = (ActionInvocation) actionInvocationControl.getMock();
        actionInvocationControl.expectAndDefaultReturn(
                                                       invocation.getAction(), action);
        actionInvocationControl.expectAndDefaultReturn(
                                                       invocation.invoke(), Action.SUCCESS);

        actionInvocationControl.replay();

        CookieInterceptor interceptor = new CookieInterceptor();
        interceptor.setExcludedPatternsChecker(new DefaultExcludedPatternsChecker());
        interceptor.setAcceptedPatternsChecker(new DefaultAcceptedPatternsChecker());
        interceptor.setCookiesName("cookie1, cookie3");
        interceptor.setCookiesValue("cookie1value");
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="152">
<file line="74" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\DefaultTextProviderTest.java"/>
<file line="72" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\TextProviderSupportTest.java"/>
<codefragment>
<![CDATA[
        assertEquals("not.in.bundle", tp.getText("not.in.bundle", args));
    }

    public void testGetTextsWithArrayArgs() throws Exception {
        String[] args = { "Santa", "loud" };
        assertEquals("Hello World", tp.getText("hello", "this is default", args)); // no args in bundle
        assertEquals("Hello World Santa", tp.getText("hello.0", "this is default", args)); // only 1 arg in bundle
        assertEquals("Hello World. This is Santa speaking loud", tp.getText("hello.1", "this is default", args));

        assertEquals("this is default", tp.getText("not.in.bundle", "this is default", args));
        assertEquals("this is default Santa", tp.getText("not.in.bundle", "this is default {0}", args));
        assertEquals("this is default Santa speaking loud", tp.getText("not.in.bundle", "this is default {0} speaking {1}", args));

        assertEquals("Hello World", tp.getText("hello", args)); // no args in bundle
        assertEquals("Hello World Santa", tp.getText("hello.0", args)); // only 1 arg in bundle
        assertEquals("Hello World. This is Santa speaking loud", tp.getText("hello.1", args));

        assertEquals("not.in.bundle", tp.getText("not.in.bundle", args));
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="151">
<file line="66" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\validator\AnnotationActionValidatorManagerTest.java"/>
<file line="123" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\validator\ExpressionValidatorTest.java"/>
<codefragment>
<![CDATA[
        ActionConfig config = new ActionConfig.Builder("", "name", "").build();
        ActionInvocation invocation = EasyMock.createNiceMock(ActionInvocation.class);
        ActionProxy proxy = EasyMock.createNiceMock(ActionProxy.class);

        EasyMock.expect(invocation.getProxy()).andReturn(proxy).anyTimes();
        EasyMock.expect(invocation.getAction()).andReturn(null).anyTimes();
        EasyMock.expect(invocation.invoke()).andReturn(Action.SUCCESS).anyTimes();
        EasyMock.expect(proxy.getMethod()).andReturn("execute").anyTimes();
        EasyMock.expect(proxy.getConfig()).andReturn(config).anyTimes();


        EasyMock.replay(invocation);
        EasyMock.replay(proxy);

        ActionContext.getContext().setActionInvocation(invocation);
    }
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="151">
<file line="306" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\conversion\impl\AnnotationXWorkConverterTest.java"/>
<file line="373" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\conversion\impl\XWorkConverterTest.java"/>
<codefragment>
<![CDATA[
        User user = new User();
        stack.push(user);

        stack.setValue("list", "asdf");
        assertNotNull(user.getList());
        assertEquals(1, user.getList().size());
        assertEquals(String.class, user.getList().get(0).getClass());
        assertEquals("asdf", user.getList().get(0));
    }

    public void testStringToCustomTypeUsingCustomConverter() {
        // the converter needs to be registered as the Bar.class converter 
        // it won't be detected from the Foo-conversion.properties
        // because the Foo-conversion.properties file is only used when converting a property of Foo
        converter.registerConverter(Bar.class.getName(), new FooBarConverter());

        Bar bar = (Bar) converter.convertValue(null, null, null, null, "blah:123", Bar.class);
        assertNotNull("conversion failed", bar);
        assertEquals(123, bar.getSomethingElse());
        assertEquals("blah", bar.getTitle());
    }

    public void testStringToCustomTypeUsingCustomConverterFromProperties() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="151">
<file line="57" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\components\FormTest.java"/>
<file line="66" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\validator\AnnotationActionValidatorManagerTest.java"/>
<codefragment>
<![CDATA[
        ActionConfig config = new ActionConfig.Builder("packageName", "name", "").build();
        ActionInvocation invocation = EasyMock.createNiceMock(ActionInvocation.class);
        ActionProxy proxy = EasyMock.createNiceMock(ActionProxy.class);

        EasyMock.expect(invocation.getProxy()).andReturn(proxy).anyTimes();
        EasyMock.expect(invocation.getAction()).andReturn(null).anyTimes();
        EasyMock.expect(invocation.invoke()).andReturn(Action.SUCCESS).anyTimes();
        EasyMock.expect(proxy.getMethod()).andReturn("execute").anyTimes();
        EasyMock.expect(proxy.getConfig()).andReturn(config).anyTimes();


        EasyMock.replay(invocation);
        EasyMock.replay(proxy);

        ActionContext.getContext().setActionInvocation(invocation);
    }
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="149">
<file line="2575" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\jasper\compiler\Generator.java"/>
<file line="2635" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\jasper\compiler\Generator.java"/>
<codefragment>
<![CDATA[
        private void restoreScriptingVars(Node.CustomTag n, int scope) {
            if (n.getCustomNestingLevel() == 0) {
                return;
            }

            TagVariableInfo[] tagVarInfos = n.getTagVariableInfos();
            VariableInfo[] varInfos = n.getVariableInfos();
            if ((varInfos.length == 0) && (tagVarInfos.length == 0)) {
                return;
            }

            if (varInfos.length > 0) {
                for (int i = 0; i < varInfos.length; i++) {
                    if (varInfos[i].getScope() != scope)
                        continue;
                    // If the scripting variable has been declared, skip codes
                    // for saving and restoring it.
                    if (n.getScriptingVars(scope).contains(varInfos[i]))
                        continue;
                    String varName = varInfos[i].getVarName();
                    String tmpVarName = "_jspx_" + varName + "_"
                            + n.getCustomNestingLevel();
                    out.printin(varName);
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="149">
<file line="84" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\interceptor\CookieInterceptorTest.java"/>
<file line="127" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\interceptor\CookieInterceptorTest.java"/>
<file line="169" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\interceptor\CookieInterceptorTest.java"/>
<codefragment>
<![CDATA[
    public void testInterceptSelectedCookiesNameOnly1() throws Exception {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setCookies(
                new Cookie("cookie1", "cookie1value"),
                new Cookie("cookie2", "cookie2value"),
                new Cookie("cookie3", "cookie3value")
        );
        ServletActionContext.setRequest(request);

        MockActionWithCookieAware action = new MockActionWithCookieAware();

        ActionContext.getContext().getValueStack().push(action);

        MockControl actionInvocationControl = MockControl.createControl(ActionInvocation.class);
        ActionInvocation invocation = (ActionInvocation) actionInvocationControl.getMock();
        actionInvocationControl.expectAndDefaultReturn(
                                                       invocation.getAction(), action);
        actionInvocationControl.expectAndDefaultReturn(
                                                       invocation.invoke(), Action.SUCCESS);

        actionInvocationControl.replay();

        CookieInterceptor interceptor = new CookieInterceptor();
        interceptor.setExcludedPatternsChecker(new DefaultExcludedPatternsChecker());
        interceptor.setAcceptedPatternsChecker(new DefaultAcceptedPatternsChecker());
        interceptor.setCookiesName("cookie1, cookie3");
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="147">
<file line="129" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\test\java\org\apache\struts2\portlet\result\PortletResultTest.java"/>
<file line="159" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\test\java\org\apache\struts2\portlet\result\PortletResultTest.java"/>
<codefragment>
<![CDATA[
        Constraint[] params = new Constraint[]{eq(ACTION_PARAM), eq("renderDirect")};
        mockResponse.expects(once()).method("setRenderParameter").with(params);
        params = new Constraint[]{eq(MODE_PARAM), eq(PortletMode.VIEW.toString())};
        mockResponse.expects(once()).method("setRenderParameter").with(params);
        params = new Constraint[]{eq(PortletConstants.RENDER_DIRECT_NAMESPACE), eq("/test")};
        mockResponse.expects(once()).method("setRenderParameter").with(params);

        mockRequest.stubs().method("getPortletMode").will(returnValue(PortletMode.VIEW));
        mockCtx.expects(atLeastOnce()).method("getMajorVersion").will(returnValue(1));
 
        ActionContext ctx = ActionContext.getContext();
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="147">
<file line="46" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\interceptor\CookieInterceptorTest.java"/>
<file line="84" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\interceptor\CookieInterceptorTest.java"/>
<codefragment>
<![CDATA[
    public void testInterceptAll1() throws Exception {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setCookies(
                new Cookie("cookie1", "cookie1value"),
                new Cookie("cookie2", "cookie2value"),
                new Cookie("cookie3", "cookie3value")
        );
        ServletActionContext.setRequest(request);

        MockActionWithCookieAware action = new MockActionWithCookieAware();

        ActionContext.getContext().getValueStack().push(action);

        MockControl actionInvocationControl = MockControl.createControl(ActionInvocation.class);
        ActionInvocation invocation = (ActionInvocation) actionInvocationControl.getMock();
        actionInvocationControl.expectAndDefaultReturn(
                                                       invocation.getAction(), action);
        actionInvocationControl.expectAndDefaultReturn(
                                                       invocation.invoke(), Action.SUCCESS);

        actionInvocationControl.replay();

        CookieInterceptor interceptor = new CookieInterceptor();
        interceptor.setExcludedPatternsChecker(new DefaultExcludedPatternsChecker());
        interceptor.setAcceptedPatternsChecker(new DefaultAcceptedPatternsChecker());
        interceptor.setCookiesName("*");
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="146">
<file line="37" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\DoubleSelectTest.java"/>
<file line="297" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\DoubleSelectTest.java"/>
<codefragment>
<![CDATA[
    private void prepareTagGeneric(DoubleSelectTag tag) {
        TestAction testAction = (TestAction) action;
        Region antwerp = new Region("Antwerp", "AN");
        Region gent = new Region("Gent", "GN");
        Region brugge = new Region("Brugge", "BRG");
        ArrayList belgiumRegions = new ArrayList();
        belgiumRegions.add(antwerp);
        belgiumRegions.add(gent);
        belgiumRegions.add(brugge);
        Country belgium = new Country("Belgium", "BE", belgiumRegions);

        Region paris = new Region("Paris", "PA");
        Region bordeaux = new Region("Bordeaux", "BOR");
        ArrayList franceRegions = new ArrayList();
        franceRegions.add(paris);
        franceRegions.add(bordeaux);
        Country france = new Country("France", "FR", franceRegions);

        Collection collection = new ArrayList(2);
        collection.add("AN");
        testAction.setCollection(collection);
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="145">
<file line="368" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\conversion\impl\AnnotationXWorkConverterTest.java"/>
<file line="387" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\conversion\impl\AnnotationXWorkConverterTest.java"/>
<codefragment>
<![CDATA[
    public void testGenericPropertiesFromSetter() {
        GenericsBean gb = new GenericsBean();
        ValueStack stack = ac.getValueStack();
        stack.push(gb);

        stack.setValue("genericMap[123.12]", "66");
        stack.setValue("genericMap[456.12]", "42");

        assertEquals(2, gb.getGenericMap().size());
        assertEquals("66", stack.findValue("genericMap.get(123.12).toString()"));
        assertEquals("42", stack.findValue("genericMap.get(456.12).toString()"));
        assertEquals(66, stack.findValue("genericMap.get(123.12)"));
        assertEquals(42, stack.findValue("genericMap.get(456.12)"));
        assertEquals(true, stack.findValue("genericMap.containsValue(66)"));
        assertEquals(true, stack.findValue("genericMap.containsValue(42)"));
        assertEquals(true, stack.findValue("genericMap.containsKey(123.12)"));
        assertEquals(true, stack.findValue("genericMap.containsKey(456.12)"));
    }

    public void testGenericPropertiesFromGetter() {
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="145">
<file line="60" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\TextProviderSupportTest.java"/>
<file line="77" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\TextProviderSupportTest.java"/>
<codefragment>
<![CDATA[
        assertEquals("Hello World", tp.getText("hello", "this is default", args)); // no args in bundle
        assertEquals("Hello World Santa", tp.getText("hello.0", "this is default", args)); // only 1 arg in bundle
        assertEquals("Hello World. This is Santa speaking loud", tp.getText("hello.1", "this is default", args));

        assertEquals("this is default", tp.getText("not.in.bundle", "this is default", args));
        assertEquals("this is default Santa", tp.getText("not.in.bundle", "this is default {0}", args));
        assertEquals("this is default Santa speaking loud", tp.getText("not.in.bundle", "this is default {0} speaking {1}", args));

        assertEquals("Hello World", tp.getText("hello", args)); // no args in bundle
        assertEquals("Hello World Santa", tp.getText("hello.0", args)); // only 1 arg in bundle
        assertEquals("Hello World. This is Santa speaking loud", tp.getText("hello.1", args));

        assertEquals("not.in.bundle", tp.getText("not.in.bundle", args));
    }

    public void testGetBundle() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="30" tokens="145">
<file line="565" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\jasper\xmlparser\XMLEncodingDetector.java"/>
<file line="720" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\jasper\xmlparser\XMLEncodingDetector.java"/>
<codefragment>
<![CDATA[
	    if (c == '\n' || (c == '\r' && external)) {
		do {
		    c = fCurrentEntity.ch[fCurrentEntity.position++];
		    if (c == '\r' && external) {
			newlines++;
			fCurrentEntity.lineNumber++;
			fCurrentEntity.columnNumber = 1;
			if (fCurrentEntity.position == fCurrentEntity.count) {
			    offset = 0;
			    fCurrentEntity.position = newlines;
			    if (load(newlines, false)) {
				break;
			    }
			}
			if (fCurrentEntity.ch[fCurrentEntity.position] == '\n') {
			    fCurrentEntity.position++;
			    offset++;
			}
			/*** NEWLINE NORMALIZATION ***/
			else {
			    newlines++;
			}
		    }
		    else if (c == '\n') {
			newlines++;
			fCurrentEntity.lineNumber++;
			fCurrentEntity.columnNumber = 1;
			if (fCurrentEntity.position == fCurrentEntity.count) {
			    offset = 0;
			    fCurrentEntity.position = newlines;
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="144">
<file line="95" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\components\AbstractRemoteBean.java"/>
<file line="214" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\components\Submit.java"/>
<codefragment>
<![CDATA[
            addParameter("showLoadingText", findString(showLoadingText));
        if (showLoadingText != null)
            addParameter("showLoadingText", findString(showLoadingText));
        if (beforeNotifyTopics != null)
            addParameter("beforeNotifyTopics", findString(beforeNotifyTopics));
        if (afterNotifyTopics != null)
            addParameter("afterNotifyTopics", findString(afterNotifyTopics));
        if (errorNotifyTopics != null)
            addParameter("errorNotifyTopics", findString(errorNotifyTopics));
        if (highlightColor != null)
            addParameter("highlightColor", findString(highlightColor));
        if (highlightDuration != null)
            addParameter("highlightDuration", findString(highlightDuration));
        if (separateScripts != null)
            addParameter("separateScripts", findValue(separateScripts, Boolean.class));
        if (transport != null)
            addParameter("transport", findString(transport));
        if (parseContent != null)
            addParameter("parseContent", findValue(parseContent, Boolean.class));
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="143">
<file line="28" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\validator\AnnotationValidationAction.java"/>
<file line="32" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\validator\AnnotationValidationExpAction.java"/>
<codefragment>
<![CDATA[
            fieldName = "bar", shortCircuit = true, trimExpression = "${trim}", caseSensitiveExpression = "${caseSensitive}",
            messageParams = {"one", "two", "three"})
    @ConditionalVisitorFieldValidator(expression = "foo+bar", context = "some", appendPrefix = false, fieldName = "bar",
            key = "conditional.key", message = "Foo doesn't match!", shortCircuit = true,
            messageParams = {"one", "two", "three"})
    @ConversionErrorFieldValidator(fieldName = "bar", key = "conversion.key", message = "Foo conversion error!",
            shortCircuit = true, repopulateField = true, messageParams = {"one", "three"})
    @CustomValidator(type = "myValidator", fieldName = "foo", key = "foo.invalid", message = "Foo is invalid!",
            shortCircuit = true, messageParams = {"one", "two", "three"},
            parameters = {
                    @ValidationParameter(name = "value", value = "1")
            }
    )
    @DateRangeFieldValidator(fieldName = "foo", key = "date.foo", maxExpression = "${dateMax}", minExpression = "${dateMin}", dateFormat = "yyyy",
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="143">
<file line="141" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\conversion\impl\AnnotationXWorkConverterTest.java"/>
<file line="175" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\conversion\impl\XWorkConverterTest.java"/>
<codefragment>
<![CDATA[
        ModelDrivenAction action = new ModelDrivenAction();
        stack.push(action);
        stack.push(action.getModel());

        Map<String, Object> ognlStackContext = stack.getContext();
        ognlStackContext.put(XWorkConverter.REPORT_CONVERSION_ERRORS, Boolean.TRUE);

        String[] value = new String[]{"invalid date"};
        assertEquals("Conversion should have failed.", OgnlRuntime.NoConversionPossible, converter.convertValue(ognlStackContext, action, null, "birth", value, Date.class));
        stack.pop();
        stack.pop();

        Map conversionErrors = (Map) ognlStackContext.get(ActionContext.CONVERSION_ERRORS);
        assertNotNull(conversionErrors);
        assertEquals(1, conversionErrors.size());
        assertNotNull(conversionErrors.get("birth"));
        assertEquals(value, conversionErrors.get("birth"));
    }

    public void testDateStrictConversion() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="51" tokens="143">
<file line="130" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\SimpleAction.java"/>
<file line="116" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\SimpleAnnotationAction.java"/>
<codefragment>
<![CDATA[
    public void setDate(Date date) {
        this.date = date;
    }

    public Date getDate() {
        return date;
    }

    public void setFoo(int foo) {
        this.foo = foo;
    }

    public int getFoo() {
        return foo;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public void setSettings(Properties settings) {
        this.settings = settings;
    }

    public Properties getSettings() {
        return settings;
    }


    public String getAliasDest() {
        return aliasDest;
    }

    public void setAliasDest(String aliasDest) {
        this.aliasDest = aliasDest;
    }

    public String getAliasSource() {
        return aliasSource;
    }

    public void setAliasSource(String aliasSource) {
        this.aliasSource = aliasSource;
    }

    
    public void setSomeList(ArrayList<String> someList) {
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="143">
<file line="118" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\components\AbstractRemoteBean.java"/>
<file line="269" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\components\DateTimePicker.java"/>
<codefragment>
<![CDATA[
        Boolean parseContent = (Boolean)stack.getContext().get(Head.PARSE_CONTENT);
        boolean generateId = (parseContent != null ? !parseContent : true);
        
        addParameter("pushId", generateId);
        if ((this.id == null || this.id.length() == 0) && generateId) {
            // resolves Math.abs(Integer.MIN_VALUE) issue reported by FindBugs 
            // http://findbugs.sourceforge.net/bugDescriptions.html#RV_ABSOLUTE_VALUE_OF_RANDOM_INT
            int nextInt = RANDOM.nextInt();
            nextInt = nextInt == Integer.MIN_VALUE ? Integer.MAX_VALUE : Math.abs(nextInt);  
            this.id = "widget_" + String.valueOf(nextInt);
            addParameter("id", this.id);
        }
    }
    
    @Override
    @StrutsTagSkipInheritance
    public void setTheme(String theme) {
        super.setTheme(theme);
    }

    @Override
    public String getTheme() {
        return "ajax";
    }
    
    @StrutsTagAttribute(description="If true, weekly size of calendar changes to acomodate the month if false," +
]]>
</codefragment>
</duplication>
<duplication lines="41" tokens="143">
<file line="253" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\AbstractUITagTest.java"/>
<file line="302" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\test\java\org\apache\struts2\dojo\views\jsp\ui\AbstractUITagTest.java"/>
<codefragment>
<![CDATA[
        StringBuffer buffer = new StringBuffer(128);
        InputStream in = url.openStream();
        byte[] buf = new byte[4096];
        int nbytes;

        while ((nbytes = in.read(buf)) > 0) {
            buffer.append(new String(buf, 0, nbytes));
        }

        in.close();

        /**
         * compare the trimmed values of each buffer and make sure they're equivalent.  however, let's make sure to
         * normalize the strings first to account for line termination differences between platforms.
         */
        String writerString = normalize(writer.toString(), true);
        String bufferString = normalize(buffer.toString(), true);

        assertEquals(bufferString, writerString);
    }

    protected void setUp() throws Exception {
        super.setUp();

        ServletActionContext.setServletContext(pageContext.getServletContext());
    }

    protected void tearDown() throws Exception {
        super.tearDown();
        ActionContext.setContext(null);
    }

    /**
     * normalizes a string so that strings generated on different platforms can be compared.  any group of one or more
     * space, tab, \r, and \n characters are converted to a single space character
     *
     * @param obj the object to be normalized.  normalize will perform its operation on obj.toString().trim() ;
     * @param appendSpace
     * @return the normalized string
     */
    public static String normalize(Object obj, boolean appendSpace) {
]]>
</codefragment>
</duplication>
<duplication lines="41" tokens="141">
<file line="602" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\jasper\compiler\Node.java"/>
<file line="688" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\jasper\compiler\Node.java"/>
<codefragment>
<![CDATA[
            super(qName, TAG_DIRECTIVE_ACTION, attrs, nonTaglibXmlnsAttrs,
                    taglibAttrs, start, parent);
            imports = new Vector();
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        /**
         * Parses the comma-separated list of class or package names in the
         * given attribute value and adds each component to this PageDirective's
         * vector of imported classes and packages.
         * 
         * @param value
         *            A comma-separated string of imports.
         */
        public void addImport(String value) {
            int start = 0;
            int index;
            while ((index = value.indexOf(',', start)) != -1) {
                imports.add(value.substring(start, index).trim());
                start = index + 1;
            }
            if (start == 0) {
                // No comma found
                imports.add(value.trim());
            } else {
                imports.add(value.substring(start).trim());
            }
        }

        public List getImports() {
            return imports;
        }
    }

    /**
     * Represents an attribute directive
     */
    public static class AttributeDirective extends Node {
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="140">
<file line="101" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\conversion\impl\AnnotationXWorkConverterTest.java"/>
<file line="136" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\conversion\impl\XWorkConverterTest.java"/>
<codefragment>
<![CDATA[
        action.setBean(new TestBean());

        stack.push(action);

        Map<String, Object> ognlStackContext = stack.getContext();
        ognlStackContext.put(XWorkConverter.REPORT_CONVERSION_ERRORS, Boolean.TRUE);
        ognlStackContext.put(XWorkConverter.CONVERSION_PROPERTY_FULLNAME, "bean.birth");

        String[] value = new String[]{"invalid date"};
        assertEquals("Conversion should have failed.", OgnlRuntime.NoConversionPossible, converter.convertValue(ognlStackContext, action.getBean(), null, "birth", value, Date.class));
        stack.pop();

        Map conversionErrors = (Map) stack.getContext().get(ActionContext.CONVERSION_ERRORS);
        assertNotNull(conversionErrors);
        assertTrue(conversionErrors.size() == 1);
        assertEquals(value, conversionErrors.get("bean.birth"));
    }

    public void testFieldErrorMessageAddedWhenConversionFails() {
]]>
</codefragment>
</duplication>
<duplication lines="37" tokens="140">
<file line="34" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\test\java\org\apache\struts2\dojo\views\jsp\ui\StrutsMockHttpSession.java"/>
<file line="32" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\json\src\test\java\org\apache\struts2\json\StrutsMockHttpSession.java"/>
<codefragment>
<![CDATA[
public class StrutsMockHttpSession extends MockHttpSession {

    Hashtable attributes = new Hashtable();


    public void setAttribute(String s, Object o) {
        attributes.put(s, o);
    }

    public Object getAttribute(String s) {
        return attributes.get(s);
    }

    public Enumeration getAttributeNames() {
        return attributes.keys();
    }

    public void setExpectedAttribute(String s, Object o) {
        throw new UnsupportedOperationException();
    }

    public void setExpectedRemoveAttribute(String s) {
        throw new UnsupportedOperationException();
    }

    public void removeAttribute(String s) {
        attributes.remove(s);
    }

    public void setupGetAttribute(String s, Object o) {
        throw new UnsupportedOperationException();
    }

    public void setupGetAttributeNames(Enumeration enumeration) {
        throw new UnsupportedOperationException();
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="139">
<file line="636" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\validator\AnnotationValidationConfigurationBuilder.java"/>
<file line="802" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\validator\AnnotationValidationConfigurationBuilder.java"/>
<codefragment>
<![CDATA[
        Map<String, Object> params = new HashMap<String, Object>();

        if (fieldName != null) {
            params.put("fieldName", fieldName);
        } else if (v.fieldName() != null && v.fieldName().length() > 0) {
            params.put("fieldName", v.fieldName());
        }

        validatorFactory.lookupRegisteredValidatorType(validatorType);
        return new ValidatorConfig.Builder(validatorType)
                .addParams(params)
                .addParam("methodName", methodName)
                .shortCircuit(v.shortCircuit())
                .defaultMessage(v.message())
                .messageKey(v.key())
                .messageParams(v.messageParams())
                .build();
    }

    private ValidatorConfig processDateRangeFieldValidatorAnnotation(DateRangeFieldValidator v, String fieldName, String methodName) {
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="139">
<file line="41" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\AstLiteralExpression.java"/>
<file line="52" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\AstString.java"/>
<codefragment>
<![CDATA[
    }

    public void setImage(String image) {
        if (image.indexOf('\\') == -1) {
            this.image = image;
            return;
        }
        int size = image.length();
        StringBuffer buf = new StringBuffer(size);
        for (int i = 0; i < size; i++) {
            char c = image.charAt(i);
            if (c == '\\' && i + 1 < size) {
                char c1 = image.charAt(i + 1);
                if (c1 == '\\' || c1 == '"' || c1 == '\'' || c1 == '#'
                        || c1 == '$') {
                    c = c1;
                    i++;
                }
            }
            buf.append(c);
        }
        this.image = buf.toString();
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="139">
<file line="266" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\components\DateTimePicker.java"/>
<file line="130" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\components\TabbedPanel.java"/>
<codefragment>
<![CDATA[
        }

        // generate a random ID if not explicitly set and not parsing the content
        Boolean parseContent = (Boolean)stack.getContext().get(Head.PARSE_CONTENT);
        boolean generateId = (parseContent != null ? !parseContent : true);
        
        addParameter("pushId", generateId);
        if ((this.id == null || this.id.length() == 0) && generateId) {
            // resolves Math.abs(Integer.MIN_VALUE) issue reported by FindBugs 
            // http://findbugs.sourceforge.net/bugDescriptions.html#RV_ABSOLUTE_VALUE_OF_RANDOM_INT
            int nextInt = RANDOM.nextInt();
            nextInt = nextInt == Integer.MIN_VALUE ? Integer.MAX_VALUE : Math.abs(nextInt);  
            this.id = "widget_" + String.valueOf(nextInt);
            addParameter("id", this.id);
        }
    }

    @Override
    @StrutsTagSkipInheritance
    public void setTheme(String theme) {
        super.setTheme(theme);
    }
    
    @Override
    public String getTheme() {
        return "ajax";
    }
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="139">
<file line="115" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\components\AbstractRemoteBean.java"/>
<file line="245" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\components\Submit.java"/>
<codefragment>
<![CDATA[
            addParameter("ajaxAfterValidation", findValue(ajaxAfterValidation, Boolean.class));

        // generate a random ID if not explicitly set and not parsing the content
        Boolean parseContent = (Boolean)stack.getContext().get(Head.PARSE_CONTENT);
        boolean generateId = (parseContent != null ? !parseContent : true);

        addParameter("pushId", generateId);
        if ((this.id == null || this.id.length() == 0) && generateId) {
            // resolves Math.abs(Integer.MIN_VALUE) issue reported by FindBugs
            // http://findbugs.sourceforge.net/bugDescriptions.html#RV_ABSOLUTE_VALUE_OF_RANDOM_INT
            int nextInt = RANDOM.nextInt();
            nextInt = nextInt == Integer.MIN_VALUE ? Integer.MAX_VALUE : Math.abs(nextInt);
            this.id = "widget_" + String.valueOf(nextInt);
            addParameter("id", this.id);
        }
    }

    @Override
    @StrutsTagSkipInheritance
    public void setTheme(String theme) {
        super.setTheme(theme);
    }

    @Override
    public String getTheme() {
        return "ajax";
    }
]]>
</codefragment>
</duplication>
<duplication lines="36" tokens="139">
<file line="35" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\StrutsMockHttpSession.java"/>
<file line="34" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\test\java\org\apache\struts2\dojo\views\jsp\ui\StrutsMockHttpSession.java"/>
<codefragment>
<![CDATA[
public class StrutsMockHttpSession extends MockHttpSession {

    Hashtable attributes = new Hashtable();


    public void setAttribute(String s, Object o) {
        attributes.put(s, o);
    }

    public Object getAttribute(String s) {
        return attributes.get(s);
    }

    public Enumeration getAttributeNames() {
        return attributes.keys();
    }

    public void setExpectedAttribute(String s, Object o) {
        throw new UnsupportedOperationException();
    }

    public void setExpectedRemoveAttribute(String s) {
        throw new UnsupportedOperationException();
    }

    public void removeAttribute(String s) {
        attributes.remove(s);
    }

    public void setupGetAttribute(String s, Object o) {
        throw new UnsupportedOperationException();
    }

    public void setupGetAttributeNames(Enumeration enumeration) {
        throw new UnsupportedOperationException();
    }
]]>
</codefragment>
</duplication>
<duplication lines="45" tokens="139">
<file line="207" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\AnchorTagTest.java"/>
<file line="168" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\URLTagTest.java"/>
<codefragment>
<![CDATA[
        assertEquals("/TestAction.action?p0=z&amp;p1=a&amp;p1=b&amp;p2=d&amp;p2=e&amp;p3=f&amp;p3=g", writer.toString());
    }
    
    /**
     * To test priority of parameter passed in to url component though
     * various way, with includeParams="NONE"
     *  - current request url
     *  - tag's value attribute
     *  - tag's nested param tag
     *
     *  In this case only parameters from the tag itself is taken into account.
     *  Those from request will not count, only those in tag's value attribute
     *  and nested param tag.
     *
     * @throws Exception
     */
    public void testParametersPriorityWithIncludeParamsAsNONE() throws Exception {
        request.setQueryString("id1=urlId1&id2=urlId2&urlParam1=urlValue1&urlParam2=urlValue2");

        tag.setValue("testAction.action?id1=tagId1&id2=tagId2&tagId=tagValue");
        tag.setIncludeParams("NONE");

        ParamTag param1 = new ParamTag();
        param1.setPageContext(pageContext);
        param1.setName("param1");
        param1.setValue("%{'param1value'}");

        ParamTag param2 = new ParamTag();
        param2.setPageContext(pageContext);
        param2.setName("param2");
        param2.setValue("%{'param2value'}");

        ParamTag param3 = new ParamTag();
        param3.setPageContext(pageContext);
        param3.setName("id1");
        param3.setValue("%{'paramId1'}");


        tag.doStartTag();
        param1.doStartTag();
        param1.doEndTag();
        param2.doStartTag();
        param2.doEndTag();
        param3.doStartTag();
        param3.doEndTag();
]]>
</codefragment>
</duplication>
<duplication lines="63" tokens="139">
<file line="39" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\AbstractUITagTest.java"/>
<file line="47" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\test\java\org\apache\struts2\dojo\views\jsp\ui\AbstractUITagTest.java"/>
<codefragment>
<![CDATA[
public abstract class AbstractUITagTest extends AbstractTagTest {

    private static final Logger LOG = LoggerFactory.getLogger(AbstractUITagTest.class);

    static final String FREEMARKER_ERROR_EXPECTATION = "Java backtrace for programmers:";

    /**
     * Simple helper class for generic tag property testing mechanism. Basically it holds a property name, a property
     * value and an output to be expected in tag output when property was accordingly set.
     *
     * @author <a href="mailto:gielen@it-neering.net">Rene Gielen</a>
     */
    public class PropertyHolder {
        String name, value, expectation;

        public String getName() {
            return name;
        }

        public String getValue() {
            return value;
        }

        public String getExpectation() {
            return expectation;
        }

        /**
         * Construct simple holder with default expectation.
         *
         * @param name  The property name to use.
         * @param value The property value to set.
         * @see #PropertyHolder(String, String, String)
         */
        public PropertyHolder(String name, String value) {
            this(name, value, null);
        }

        /**
         * Construct property holder.
         *
         * @param name        The property name to use.
         * @param value       The property value to set.
         * @param expectation The expected String to occur in tag output caused by setting given tag property. If
         *                    <tt>null</tt>, will be set to <pre>name + "=\"" + value + "\"</pre>.
         */
        public PropertyHolder(String name, String value, String expectation) {
            this.name = name;
            this.value = value;
            if (expectation != null) {
                this.expectation = expectation;
            } else {
                this.expectation = name + "=\"" + value + "\"";
            }
        }

        /**
         * Convenience method for easily adding anonymous constructed instance to a given map, with {@link #getName()}
         * as key.
         *
         * @param map The map to place this instance in.
         */
        public void addToMap(Map map) {
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="138">
<file line="669" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\validator\AnnotationValidationConfigurationBuilder.java"/>
<file line="704" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\validator\AnnotationValidationConfigurationBuilder.java"/>
<codefragment>
<![CDATA[
        if (StringUtils.isNotEmpty(v.max())) {
            params.put("max", v.max());
        }
        if (StringUtils.isNotEmpty(v.maxExpression())) {
            params.put("maxExpression", v.maxExpression());
        }
        if (StringUtils.isNotEmpty(v.minExpression())) {
            params.put("minExpression", v.minExpression());
        }

        validatorFactory.lookupRegisteredValidatorType(validatorType);
        return new ValidatorConfig.Builder(validatorType)
                .addParams(params)
                .addParam("methodName", methodName)
                .shortCircuit(v.shortCircuit())
                .defaultMessage(v.message())
                .messageKey(v.key())
                .messageParams(v.messageParams())
                .build();
    }

    private ValidatorConfig processDoubleRangeFieldValidatorAnnotation(DoubleRangeFieldValidator v, String fieldName, String methodName) {
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="138">
<file line="118" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\components\AbstractRemoteBean.java"/>
<file line="133" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\components\TabbedPanel.java"/>
<codefragment>
<![CDATA[
        Boolean parseContent = (Boolean)stack.getContext().get(Head.PARSE_CONTENT);
        boolean generateId = (parseContent != null ? !parseContent : true);
        
        addParameter("pushId", generateId);
        if ((this.id == null || this.id.length() == 0) && generateId) {
            // resolves Math.abs(Integer.MIN_VALUE) issue reported by FindBugs 
            // http://findbugs.sourceforge.net/bugDescriptions.html#RV_ABSOLUTE_VALUE_OF_RANDOM_INT
            int nextInt = RANDOM.nextInt();
            nextInt = nextInt == Integer.MIN_VALUE ? Integer.MAX_VALUE : Math.abs(nextInt);  
            this.id = "widget_" + String.valueOf(nextInt);
            addParameter("id", this.id);
        }
    }

    @Override
    @StrutsTagSkipInheritance
    public void setTheme(String theme) {
        super.setTheme(theme);
    }
    
    @Override
    public String getTheme() {
        return "ajax";
    }
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="138">
<file line="96" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\convention\src\test\java\org\apache\struts2\convention\DefaultResultMapBuilderTest.java"/>
<file line="129" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\convention\src\test\java\org\apache\struts2\convention\DefaultResultMapBuilderTest.java"/>
<codefragment>
<![CDATA[
        EasyMock.replay(context);

        this.conventionsService = new ConventionsServiceImpl("/WEB-INF/location");
        DefaultResultMapBuilder builder = new DefaultResultMapBuilder(context, container, "dispatcher,velocity,freemarker");

        ResultTypeConfig resultType = new ResultTypeConfig.Builder("dispatcher", ServletDispatcherResult.class.getName()).
                addParam("key", "value").addParam("key1", "value1").defaultResultParam("location").build();
        ResultConfig globalError = new ResultConfig.Builder("error", ServletDispatcherResult.class.getName()).
                addParam("location", "/globalError.jsp").
                build();
        PackageConfig packageConfig = new PackageConfig.Builder("package").
                namespace("/namespace").
                defaultResultType("dispatcher").
                addResultTypeConfig(resultType).
                addGlobalResultConfig(globalError).
                build();


        Map<String, ResultConfig> results = builder.build(GlobalResultOverrideAction.class, null, "action", packageConfig);
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="137">
<file line="197" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\components\AbstractRemoteBean.java"/>
<file line="361" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\components\Submit.java"/>
<codefragment>
<![CDATA[
    @StrutsTagAttribute(description="Set indicator")
    public void setIndicator(String indicator) {
        this.indicator = indicator;
    }

    @StrutsTagAttribute(description="Show loading text on targets", type="Boolean", defaultValue="false")
    public void setShowLoadingText(String showLoadingText) {
        this.showLoadingText = showLoadingText;
    }

    @StrutsTagAttribute(description="The css class to use for element")
    public void setCssClass(String cssClass) {
        super.setCssClass(cssClass);
    }

    @StrutsTagAttribute(description="The css style to use for element")
    public void setCssStyle(String cssStyle) {
        super.setCssStyle(cssStyle);
    }

    @StrutsTagAttribute(description="The id to use for the element")
    public void setId(String id) {
        super.setId(id);
    }

    @StrutsTagAttribute(description="The name to set for element")
    public void setName(String name) {
        super.setName(name);
    }

    @StrutsTagAttribute(description="The type of submit to use. Valid values are <i>input</i>, " +
]]>
</codefragment>
</duplication>
<duplication lines="38" tokens="136">
<file line="408" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\json\src\main\java\org\apache\struts2\json\JSONInterceptor.java"/>
<file line="108" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\json\src\main\java\org\apache\struts2\json\JSONResult.java"/>
<codefragment>
<![CDATA[
    }

    /**
     * Sets a comma-delimited list of regular expressions to match properties
     * that should be excluded from the JSON output.
     *
     * @param commaDelim A comma-delimited list of regular expressions
     */
    public void setExcludeProperties(String commaDelim) {
        Set<String> excludePatterns = JSONUtil.asSet(commaDelim);
        if (excludePatterns != null) {
            this.excludeProperties = new ArrayList<Pattern>(excludePatterns.size());
            for (String pattern : excludePatterns) {
                this.excludeProperties.add(Pattern.compile(pattern));
            }
        }
    }

    /**
     * Sets a comma-delimited list of wildcard expressions to match properties
     * that should be excluded from the JSON output.
     *
     * @param commaDelim A comma-delimited list of wildcard patterns
     */
    public void setExcludeWildcards(String commaDelim) {
        Set<String> excludePatterns = JSONUtil.asSet(commaDelim);
        if (excludePatterns != null) {
            this.excludeProperties = new ArrayList<Pattern>(excludePatterns.size());
            for (String pattern : excludePatterns) {
                this.excludeProperties.add(WildcardUtil.compileWildcardPattern(pattern));
            }
        }
    }

    /**
     * @return the includeProperties
     */
    public List<Pattern> getIncludePropertiesList() {
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="136">
<file line="53" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\javatemplates\src\test\java\org\apache\struts2\views\java\simple\ActionErrorTest.java"/>
<file line="53" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\javatemplates\src\test\java\org\apache\struts2\views\java\simple\ActionMessageTest.java"/>
<codefragment>
<![CDATA[
        String expected = s("<ul style='style' class='actionMessage'><li><span>this clas is bad</span></li><li><span>baaaaad</span></li></ul>");
        assertEquals(expected, output);
    }

    public void testRenderActionErrorNoErrors() {
        this.errors.clear();
        tag.evaluateParams();
        map.putAll(tag.getParameters());
        theme.renderTag(getTagName(), context);
        String output = writer.getBuffer().toString();
        assertEquals("", output);
    }

    @Override
    protected void setUp() throws Exception {
        this.errors = new ArrayList<String>();
        this.errors.add("this clas is bad");
        this.errors.add("baaaaad");

        //errors are needed to setup stack
        super.setUp();
        this.tag = new ActionError(stack, request, response);
    }

    @Override
    protected void setUpStack() {
        super.setUpStack();
        expectFind("actionMessages", this.errors);
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="135">
<file line="30" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\javatemplates\src\test\java\org\apache\struts2\views\java\simple\ActionErrorTest.java"/>
<file line="30" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\javatemplates\src\test\java\org\apache\struts2\views\java\simple\ActionMessageTest.java"/>
<codefragment>
<![CDATA[
public class ActionMessageTest extends AbstractTest {
    private ActionError tag;
    private List<String> errors;

    public void testRenderActionError() {
        tag.setCssClass("class");
        tag.setCssStyle("style");

        tag.evaluateParams();
        map.putAll(tag.getParameters());
        theme.renderTag(getTagName(), context);
        String output = writer.getBuffer().toString();
        String expected = s("<ul style='style' class='class'><li><span>this clas is bad</span></li><li><span>baaaaad</span></li></ul>");
        assertEquals(expected, output);
    }

    public void testRenderActionErrorWithoutCssClass() {
        tag.setCssStyle("style");

        tag.evaluateParams();
        map.putAll(tag.getParameters());
        theme.renderTag(getTagName(), context);
        String output = writer.getBuffer().toString();
        String expected = s("<ul style='style' class='actionMessage'><li><span>this clas is bad</span></li><li><span>baaaaad</span></li></ul>");
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="134">
<file line="52" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\SortIteratorTagTest.java"/>
<file line="87" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\SortIteratorTagTest.java"/>
<codefragment>
<![CDATA[
            Iterator sortedIterator = (Iterator) stack.findValue("top");

            assertNotNull(sortedIterator);
            // 1
            assertTrue(sortedIterator.hasNext());
            assertEquals(sortedIterator.next(), new Integer(1));
            // 2
            assertTrue(sortedIterator.hasNext());
            assertEquals(sortedIterator.next(), new Integer(2));
            // 3
            assertTrue(sortedIterator.hasNext());
            assertEquals(sortedIterator.next(), new Integer(3));
            // 4
            assertTrue(sortedIterator.hasNext());
            assertEquals(sortedIterator.next(), new Integer(4));
            // 5
            assertTrue(sortedIterator.hasNext());
            assertEquals(sortedIterator.next(), new Integer(5));

            assertFalse(sortedIterator.hasNext());
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="133">
<file line="43" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\validator\AnnotationValidationAction.java"/>
<file line="48" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\validator\AnnotationValidationExpAction.java"/>
<codefragment>
<![CDATA[
            minInclusiveExpression = "${doubleMinInclusiveExpression}", maxInclusiveExpression = "${doubleMaxInclusiveExpression}",
            fieldName = "foo", key = "double.key", message = "Foo is out of range!", shortCircuit = true,
            messageParams = {"one", "two", "three"})
    @EmailValidator(message = "Foo isn't a valid e-mail!", fieldName = "foo", key = "email.key",
            messageParams = {"one", "two", "three"}, shortCircuit = true)
    @ExpressionValidator(expression = "true", message = "Is not true!", key = "expression.key",
            messageParams = {"one", "two", "three"}, shortCircuit = true)
    @FieldExpressionValidator(expression = "true", fieldName = "foo", key = "fieldexpression.key", message = "It is not true!",
            messageParams = {"one", "two", "three"}, shortCircuit = true)
    @IntRangeFieldValidator(fieldName = "foo", key = "int.key", message = "Foo is out of range!",
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="133">
<file line="155" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\util\AnnotationUtils.java"/>
<file line="912" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\validator\AnnotationValidationConfigurationBuilder.java"/>
<codefragment>
<![CDATA[
    public String resolvePropertyName(Method method) {

        Matcher matcher = SETTER_PATTERN.matcher(method.getName());
        if (matcher.matches() && method.getParameterTypes().length == 1) {
            String raw = matcher.group(1);
            return raw.substring(0, 1).toLowerCase() + raw.substring(1);
        }

        matcher = GETTER_PATTERN.matcher(method.getName());
        if (matcher.matches() && method.getParameterTypes().length == 0) {
            String raw = matcher.group(2);
            return raw.substring(0, 1).toLowerCase() + raw.substring(1);
        }

        return null;
    }
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="132">
<file line="87" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\SortIteratorTagTest.java"/>
<file line="124" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\SortIteratorTagTest.java"/>
<codefragment>
<![CDATA[
            Iterator sortedIterator = (Iterator) pageContext.getAttribute("myId");

            assertNotNull(sortedIterator);
            // 1
            assertTrue(sortedIterator.hasNext());
            assertEquals(sortedIterator.next(), new Integer(1));
            // 2
            assertTrue(sortedIterator.hasNext());
            assertEquals(sortedIterator.next(), new Integer(2));
            // 3
            assertTrue(sortedIterator.hasNext());
            assertEquals(sortedIterator.next(), new Integer(3));
            // 4
            assertTrue(sortedIterator.hasNext());
            assertEquals(sortedIterator.next(), new Integer(4));
            // 5
            assertTrue(sortedIterator.hasNext());
            assertEquals(sortedIterator.next(), new Integer(5));

            assertFalse(sortedIterator.hasNext());
        }

        tag.doEndTag();
    }

    public void testSortWithIllegalSource() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="131">
<file line="122" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\conversion\impl\AnnotationXWorkConverterTest.java"/>
<file line="156" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\conversion\impl\XWorkConverterTest.java"/>
<codefragment>
<![CDATA[
        action.setDate(null);

        stack.push(action);

        Map<String, Object> ognlStackContext = stack.getContext();
        ognlStackContext.put(XWorkConverter.REPORT_CONVERSION_ERRORS, Boolean.TRUE);

        String[] value = new String[]{"invalid date"};
        assertEquals("Conversion should have failed.", OgnlRuntime.NoConversionPossible, converter.convertValue(ognlStackContext, action, null, "date", value, Date.class));
        stack.pop();

        Map conversionErrors = (Map) ognlStackContext.get(ActionContext.CONVERSION_ERRORS);
        assertNotNull(conversionErrors);
        assertEquals(1, conversionErrors.size());
        assertNotNull(conversionErrors.get("date"));
        assertEquals(value, conversionErrors.get("date"));
    }

    public void testFieldErrorMessageAddedWhenConversionFailsOnModelDriven() {
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="131">
<file line="59" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\DefaultTextProviderTest.java"/>
<file line="77" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\TextProviderSupportTest.java"/>
<codefragment>
<![CDATA[
        assertEquals("Hello World", tp.getText("hello", "this is default", args)); // no args in bundle
        assertEquals("Hello World Santa", tp.getText("hello.0", "this is default", args)); // only 1 arg in bundle
        assertEquals("Hello World. This is Santa speaking loud", tp.getText("hello.1", "this is default", args));

        assertEquals("this is default", tp.getText("not.in.bundle", "this is default", args));
        assertEquals("this is default Santa", tp.getText("not.in.bundle", "this is default {0}", args));
        assertEquals("this is default Santa speaking loud", tp.getText("not.in.bundle", "this is default {0} speaking {1}", args));

        assertEquals("Hello World", tp.getText("hello", args)); // no args in bundle
        assertEquals("Hello World Santa", tp.getText("hello.0", args)); // only 1 arg in bundle
        assertEquals("Hello World. This is Santa speaking loud", tp.getText("hello.1", args));

        assertEquals("not.in.bundle", tp.getText("not.in.bundle", args));
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="131">
<file line="2599" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\jasper\compiler\Generator.java"/>
<file line="2659" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\jasper\compiler\Generator.java"/>
<codefragment>
<![CDATA[
                    out.print(tmpVarName);
                    out.println(";");
                }
            } else {
                for (int i = 0; i < tagVarInfos.length; i++) {
                    if (tagVarInfos[i].getScope() != scope)
                        continue;
                    // If the scripting variable has been declared, skip codes
                    // for saving and restoring it.
                    if (n.getScriptingVars(scope).contains(tagVarInfos[i]))
                        continue;
                    String varName = tagVarInfos[i].getNameGiven();
                    if (varName == null) {
                        varName = n.getTagData().getAttributeString(
                                tagVarInfos[i].getNameFromAttribute());
                    } else if (tagVarInfos[i].getNameFromAttribute() != null) {
                        // alias
                        continue;
                    }
                    String tmpVarName = "_jspx_" + varName + "_"
                            + n.getCustomNestingLevel();
                    out.printin(varName);
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="131">
<file line="304" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\convention\src\test\java\org\apache\struts2\convention\DefaultResultMapBuilderTest.java"/>
<file line="327" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\convention\src\test\java\org\apache\struts2\convention\DefaultResultMapBuilderTest.java"/>
<codefragment>
<![CDATA[
        Map<String, ResultConfig> results = builder.build(InheritedResultExtends.class, null, "result-inheritance-extends", packageConfig);
        assertEquals(1, results.size());
        assertEquals("error", results.get("error").getName());
        assertEquals(3, results.get("error").getParams().size());
        assertEquals("org.apache.struts2.dispatcher.ServletDispatcherResult", results.get("error").getClassName());
        assertEquals("/WEB-INF/location/namespace/error.jsp", results.get("error").getParams().get("location"));
        assertEquals("value", results.get("error").getParams().get("key"));
        assertEquals("value1", results.get("error").getParams().get("key1"));
        EasyMock.verify(context);
    }

     public void testClassLevelOverwriteInheritedSingleResultAnnotation() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="131">
<file line="147" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\dispatcher\StreamResultTest.java"/>
<file line="195" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\dispatcher\StreamResultTest.java"/>
<codefragment>
<![CDATA[
        result.setParse(true);
        // This time we dun use ${...}, so streamForImage will
        // be evaluated to the stack, which should reaturn an
        // InputStream object, cause there's such a property in
        // the action object itself.
        result.setInputName("streamForImage");
        result.setBufferSize(128);
        result.setContentLength(String.valueOf(contentLength));
        result.setContentDisposition("filename=\"logo.png\"");
        result.setContentType("image/jpeg");

        result.doExecute("helloworld", mai);

        assertEquals(String.valueOf(contentLength), result.getContentLength());
        assertEquals("image/jpeg", result.getContentType());
        assertEquals("streamForImage", result.getInputName());
        assertEquals(128, result.getBufferSize());
        assertEquals("filename=\"logo.png\"", result.getContentDisposition());

        assertEquals("image/jpeg", response.getContentType());
        assertEquals(contentLength, response.getContentLength());
        assertEquals("filename=\"logo.png\"", response.getHeader("Content-disposition"));
    }
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="130">
<file line="105" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\URLTagTest.java"/>
<file line="188" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\URLTagTest.java"/>
<codefragment>
<![CDATA[
        tag.setIncludeParams("NONE");

        ParamTag param1 = new ParamTag();
        param1.setPageContext(pageContext);
        param1.setName("param1");
        param1.setValue("%{'param1value'}");

        ParamTag param2 = new ParamTag();
        param2.setPageContext(pageContext);
        param2.setName("param2");
        param2.setValue("%{'param2value'}");

        ParamTag param3 = new ParamTag();
        param3.setPageContext(pageContext);
        param3.setName("id1");
        param3.setValue("%{'paramId1'}");


        tag.doStartTag();
        param1.doStartTag();
        param1.doEndTag();
        param2.doStartTag();
        param2.doEndTag();
        param3.doStartTag();
        param3.doEndTag();

        URL url = (URL) tag.getComponent();
        Map parameters = url.getParameters();
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="130">
<file line="120" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\AnchorTagTest.java"/>
<file line="102" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\URLTagTest.java"/>
<codefragment>
<![CDATA[
    public void testParametersPriority() throws Exception {
        request.setQueryString("id1=urlId1&id2=urlId2&urlParam1=urlValue1&urlParam2=urlValue2");

        tag.setValue("testAction.action?id1=tagId1&id2=tagId2&tagId=tagValue");

        ParamTag param1 = new ParamTag();
        param1.setPageContext(pageContext);
        param1.setName("param1");
        param1.setValue("%{'param1value'}");

        ParamTag param2 = new ParamTag();
        param2.setPageContext(pageContext);
        param2.setName("param2");
        param2.setValue("%{'param2value'}");

        ParamTag param3 = new ParamTag();
        param3.setPageContext(pageContext);
        param3.setName("id1");
        param3.setValue("%{'paramId1'}");


        tag.doStartTag();
        param1.doStartTag();
        param1.doEndTag();
        param2.doStartTag();
        param2.doEndTag();
        param3.doStartTag();
        param3.doEndTag();
]]>
</codefragment>
</duplication>
<duplication lines="39" tokens="129">
<file line="106" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\views\jsp\ui\AbstractRemoteTag.java"/>
<file line="159" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\views\jsp\ui\SubmitTag.java"/>
<codefragment>
<![CDATA[
    }

    public void setNotifyTopics(String notifyTopics) {
        this.notifyTopics = notifyTopics;
    }

    public void setShowErrorTransportText(String showErrorTransportText) {
        this.showErrorTransportText = showErrorTransportText;
    }

    public void setIndicator(String indicator) {
        this.indicator = indicator;
    }

    public void setShowLoadingText(String showLoadingText) {
        this.showLoadingText = showLoadingText;
    }

    public void setAfterNotifyTopics(String afterNotifyTopics) {
        this.afterNotifyTopics = afterNotifyTopics;
    }

    public void setBeforeNotifyTopics(String beforeNotifyTopics) {
        this.beforeNotifyTopics = beforeNotifyTopics;
    }

    public void setErrorNotifyTopics(String errorNotifyTopics) {
        this.errorNotifyTopics = errorNotifyTopics;
    }

    public void setHighlightColor(String highlightColor) {
        this.highlightColor = highlightColor;
    }

    public void setHighlightDuration(String highlightDuration) {
        this.highlightDuration = highlightDuration;
    }

    public void setValidate(String validate) {
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="129">
<file line="375" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\convention\src\test\java\org\apache\struts2\convention\DefaultResultMapBuilderTest.java"/>
<file line="476" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\convention\src\test\java\org\apache\struts2\convention\DefaultResultMapBuilderTest.java"/>
<codefragment>
<![CDATA[
        Map<String, ResultConfig> results = builder.build(ActionLevelResultsAction.class, getAnnotation(ActionLevelResultsAction.class, "execute", Action.class), "action-level-results", packageConfig);
        assertEquals(4, results.size());
        assertEquals("error", results.get("error").getName());
        assertEquals("input", results.get("input").getName());
        assertEquals("success", results.get("success").getName());
        assertEquals("failure", results.get("failure").getName());
        assertEquals(3, results.get("error").getParams().size());
        assertEquals("org.apache.struts2.dispatcher.ServletDispatcherResult", results.get("error").getClassName());
        assertEquals("/WEB-INF/location/namespace/error.jsp", results.get("error").getParams().get("location"));
        assertEquals("value", results.get("success").getParams().get("key"));
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="128">
<file line="430" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\interceptor\ParametersInterceptorTest.java"/>
<file line="462" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\interceptor\ParametersInterceptorTest.java"/>
<codefragment>
<![CDATA[
                put("baz", "123");
                put("name", "try_1");
                put("(name)", "try_2");
                put("['name']", "try_3");
                put("['na' + 'me']", "try_4");
                put("{name}[0]", "try_5");
                put("(new string{'name'})[0]", "try_6");
                put("#{key: 'name'}.key", "try_7");
            }
        };

        HashMap<String, Object> extraContext = new HashMap<String, Object>();
        extraContext.put(ActionContext.PARAMETERS, params);

        ActionProxy proxy = actionProxyFactory.createActionProxy("", MockConfigurationProvider.PARAM_INTERCEPTOR_ACTION_NAME, null, extraContext);

        ActionConfig config = configuration.getRuntimeConfiguration().getActionConfig("", MockConfigurationProvider.PARAM_INTERCEPTOR_ACTION_NAME);
        ParametersInterceptor pi = (ParametersInterceptor) config.getInterceptors().get(0).getInterceptor();
        pi.setAcceptParamNames("blah, baz");
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="128">
<file line="260" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\test\java\org\apache\struts2\dojo\views\jsp\ui\AbstractUITagTest.java"/>
<file line="295" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\test\java\org\apache\struts2\dojo\views\jsp\ui\AbstractUITagTest.java"/>
<codefragment>
<![CDATA[
    public void verify(URL url, String[] excluded) throws Exception {
        if (url == null) {
            fail("unable to verify a null URL");
        } else if (this.writer == null) {
            fail("AbstractJspWriter.writer not initialized.  Unable to verify");
        }

        StringBuffer buffer = new StringBuffer(128);
        InputStream in = url.openStream();
        byte[] buf = new byte[4096];
        int nbytes;

        while ((nbytes = in.read(buf)) > 0) {
            buffer.append(new String(buf, 0, nbytes));
        }

        in.close();

        /**
         * compare the trimmed values of each buffer and make sure they're equivalent.  however, let's make sure to
         * normalize the strings first to account for line termination differences between platforms.
         */
        String writerString = normalize(writer.toString(), true);
        String bufferString = normalize(buffer.toString(), true);

        assertEquals(bufferString, writerString);
    }
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="127">
<file line="135" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\interceptor\ParametersInterceptorTest.java"/>
<file line="297" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\interceptor\ParametersInterceptorTest.java"/>
<codefragment>
<![CDATA[
                put(pollution6, "bad");
            }
        };

        final Map<String, Boolean> excluded = new HashMap<String, Boolean>();
        ParametersInterceptor pi = new ParametersInterceptor() {

            @Override
            protected boolean isExcluded(String paramName) {
                boolean result = super.isExcluded(paramName);
                excluded.put(paramName, result);
                return result;
            }

        };

        container.inject(pi);
        ValueStack vs = ActionContext.getContext().getValueStack();

        // when
        ValidateAction action = new ValidateAction();
        pi.setParameters(action, vs, params);

        // then
        assertEquals(0, action.getActionMessages().size());
        assertTrue(excluded.get(pollution1));
        assertTrue(excluded.get(pollution2));
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="127">
<file line="86" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\main\java\org\apache\struts2\portlet\PortletApplicationMap.java"/>
<file line="77" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\main\java\org\apache\struts2\portlet\PortletRequestMap.java"/>
<codefragment>
<![CDATA[
                        Entry entry = (Entry) obj;

                        return ((key == null) ? (entry.getKey() == null) : key
                                .equals(entry.getKey()))
                                && ((value == null) ? (entry.getValue() == null)
                                        : value.equals(entry.getValue()));
                    }

                    public int hashCode() {
                        return ((key == null) ? 0 : key.hashCode())
                                ^ ((value == null) ? 0 : value.hashCode());
                    }

                    public String getKey() {
                        return key;
                    }

                    public Object getValue() {
                        return value;
                    }

                    public Object setValue(Object obj) {
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="127">
<file line="65" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\OptionTransferSelectTagTest.java"/>
<file line="138" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\OptionTransferSelectTagTest.java"/>
<file line="348" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\OptionTransferSelectTagTest.java"/>
<codefragment>
<![CDATA[
        tag.setDoubleEmptyOption("false");

        tag.setAllowAddAllToLeft("true");
        tag.setAllowAddAllToRight("true");
        tag.setAllowAddToLeft("true");
        tag.setAllowAddToRight("true");
        tag.setAllowSelectAll("true");

        tag.setAddAllToLeftLabel("All Left");
        tag.setAddAllToRightLabel("All Right");
        tag.setAddToLeftLabel("Left");
        tag.setAddToRightLabel("Right");
        tag.setSelectAllLabel("Select All");

        tag.setLeftTitle("Title Left");
        tag.setRightTitle("Title Right");

        tag.setButtonCssClass("buttonCssClass");
        tag.setButtonCssStyle("buttonCssStyle");

        tag.setHeaderKey("Header Key");
        tag.setHeaderValue("Header Value");

        tag.setDoubleHeaderKey("Double Header Key");
        tag.setDoubleHeaderValue("Double Header Value");

        tag.doStartTag();
        tag.doEndTag();

        //System.out.println(writer.toString());
        verify(OptionTransferSelectTagTest.class.getResource("optiontransferselect-5.txt"));
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="127">
<file line="90" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\main\java\org\apache\struts2\dispatcher\ApplicationMap.java"/>
<file line="85" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\main\java\org\apache\struts2\dispatcher\RequestMap.java"/>
<codefragment>
<![CDATA[
                        Entry entry = (Entry) obj;

                        return ((key == null) ? (entry.getKey() == null) : key.equals(entry.getKey())) && ((value == null) ? (entry.getValue() == null) : value.equals(entry.getValue()));
                    }

                    public int hashCode() {
                        return ((key == null) ? 0 : key.hashCode()) ^ ((value == null) ? 0 : value.hashCode());
                    }

                    public Object getKey() {
                        return key;
                    }

                    public Object getValue() {
                        return value;
                    }

                    public Object setValue(Object obj) {
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="126">
<file line="37" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\validator\RegexFieldValidatorTest.java"/>
<file line="136" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\validator\RegexFieldValidatorTest.java"/>
<codefragment>
<![CDATA[
        testPerson.setUsername("");

        ValueStack stack = ActionContext.getContext().getValueStack();
        ActionContext.getContext().setValueStack(stack);

        RegexFieldValidator validator = new RegexFieldValidator();
        validator.setRegex("^Sec.*");
        validator.setValidatorContext(new GenericValidatorContext(new Object()));
        validator.setFieldName("username");
        validator.setValueStack(ActionContext.getContext().getValueStack());
        validator.validate(testPerson);

        assertFalse(validator.getValidatorContext().hasErrors());
        assertFalse(validator.getValidatorContext().hasActionErrors());
        assertFalse(validator.getValidatorContext().hasActionMessages());
        assertFalse(validator.getValidatorContext().hasFieldErrors());
    }

    public void testNoStringField() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="126">
<file line="51" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\json\src\test\java\org\apache\struts2\json\JSONEnumTest.java"/>
<file line="48" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\json\src\test\java\org\apache\struts2\json\JSONUtilTest.java"/>
<codefragment>
<![CDATA[
        String json = JSONUtil.serialize(bean1);

        Map result = (Map) JSONUtil.deserialize(json);
        assertEquals("str", result.get("stringField"));
        assertEquals(true, result.get("booleanField"));
        assertEquals("s", result.get("charField")); // note: this is a
                                                            // String
        assertEquals(10.1, result.get("doubleField"));
        assertEquals(1.5, result.get("floatField")); // note: this is a
                                                            // Double
        assertEquals(10L, result.get("intField")); // note: this is a
                                                            // Long
        assertEquals(AnEnum.ValueA, AnEnum.valueOf((String) result.get("enumField"))); // note:
                                                                                        // this
                                                                                        // is a
                                                                                        // String
        assertEquals(AnEnumBean.Two, AnEnumBean.valueOf((String) result.get("enumBean"))); // note:
                                                                                            // this
                                                                                            // is a
                                                                                            // String
    }

    public void testSerializeListOfList() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="126">
<file line="443" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\SelectTest.java"/>
<file line="477" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\SelectTest.java"/>
<codefragment>
<![CDATA[
    public void testSimpleIntegerWithValueWorkaround() throws Exception {
        TestAction testAction = (TestAction) action;

        IdName hello = new IdName(new Integer(1), "hello");
        IdName world = new IdName(new Integer(2), "world");
        List list2 = new ArrayList();
        list2.add(hello);
        list2.add(world);
        testAction.setList2(list2);

        testAction.setFooInt(new Integer(1));

        SelectTag tag = new SelectTag();
        tag.setPageContext(pageContext);
        tag.setEmptyOption("true");
        tag.setLabel("mylabel");
        tag.setName("fooInt");
        tag.setList("list2");
        tag.setListKey("id");
        tag.setListValue("name");
        tag.setValue("fooInt");
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="126">
<file line="202" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\main\java\org\apache\struts2\dispatcher\FilterDispatcher.java"/>
<file line="49" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\main\java\org\apache\struts2\dispatcher\ng\InitOperations.java"/>
<codefragment>
<![CDATA[
    public void initLogging( HostConfig filterConfig ) {
        String factoryName = filterConfig.getInitParameter("loggerFactory");
        if (factoryName != null) {
            try {
                Class cls = ClassLoaderUtil.loadClass(factoryName, this.getClass());
                LoggerFactory fac = (LoggerFactory) cls.newInstance();
                LoggerFactory.setLoggerFactory(fac);
            } catch ( InstantiationException e ) {
                System.err.println("Unable to instantiate logger factory: " + factoryName + ", using default");
                e.printStackTrace();
            } catch ( IllegalAccessException e ) {
                System.err.println("Unable to access logger factory: " + factoryName + ", using default");
                e.printStackTrace();
            } catch ( ClassNotFoundException e ) {
                System.err.println("Unable to locate logger factory class: " + factoryName + ", using default");
                e.printStackTrace();
            }
        }
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="125">
<file line="433" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\java8-support\src\main\java\org\apache\struts2\convention\Java8ClassFinder.java"/>
<file line="452" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\util\finder\DefaultClassFinder.java"/>
<codefragment>
<![CDATA[
    }

    private List<Info> getAnnotationInfos(String name) {
        List<Info> infos = annotated.get(name);
        if (infos == null) {
            infos = new ArrayList<Info>();
            annotated.put(name, infos);
        }
        return infos;
    }

    private void readClassDef(String className) {
        if (!className.endsWith(".class")) {
            className = className.replace('.', '/') + ".class";
        }
        try {
            URL resource = classLoaderInterface.getResource(className);
            if (resource != null) {
                InputStream in = resource.openStream();
                try {
                    ClassReader classReader = new ClassReader(in);
                    classReader.accept(new InfoBuildingVisitor(this), ClassReader.SKIP_DEBUG);
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="124">
<file line="52" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\json\src\test\java\org\apache\struts2\json\JSONCleanerTest.java"/>
<file line="87" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\json\src\test\java\org\apache\struts2\json\JSONCleanerTest.java"/>
<codefragment>
<![CDATA[
		cleaner.setBlocked("b,d.y");

		Map data = getData();
		cleaner.clean("", data);
		assertEquals(3, data.size());
		assertEquals("x", data.get("a"));
		assertNull(data.get("b"));
		assertNotNull(data.get("c"));
		assertNotNull(data.get("d"));
		assertEquals(1, ((Map) data.get("d")).size());
		assertEquals("a", ((Map) data.get("d")).get("x"));
		assertNull(((Map) data.get("d")).get("y"));

	}
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="124">
<file line="47" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\main\java\org\apache\struts2\util\tomcat\buf\Utf8Decoder.java"/>
<file line="1140" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\ELParserTokenManager.java"/>
<codefragment>
<![CDATA[
   -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, 
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="123">
<file line="52" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\SortIteratorTagTest.java"/>
<file line="124" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\SortIteratorTagTest.java"/>
<codefragment>
<![CDATA[
            Iterator sortedIterator = (Iterator) pageContext.getAttribute("myId");

            assertNotNull(sortedIterator);
            // 1
            assertTrue(sortedIterator.hasNext());
            assertEquals(sortedIterator.next(), new Integer(1));
            // 2
            assertTrue(sortedIterator.hasNext());
            assertEquals(sortedIterator.next(), new Integer(2));
            // 3
            assertTrue(sortedIterator.hasNext());
            assertEquals(sortedIterator.next(), new Integer(3));
            // 4
            assertTrue(sortedIterator.hasNext());
            assertEquals(sortedIterator.next(), new Integer(4));
            // 5
            assertTrue(sortedIterator.hasNext());
            assertEquals(sortedIterator.next(), new Integer(5));

            assertFalse(sortedIterator.hasNext());
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="121">
<file line="108" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\util\finder\ClassFinder.java"/>
<file line="425" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\util\finder\DefaultClassFinder.java"/>
<codefragment>
<![CDATA[
    }

    public class PackageInfo extends Annotatable implements Info {
        private final String name;
        private final ClassInfo info;
        private final Package pkg;

        public PackageInfo(Package pkg){
            super(pkg);
            this.pkg = pkg;
            this.name = pkg.getName();
            this.info = null;
        }

        public PackageInfo(String name, ClassFinder classFinder) {
            info = new ClassInfo(name, null, classFinder);
            this.name = name;
            this.pkg = null;
        }

        public String getName() {
            return name;
        }

        public Package get() throws ClassNotFoundException {
            return (pkg != null)?pkg:info.get().getPackage();
        }
    }
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="121">
<file line="175" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\jasper\tagplugins\jstl\core\Import.java"/>
<file line="307" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\jasper\tagplugins\jstl\core\Import.java"/>
<codefragment>
<![CDATA[
            ctxt.generateJavaSource("    " + tempStringName + " = " +sbName + ".toString();");
            
            ctxt.generateJavaSource("}else{");
            
            //if the url is relative, http request is needed.
            ctxt.generateJavaSource("    if (!(pageContext.getRequest() instanceof HttpServletRequest  " +
            "&& pageContext.getResponse() instanceof HttpServletResponse)){");
            ctxt.generateJavaSource("        throw new JspTagException(\"Relative &lt;import&gt; from non-HTTP request not allowed\");");
            ctxt.generateJavaSource("    }");
            
            //get the servlet context of the context defined in the context attribute
            ctxt.generateJavaSource("    ServletContext " + servletContextName + " = null;");
            if(hasContext){
                ctxt.generateJavaSource("    if(null != " + contextName + "){");
                ctxt.generateJavaSource("        " + servletContextName + " = pageContext.getServletContext().getContext(" + contextName + ");" );
                ctxt.generateJavaSource("    }else{");
                ctxt.generateJavaSource("        " + servletContextName + " = pageContext.getServletContext();");
                ctxt.generateJavaSource("    }");
            }else{
                ctxt.generateJavaSource("    " + servletContextName + " = pageContext.getServletContext();");
            }
            
            //
            ctxt.generateJavaSource("    if(" + servletContextName + " == null){");
            if(hasContext){
                ctxt.generateJavaSource("        throw new JspTagException(\"Unable to get RequestDispatcher for Context: \\\" \" +" + contextName + "+ \" \\\" and URL: \\\" \" +" + urlName + "+ \" \\\". Verify values and/or enable cross context access.\");");
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="121">
<file line="2078" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\jasper\compiler\Generator.java"/>
<file line="2123" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\jasper\compiler\Generator.java"/>
<codefragment>
<![CDATA[
            out.popIndent();

            // Store varReader in appropriate scope
            if (varReaderAttr != null || varAttr != null) {
                String scopeName = n.getTextAttribute("scope");
                out.printin("_jspx_page_context.setAttribute(");
                if (varReaderAttr != null) {
                    out.print(quote(varReaderAttr));
                    out
                            .print(", new java.io.StringReader(_jspx_sout.toString())");
                } else {
                    out.print(quote(varAttr));
                    out.print(", _jspx_sout.toString()");
                }
                if (scopeName != null) {
                    out.print(", ");
                    out.print(getScopeConstant(scopeName));
                }
                out.println(");");
            }

            // Restore EL context
            out.printil("jspContext.getELContext().putContext(JspContext.class,getJspContext());");

            n.setEndJavaLine(out.getJavaLine());
        }

        public void visit(Node.AttributeGenerator n) throws JasperException {
]]>
</codefragment>
</duplication>
<duplication lines="8" tokens="121">
<file line="385" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\convention\src\test\java\org\apache\struts2\convention\DefaultResultMapBuilderTest.java"/>
<file line="486" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\convention\src\test\java\org\apache\struts2\convention\DefaultResultMapBuilderTest.java"/>
<codefragment>
<![CDATA[
        assertEquals("value1", results.get("success").getParams().get("key1"));
        assertEquals(1, results.get("input").getParams().size());
        assertEquals("foo.action", results.get("input").getParams().get("actionName"));
        assertEquals("org.apache.struts2.dispatcher.ServletActionRedirectResult", results.get("input").getClassName());
        assertEquals(3, results.get("failure").getParams().size());
        assertEquals("/WEB-INF/location/namespace/action-failure.jsp", results.get("failure").getParams().get("location"));
        assertEquals("org.apache.struts2.dispatcher.ServletDispatcherResult", results.get("failure").getClassName());
        assertEquals(3, results.get("success").getParams().size());
]]>
</codefragment>
</duplication>
<duplication lines="56" tokens="121">
<file line="165" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\main\java\org\apache\struts2\dispatcher\VelocityResult.java"/>
<file line="194" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\main\java\org\apache\struts2\portlet\result\PortletVelocityResult.java"/>
<codefragment>
<![CDATA[
            throw e;
        } finally {
            if (usedJspFactory) {
                jspFactory.releasePageContext(pageContext);
            }
        }
    }

    /**
     * Retrieve the content type for this template. <p/>People can override
     * this method if they want to provide specific content types for specific
     * templates (eg text/xml).
     *
     * @return The content type associated with this template (default
     *         "text/html")
     */
    protected String getContentType(String templateLocation) {
        return "text/html";
    }

    /**
     * Retrieve the encoding for this template. <p/>People can override this
     * method if they want to provide specific encodings for specific templates.
     *
     * @return The encoding associated with this template (defaults to the value
     *         of 'struts.i18n.encoding' property)
     */
    protected String getEncoding(String templateLocation) {
        String encoding = defaultEncoding;
        if (encoding == null) {
            encoding = System.getProperty("file.encoding");
        }
        if (encoding == null) {
            encoding = "UTF-8";
        }
        return encoding;
    }

    /**
     * Given a value stack, a Velocity engine, and an action invocation, this
     * method returns the appropriate Velocity template to render.
     *
     * @param stack the value stack to resolve the location again (when parse
     *        equals true)
     * @param velocity the velocity engine to process the request against
     * @param invocation an encapsulation of the action execution state.
     * @param location the location of the template
     * @param encoding the charset encoding of the template
     * @return the template to render
     * @throws Exception when the requested template could not be found
     */
    protected Template getTemplate(ValueStack stack, VelocityEngine velocity, ActionInvocation invocation,
                                   String location, String encoding) throws Exception {
        if (!location.startsWith("/")) {
            location = invocation.getProxy().getNamespace() + "/" + location;
        }
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="120">
<file line="123" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\AnchorTagTest.java"/>
<file line="227" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\AnchorTagTest.java"/>
<codefragment>
<![CDATA[
        tag.setIncludeParams("NONE");

        ParamTag param1 = new ParamTag();
        param1.setPageContext(pageContext);
        param1.setName("param1");
        param1.setValue("%{'param1value'}");

        ParamTag param2 = new ParamTag();
        param2.setPageContext(pageContext);
        param2.setName("param2");
        param2.setValue("%{'param2value'}");

        ParamTag param3 = new ParamTag();
        param3.setPageContext(pageContext);
        param3.setName("id1");
        param3.setValue("%{'paramId1'}");


        tag.doStartTag();
        param1.doStartTag();
        param1.doEndTag();
        param2.doStartTag();
        param2.doEndTag();
        param3.doStartTag();
        param3.doEndTag();
        tag.doEndTag();

        assertEquals(wrapWithAnchor("testAction.action?id1=paramId1&amp;id2=tagId2&amp;tagId=tagValue&amp;param1=param1value&amp;param2=param2value"), writer.toString());
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="120">
<file line="33" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\apps\showcase\src\main\java\org\apache\struts2\showcase\tag\nonui\iteratortag\AppendIteratorTagDemo.java"/>
<file line="33" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\apps\showcase\src\main\java\org\apache\struts2\showcase\tag\nonui\iteratortag\MergeIteratorTagDemo.java"/>
<codefragment>
<![CDATA[
	private String iteratorValue1;
	private String iteratorValue2;


	public void validate() {
		if (iteratorValue1 == null || iteratorValue1.trim().length() <= 0) {
			addFieldError("iteratorValue1", "iterator value 1 cannot be empty");
		} else if (iteratorValue1.trim().indexOf(",") <= 0) {
			addFieldError("iteratorValue1", "iterator value 1 needs to be comma separated");
		}
		if (iteratorValue2 == null || iteratorValue2.trim().length() <= 0) {
			addFieldError("iteratorValue2", "iterator value 2 cannot be empty");
		} else if (iteratorValue2.trim().indexOf(",") <= 0) {
			addFieldError("iteratorValue2", "iterator value 2 needs to be comma separated");
		}
	}


	public String getIteratorValue1() {
		return this.iteratorValue1;
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="119">
<file line="91" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\test\java\org\apache\struts2\portlet\interceptor\PortletStateInterceptorTest.java"/>
<file line="132" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\test\java\org\apache\struts2\portlet\interceptor\PortletStateInterceptorTest.java"/>
<codefragment>
<![CDATA[
		EasyMock.expect(invocation.getStack()).andStubReturn(currentStack);
		
		Map<String, Object> ctxMap = new HashMap<String, Object>();
		Map<String, Object> session = new HashMap<String, Object>();
		
		session.put(STACK_FROM_EVENT_PHASE, eventPhaseStack);
		
		ctxMap.put(PHASE, PortletPhase.RENDER_PHASE);
		ctxMap.put(REQUEST, renderRequest);
		
		ActionContext ctx = new ActionContext(ctxMap);
		ctx.setSession(session);
		
		EasyMock.expect(invocation.getInvocationContext()).andStubReturn(ctx);
		EasyMock.expect(invocation.getStack()).andStubReturn(currentStack);
		EasyMock.expect(invocation.getAction()).andStubReturn(new DirectRenderFromEventAction());
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="119">
<file line="285" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\FormTagTest.java"/>
<file line="317" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\FormTagTest.java"/>
<codefragment>
<![CDATA[
    public void testFormWithCustomOnsubmitEnabledWithValidateEnabled4() throws Exception {
        prepareMockInvocation();

        FormTag tag = new FormTag();
        tag.setPageContext(pageContext);
        tag.setName("myForm");
        tag.setMethod("post");
        tag.setAction("doubleValidationAction");
        tag.setAcceptcharset("UTF-8");
        tag.setEnctype("myEncType");
        tag.setTitle("mytitle");
        tag.setOnsubmit("submitMe()");
        tag.setValidate("true");
        tag.setNamespace("");

        UpDownSelectTag t = new UpDownSelectTag();
        t.setPageContext(pageContext);
        t.setName("myUpDownSelectTag");
        t.setList("{}");

        tag.doStartTag();
        tag.getComponent().getParameters().put("actionClass", DoubleValidationAction.class);
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="119">
<file line="80" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\CheckboxListTest.java"/>
<file line="106" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\CheckboxListTest.java"/>
<codefragment>
<![CDATA[
    public void testMultipleWithDisabledOn() throws Exception {
        TestAction testAction = (TestAction) action;
        Collection<String> collection = new ArrayList<String>(2);
        collection.add("hello");
        collection.add("foo");
        testAction.setCollection(collection);
        testAction.setList(new String[][]{
                {"hello", "world"},
                {"foo", "bar"},
                {"cat", "dog"}
        });

        CheckboxListTag tag = new CheckboxListTag();
        tag.setPageContext(pageContext);
        tag.setLabel("mylabel");
        tag.setName("collection");
        tag.setList("list");
        tag.setListKey("top[0]");
        tag.setListValue("top[1]");
        tag.setDisabled("true");
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="119">
<file line="78" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\IteratorGeneratorTagTest.java"/>
<file line="172" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\IteratorGeneratorTagTest.java"/>
<codefragment>
<![CDATA[
        tag.setCount("myCount");
        tag.doStartTag();
        Object topOfStack = stack.findValue("top");
        tag.doEndTag();
        Object afterTopOfStack = stack.findValue("top");


        assertTrue(topOfStack instanceof Iterator);
        // 1
        assertTrue(((Iterator)topOfStack).hasNext());
        assertEquals(((Iterator)topOfStack).next(), "aaa");
        // 2
        assertTrue(((Iterator)topOfStack).hasNext());
        assertEquals(((Iterator)topOfStack).next(), "bbb");
        // 3.
        assertTrue(((Iterator)topOfStack).hasNext());
        assertEquals(((Iterator)topOfStack).next(), "ccc");
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="118">
<file line="10" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\security\DefaultAcceptedPatternsCheckerTest.java"/>
<file line="11" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\security\DefaultExcludedPatternsCheckerTest.java"/>
<codefragment>
<![CDATA[
    public void testHardcodedPatterns() throws Exception {
        // given
        List<String> params = new ArrayList<String>() {
            {
                add("%{#application['test']}");
                add("%{#application.test}");
                add("%{#Application['test']}");
                add("%{#Application.test}");
                add("%{#session['test']}");
                add("%{#session.test}");
                add("%{#Session['test']}");
                add("%{#Session.test}");
                add("%{#struts['test']}");
                add("%{#struts.test}");
                add("%{#Struts['test']}");
                add("%{#Struts.test}");
                add("%{#request['test']}");
                add("%{#request.test}");
                add("%{#Request['test']}");
                add("%{#Request.test}");
                add("%{#servletRequest['test']}");
                add("%{#servletRequest.test}");
                add("%{#ServletRequest['test']}");
                add("%{#ServletRequest.test}");
                add("%{#servletResponse['test']}");
                add("%{#servletResponse.test}");
                add("%{#ServletResponse['test']}");
                add("%{#ServletResponse.test}");
                add("%{#servletContext['test']}");
]]>
</codefragment>
</duplication>
<duplication lines="43" tokens="117">
<file line="40" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\json\src\test\java\org\apache\struts2\json\OtherBean.java"/>
<file line="108" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\json\src\test\java\org\apache\struts2\json\WrapperClassBean.java"/>
<codefragment>
<![CDATA[
    }

    public Byte getByteField() {
        return byteField;
    }

    public void setByteField(Byte byteField) {
        this.byteField = byteField;
    }

    public Character getCharField() {
        return charField;
    }

    public void setCharField(Character charField) {
        this.charField = charField;
    }

    public Double getDoubleField() {
        return doubleField;
    }

    public void setDoubleField(Double doubleField) {
        this.doubleField = doubleField;
    }

    public Float getFloatField() {
        return floatField;
    }

    public void setFloatField(Float floatField) {
        this.floatField = floatField;
    }

    public Integer getIntField() {
        return intField;
    }

    public void setIntField(Integer intField) {
        this.intField = intField;
    }

    public int getNullIntField() {
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="117">
<file line="48" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\components\TextArea.java"/>
<file line="116" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\components\TreeNode.java"/>
<codefragment>
<![CDATA[
    protected void evaluateExtraParams() {
        super.evaluateExtraParams();
        
        // generate a random ID if not explicitly set and not parsing the content
        Boolean parseContent = (Boolean)stack.getContext().get(Head.PARSE_CONTENT);
        boolean generateId = (parseContent != null ? !parseContent : true);

        addParameter("pushId", generateId);
        if ((this.id == null || this.id.length() == 0) && generateId) {
            // resolves Math.abs(Integer.MIN_VALUE) issue reported by FindBugs 
            // http://findbugs.sourceforge.net/bugDescriptions.html#RV_ABSOLUTE_VALUE_OF_RANDOM_INT
            int nextInt = RANDOM.nextInt();
            nextInt = nextInt == Integer.MIN_VALUE ? Integer.MAX_VALUE : Math.abs(nextInt);  
            this.id = "widget_" + String.valueOf(nextInt);
            addParameter("id", this.id);
        }
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="115">
<file line="106" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\test\java\org\apache\struts2\portlet\dispatcher\Jsr168DispatcherTest.java"/>
<file line="168" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\test\java\org\apache\struts2\portlet\dispatcher\Jsr286DispatcherTest.java"/>
<codefragment>
<![CDATA[
	}
	
	public void testParseConfigWithBang() {
		
		MockPortletContext portletContext = new MockPortletContext();
		MockPortletConfig portletConfig = new MockPortletConfig(portletContext);

		portletConfig.addInitParameter("viewNamespace", "/view");
		portletConfig.addInitParameter("defaultViewAction", "index!input");

		Map<PortletMode, ActionMapping> actionMap = new HashMap<PortletMode, ActionMapping>();

		dispatcher.parseModeConfig(actionMap, portletConfig, PortletMode.VIEW,
				"viewNamespace", "defaultViewAction");

		ActionMapping mapping = actionMap.get(PortletMode.VIEW);
		assertEquals("index", mapping.getName());
		assertEquals("/view", mapping.getNamespace());
		assertEquals("input", mapping.getMethod());
	}

	public void setUp() {
]]>
</codefragment>
</duplication>
<duplication lines="35" tokens="115">
<file line="74" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\views\jsp\ui\AbstractRemoteTag.java"/>
<file line="119" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\views\jsp\ui\SubmitTag.java"/>
<codefragment>
<![CDATA[
    }

    public void setHref(String href) {
        this.href = href;
    }

    public void setErrorText(String errorText) {
        this.errorText = errorText;
    }

    public void setLoadingText(String loadingText) {
        this.loadingText = loadingText;
    }

    public void setListenTopics(String listenTopics) {
        this.listenTopics = listenTopics;
    }

    public void setExecuteScripts(String executeScripts) {
        this.executeScripts = executeScripts;
    }

    public void setHandler(String handler) {
        this.handler = handler;
    }

    public void setFormFilter(String formFilter) {
        this.formFilter = formFilter;
    }

    public void setFormId(String formId) {
        this.formId = formId;
    }

    public void setSrc(String src) {
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="115">
<file line="164" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\main\java\org\apache\struts2\dispatcher\mapper\Restful2ActionMapper.java"/>
<file line="363" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\rest\src\main\java\org\apache\struts2\rest\RestActionMapper.java"/>
<codefragment>
<![CDATA[
    }

    protected boolean isGet(HttpServletRequest request) {
        return "get".equalsIgnoreCase(request.getMethod());
    }

    protected boolean isPost(HttpServletRequest request) {
        return "post".equalsIgnoreCase(request.getMethod());
    }

    protected boolean isPut(HttpServletRequest request) {
        if ("put".equalsIgnoreCase(request.getMethod())) {
            return true;
        } else {
            return isPost(request) && "put".equalsIgnoreCase(request.getParameter(HTTP_METHOD_PARAM));
        }
    }

    protected boolean isDelete(HttpServletRequest request) {
        if ("delete".equalsIgnoreCase(request.getMethod())) {
            return true;
        } else {
            return "delete".equalsIgnoreCase(request.getParameter(HTTP_METHOD_PARAM));
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="114">
<file line="82" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\interceptor\PrefixMethodInvocationUtilTest.java"/>
<file line="222" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\interceptor\PrefixMethodInvocationUtilTest.java"/>
<codefragment>
<![CDATA[
	public void testInvokePrefixMethod5() throws Exception {
		PrefixMethodInvocationUtilTest.Action1 action = new PrefixMethodInvocationUtilTest.Action1();
		
		// ActionProxy
		MockControl controlActionProxy = MockControl.createControl(ActionProxy.class);
		ActionProxy mockActionProxy = (ActionProxy) controlActionProxy.getMock();		
		mockActionProxy.getMethod();
		controlActionProxy.setReturnValue("save");
		
		
		// ActionInvocation
		MockControl controlActionInvocation = MockControl.createControl(ActionInvocation.class);
		ActionInvocation mockActionInvocation = (ActionInvocation) controlActionInvocation.getMock();
		mockActionInvocation.getAction();
		controlActionInvocation.setReturnValue(action);
		mockActionInvocation.getProxy();
		controlActionInvocation.setReturnValue(mockActionProxy);
		
		controlActionProxy.replay();
		controlActionInvocation.replay();
		
		
		PrefixMethodInvocationUtil.invokePrefixMethod(
				mockActionInvocation, 
				new String[] { "noSuchPrefix", "noSuchPrefixDo" });
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="114">
<file line="493" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\interceptor\ParametersInterceptorTest.java"/>
<file line="509" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\interceptor\ParametersInterceptorTest.java"/>
<codefragment>
<![CDATA[
        params.put("theSemiProtectedMap.foo", "This is blah");
        params.put("theProtectedMap.boo", "This is blah");

        HashMap<String, Object> extraContext = new HashMap<String, Object>();
        extraContext.put(ActionContext.PARAMETERS, params);

        ActionProxy proxy = actionProxyFactory.createActionProxy("", MockConfigurationProvider.PARAM_INTERCEPTOR_ACTION_NAME, null, extraContext);
        proxy.execute();
        SimpleAction action = (SimpleAction) proxy.getAction();
        assertEquals(1, action.getTheProtectedMap().size());
        assertNotNull(action.getTheProtectedMap().get("boo"));
        assertNull(action.getTheProtectedMap().get("foo"));
    }

    /**
     * This test demonstrates a vulnerability which allows to execute arbitrary code.
     * For further details and explanations see https://cwiki.apache.org/confluence/display/WW/S2-009
     *
     * @throws Exception
     */
    public void testEvalExpressionAsParameterName() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="114">
<file line="187" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\conversion\impl\AnnotationXWorkConverterTest.java"/>
<file line="239" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\conversion\impl\XWorkConverterTest.java"/>
<codefragment>
<![CDATA[
        assertTrue(o instanceof Bar);

        Bar b = (Bar) o;
        assertEquals(value, b.getTitle() + ":" + b.getSomethingElse());
    }

    public void testLocalizedDateConversion() throws Exception {
        Date date = new Date(System.currentTimeMillis());
        Locale locale = Locale.GERMANY;
        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);
        String dateString = df.format(date);
        context.put(ActionContext.LOCALE, locale);
        assertEquals(dateString, converter.convertValue(context, null, null, null, date, String.class));
    }

    public void testStringToIntConversions() {
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="114">
<file line="334" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\jasper\servlet\JspServletWrapper.java"/>
<file line="395" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\jasper\servlet\JspServletWrapper.java"/>
<codefragment>
<![CDATA[
            }
        } catch (ServletException ex) {
            if(options.getDevelopment()) {
                throw handleJspException(ex);
            } else {
                throw ex;
            }
        } catch (IOException ex) {
            if(options.getDevelopment()) {
                throw handleJspException(ex);
            } else {
                throw ex;
            }
        } catch (IllegalStateException ex) {
            if(options.getDevelopment()) {
                throw handleJspException(ex);
            } else {
                throw ex;
            }
        } catch (Exception ex) {
            if(options.getDevelopment()) {
                throw handleJspException(ex);
            } else {
                throw new JasperException(ex);
            }
        }
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="114">
<file line="143" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\interceptor\MessageStorePreResultListenerTest.java"/>
<file line="223" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\interceptor\MessageStorePreResultListenerTest.java"/>
<codefragment>
<![CDATA[
        EasyMock.expectLastCall().andReturn(action);

        mockActionInvocation.getProxy();
        MockActionProxy actionProxy = new MockActionProxy();
        ResultConfig resultConfig = new ResultConfig.Builder(Action.SUCCESS, ServletRedirectResult.class.getName()).build();
        ActionConfig actionConfig = new ActionConfig.Builder("", "test", action.getClass().getName()).addResultConfig(resultConfig).build();
        actionProxy.setConfig(actionConfig);
        EasyMock.expectLastCall().andReturn(actionProxy);
        EasyMock.expectLastCall().anyTimes();

        EasyMock.replay(mockActionInvocation);

        interceptor.init();
        listener.beforeResult(mockActionInvocation, Action.SUCCESS);
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="113">
<file line="569" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\interceptor\ParametersInterceptorTest.java"/>
<file line="588" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\interceptor\ParametersInterceptorTest.java"/>
<codefragment>
<![CDATA[
                new MockConfigurationProvider(Collections.singletonMap("devMode", "false")));
        Map<String, Object> params = new HashMap<String, Object>();
        params.put("not_a_property", "There is no action property named like this");

        HashMap<String, Object> extraContext = new HashMap<String, Object>();
        extraContext.put(ActionContext.PARAMETERS, params);

        ActionConfig config = configuration.getRuntimeConfiguration().getActionConfig("", MockConfigurationProvider.PARAM_INTERCEPTOR_ACTION_NAME);
        container.inject(config.getInterceptors().get(0).getInterceptor());
        ActionProxy proxy = actionProxyFactory.createActionProxy("", MockConfigurationProvider.PARAM_INTERCEPTOR_ACTION_NAME, null, extraContext);
        proxy.execute();
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="113">
<file line="52" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\javatemplates\src\main\java\org\apache\struts2\views\java\simple\CheckboxListHandler.java"/>
<file line="45" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\javatemplates\src\main\java\org\apache\struts2\views\java\simple\RadioHandler.java"/>
<file line="77" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\javatemplates\src\main\java\org\apache\struts2\views\java\simple\SelectHandler.java"/>
<codefragment>
<![CDATA[
        ValueStack stack = this.context.getStack();
        if (listObj != null) {
            Iterator itt = MakeIterator.convert(listObj);
            while (itt.hasNext()) {
                Object item = itt.next();
                stack.push(item);

                //key
                Object itemKey = findValue(listKey != null ? listKey : "top");
                String itemKeyStr = StringUtils.defaultString(itemKey == null ? null : itemKey.toString()); 
                //value
                Object itemValue = findValue(listValue != null ? listValue : "top");
                String itemValueStr = StringUtils.defaultString(itemValue == null ? null : itemValue.toString()); 
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="112">
<file line="113" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\AbstractTagTest.java"/>
<file line="549" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\URLTagTest.java"/>
<codefragment>
<![CDATA[
        mockContainer = new Mock(Container.class);

        du.setConfigurationManager(configurationManager);
        session = new SessionMap(request);
        Map<String, Object> extraContext = du.createContextMap(new RequestMap(request),
                request.getParameterMap(),
                session,
                new ApplicationMap(pageContext.getServletContext()),
                request,
                response);
        // let's not set the locale -- there is a test that checks if Dispatcher actually picks this up...
        // ... but generally we want to just use no locale (let it stay system default)
        extraContext.remove(ActionContext.LOCALE);
        stack.getContext().putAll(extraContext);

        context.put(ServletActionContext.HTTP_REQUEST, request);
        context.put(ServletActionContext.HTTP_RESPONSE, response);
        context.put(ServletActionContext.SERVLET_CONTEXT, servletContext);

        ActionContext.setContext(new ActionContext(context));
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="112">
<file line="226" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\dispatcher\ServletRedirectResultTest.java"/>
<file line="274" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\dispatcher\ServletRedirectResultTest.java"/>
<codefragment>
<![CDATA[
            .addParam("param", "${list}")
            .build();

        ActionContext context = ActionContext.getContext();
        MockHttpServletRequest req = new MockHttpServletRequest();
        MockHttpServletResponse res = new MockHttpServletResponse();
        context.put(ServletActionContext.HTTP_REQUEST, req);
        context.put(ServletActionContext.HTTP_RESPONSE, res);

        Map<String, ResultConfig> results=  new HashMap<String, ResultConfig>();
        results.put("myResult", resultConfig);

        ActionConfig actionConfig = new ActionConfig.Builder("", "", "")
                .addResultConfigs(results).build();

        ServletRedirectResult result = new ServletRedirectResult();
        result.setLocation("/myNamespace/myAction.action");
        result.setParse(true);
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="111">
<file line="40" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\validator\VisitorFieldValidatorModelTest.java"/>
<file line="42" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\validator\VisitorFieldValidatorTest.java"/>
<codefragment>
<![CDATA[
        action = new VisitorValidatorTestAction();

        TestBean bean = action.getBean();
        Calendar cal = new GregorianCalendar(1900, 01, 01);
        bean.setBirth(cal.getTime());
        bean.setCount(-1);

        ActionConfig config = new ActionConfig.Builder("", "name", "").build();
        ActionInvocation invocation = EasyMock.createNiceMock(ActionInvocation.class);
        ActionProxy proxy = EasyMock.createNiceMock(ActionProxy.class);

        EasyMock.expect(invocation.getProxy()).andReturn(proxy).anyTimes();
        EasyMock.expect(invocation.getAction()).andReturn(action).anyTimes();
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="111">
<file line="116" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\interceptor\PrepareInterceptorTest.java"/>
<file line="153" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\interceptor\PrepareInterceptorTest.java"/>
<codefragment>
<![CDATA[
    	controlActionProxy.setDefaultReturnValue("save");
    	
    	
    	MockControl controlActionInvocation = MockControl.createControl(ActionInvocation.class);
    	ActionInvocation mockActionInvocation = (ActionInvocation) controlActionInvocation.getMock();
    	mockActionInvocation.getAction();
    	controlActionInvocation.setDefaultReturnValue(mockAction);
    	mockActionInvocation.invoke();
    	controlActionInvocation.setDefaultReturnValue("okok");
    	mockActionInvocation.getProxy();
    	controlActionInvocation.setDefaultReturnValue(mockActionProxy);
    	
    	
    	controlAction.replay();
    	controlActionProxy.replay();
    	controlActionInvocation.replay();
    	
    	PrepareInterceptor interceptor = new PrepareInterceptor();
    	String result = interceptor.intercept(mockActionInvocation);
    	
    	assertEquals("okok", result);
    	
    	controlAction.verify();
    	controlActionProxy.verify();
    	controlActionInvocation.verify();
    }

    public void testPrepareThrowException() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="111">
<file line="115" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\components\AbstractRemoteBean.java"/>
<file line="49" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\components\TextArea.java"/>
<codefragment>
<![CDATA[
        super.evaluateExtraParams();

        // generate a random ID if not explicitly set and not parsing the content
        Boolean parseContent = (Boolean)stack.getContext().get(Head.PARSE_CONTENT);
        boolean generateId = (parseContent != null ? !parseContent : true);
        
        addParameter("pushId", generateId);
        if ((this.id == null || this.id.length() == 0) && generateId) {
            // resolves Math.abs(Integer.MIN_VALUE) issue reported by FindBugs 
            // http://findbugs.sourceforge.net/bugDescriptions.html#RV_ABSOLUTE_VALUE_OF_RANDOM_INT
            int nextInt = RANDOM.nextInt();
            nextInt = nextInt == Integer.MIN_VALUE ? Integer.MAX_VALUE : Math.abs(nextInt);  
            this.id = "widget_" + String.valueOf(nextInt);
            addParameter("id", this.id);
        }
    }

    @Override
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="111">
<file line="169" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\FieldErrorTagTest.java"/>
<file line="190" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\FieldErrorTagTest.java"/>
<codefragment>
<![CDATA[
    public void testWithParamsWithoutFieldErrors2() throws Exception {
        FieldErrorTag tag = new FieldErrorTag();
        ((InternalAction)action).setHaveFieldErrors(false);
        tag.setPageContext(pageContext);
        tag.doStartTag();
            ParamTag pTag1 = new ParamTag();
            pTag1.setPageContext(pageContext);
            pTag1.setValue("%{'field1'}");
            pTag1.doStartTag();
            pTag1.doEndTag();

            ParamTag pTag2 = new ParamTag();
            pTag2.setPageContext(pageContext);
            pTag2.setValue("%{'field3'}");
            pTag2.doStartTag();
            pTag2.doEndTag();
        tag.doEndTag();

        verify(FieldErrorTagTest.class.getResource("fielderror-2.txt"));
    }


    public void testWithParamsWithoutFieldErrors3() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="111">
<file line="227" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\AnchorTagTest.java"/>
<file line="105" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\URLTagTest.java"/>
<codefragment>
<![CDATA[
        tag.setValue("testAction.action?id1=tagId1&id2=tagId2&tagId=tagValue");

        ParamTag param1 = new ParamTag();
        param1.setPageContext(pageContext);
        param1.setName("param1");
        param1.setValue("%{'param1value'}");

        ParamTag param2 = new ParamTag();
        param2.setPageContext(pageContext);
        param2.setName("param2");
        param2.setValue("%{'param2value'}");

        ParamTag param3 = new ParamTag();
        param3.setPageContext(pageContext);
        param3.setName("id1");
        param3.setValue("%{'paramId1'}");


        tag.doStartTag();
        param1.doStartTag();
        param1.doEndTag();
        param2.doStartTag();
        param2.doEndTag();
        param3.doStartTag();
        param3.doEndTag();
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="110">
<file line="189" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\test\java\org\apache\struts2\views\jsp\PortletUrlTagTest.java"/>
<file line="286" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\test\java\org\apache\struts2\views\jsp\PortletUrlTagTest.java"/>
<codefragment>
<![CDATA[
        mockPortletRes.expects(once()).method("createActionURL").will(
                returnValue(mockPortletUrl.proxy()));
        mockCtx.expects(atLeastOnce()).method("getMajorVersion").will(returnValue(1));

        Map paramMap = new HashMap();
        paramMap.put(PortletConstants.ACTION_PARAM, new String[]{"/view/testAction"});
        paramMap.put(PortletConstants.MODE_PARAM, new String[]{mode.toString()});

        mockPortletUrl.expects(once()).method("setParameters").with(new ParamMapConstraint(paramMap));
        mockPortletUrl.expects(once()).method("setPortletMode").with(eq(PortletMode.VIEW));
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="110">
<file line="227" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\json\src\test\java\org\apache\struts2\json\JSONResultTest.java"/>
<file line="326" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\json\src\test\java\org\apache\struts2\json\JSONResultTest.java"/>
<codefragment>
<![CDATA[
    public void testCommentWrap() throws Exception {
        JSONResult result = new JSONResult();

        TestAction action = new TestAction();
        stack.push(action);

        // test scape characters
        action.setArray(new String[] { "a", "a", "\"", "\\", "/", "\b", "\f", "\n", "\r", "\t" });

        List list = new ArrayList();

        list.add("b");
        list.add(1);
        list.add(new int[] { 10, 12 });
        action.setCollection(list);

        // beans
        List collection2 = new ArrayList();
        Bean bean1 = new Bean();

        bean1.setStringField("str");
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="110">
<file line="269" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\components\DateTimePicker.java"/>
<file line="52" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\components\TextArea.java"/>
<codefragment>
<![CDATA[
        Boolean parseContent = (Boolean)stack.getContext().get(Head.PARSE_CONTENT);
        boolean generateId = (parseContent != null ? !parseContent : true);
        
        addParameter("pushId", generateId);
        if ((this.id == null || this.id.length() == 0) && generateId) {
            // resolves Math.abs(Integer.MIN_VALUE) issue reported by FindBugs 
            // http://findbugs.sourceforge.net/bugDescriptions.html#RV_ABSOLUTE_VALUE_OF_RANDOM_INT
            int nextInt = RANDOM.nextInt();
            nextInt = nextInt == Integer.MIN_VALUE ? Integer.MAX_VALUE : Math.abs(nextInt);  
            this.id = "widget_" + String.valueOf(nextInt);
            addParameter("id", this.id);
        }
    }

    @Override
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="110">
<file line="115" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\AbstractTagTest.java"/>
<file line="116" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\test\java\org\apache\struts2\dojo\views\jsp\ui\AbstractTagTest.java"/>
<codefragment>
<![CDATA[
        session = new SessionMap<String, Object>(request);
        Map<String, Object> extraContext = du.createContextMap(new RequestMap(request),
                request.getParameterMap(),
                session,
                new ApplicationMap(pageContext.getServletContext()),
                request,
                response);
        // let's not set the locale -- there is a test that checks if Dispatcher actually picks this up...
        // ... but generally we want to just use no locale (let it stay system default)
        extraContext.remove(ActionContext.LOCALE);
        stack.getContext().putAll(extraContext);

        context.put(ServletActionContext.HTTP_REQUEST, request);
        context.put(ServletActionContext.HTTP_RESPONSE, response);
        context.put(ServletActionContext.SERVLET_CONTEXT, servletContext);

        ActionContext.setContext(new ActionContext(context));
    }

    protected void tearDown() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="110">
<file line="65" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\dispatcher\ng\StrutsPrepareAndExecuteFilterIntegrationTest.java"/>
<file line="85" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\dispatcher\ng\StrutsPrepareAndExecuteFilterIntegrationTest.java"/>
<codefragment>
<![CDATA[
    public void testActionMappingLookup() throws ServletException, IOException {
        MockHttpServletRequest request = new MockHttpServletRequest();
        MockHttpServletResponse response = new MockHttpServletResponse();
        MockFilterConfig filterConfig = new MockFilterConfig();
        MockFilterChain filterChain = new MockFilterChain() {
            @Override
            public void doFilter(ServletRequest req, ServletResponse res) {
                fail("Shouldn't get here");
            }
        };

        request.setRequestURI("/hello.action");
        StrutsPrepareAndExecuteFilter filter = new StrutsPrepareAndExecuteFilter();
        filter.init(filterConfig);
        filter.doFilter(request, response, filterChain);
        assertEquals(200, response.getStatus());
        assertNull(ActionContext.getContext());
        assertNull(Dispatcher.getInstance());
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="110">
<file line="90" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\main\java\org\apache\struts2\dispatcher\ApplicationMap.java"/>
<file line="86" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\main\java\org\apache\struts2\portlet\PortletApplicationMap.java"/>
<codefragment>
<![CDATA[
                        Map.Entry entry = (Map.Entry) obj;

                        return ((key == null) ? (entry.getKey() == null) : key
                                .equals(entry.getKey()))
                                && ((value == null) ? (entry.getValue() == null)
                                        : value.equals(entry.getValue()));
                    }

                    public int hashCode() {
                        return ((key == null) ? 0 : key.hashCode())
                                ^ ((value == null) ? 0 : value.hashCode());
                    }

                    public String getKey() {
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="109">
<file line="144" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\validator\StringValidatorTest.java"/>
<file line="163" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\validator\StringValidatorTest.java"/>
<codefragment>
<![CDATA[
        equidae.setDonkey("asdfasdfasdf");
        ActionContext.getContext().getValueStack().push(equidae);
        context = new DelegatingValidatorContext(new ValidationAwareSupport());
        container.getInstance(ActionValidatorManager.class).validate(equidae, null, context);
        assertTrue(context.hasFieldErrors());

        fieldErrors = context.getFieldErrors();

        // cow
        assertTrue(fieldErrors.containsKey("cow"));
        errors = (List) fieldErrors.get("cow");
        assertEquals(2, errors.size());
        assertEquals("noTrim-min5-max10", errors.get(0));
        assertEquals("noTrim-max10", errors.get(1));
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="109">
<file line="176" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\interceptor\DefaultWorkflowInterceptorTest.java"/>
<file line="82" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\interceptor\ValidationInterceptorPrefixMethodInvocationTest.java"/>
<codefragment>
<![CDATA[
        action = EasyMock.createNiceMock(ValidateAction.class);


        EasyMock.expect(invocation.getProxy()).andReturn(proxy).anyTimes();
        EasyMock.expect(invocation.getAction()).andReturn(action).anyTimes();
        EasyMock.expect(invocation.invoke()).andAnswer(new IAnswer<String>() {
            public String answer() throws Throwable {
                return result;
            }
        }).anyTimes();

        EasyMock.expect(proxy.getConfig()).andReturn(config).anyTimes();
        EasyMock.expect(proxy.getMethod()).andAnswer(new IAnswer<String>() {
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="109">
<file line="807" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\ELParser.java"/>
<file line="914" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\ELParser.java"/>
<codefragment>
<![CDATA[
                  AstEmpty jjtn003 = new AstEmpty(JJTEMPTY);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
      try {
        Unary();
      } catch (Throwable jjte003) {
                  if (jjtc003) {
                    jjtree.clearNodeScope(jjtn003);
                    jjtc003 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte003 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte003;}
                  }
                  if (jjte003 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte003;}
                  }
                  {if (true) throw (Error)jjte003;}
      } finally {
                  if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003, true);
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="109">
<file line="768" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\ELParser.java"/>
<file line="887" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\ELParser.java"/>
<codefragment>
<![CDATA[
                          AstNot jjtn002 = new AstNot(JJTNOT);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
      try {
        Unary();
      } catch (Throwable jjte002) {
                          if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte002 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte002;}
                          }
                          if (jjte002 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte002;}
                          }
                          {if (true) throw (Error)jjte002;}
      } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="109">
<file line="729" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\ELParser.java"/>
<file line="848" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\ELParser.java"/>
<codefragment>
<![CDATA[
                  AstNegative jjtn001 = new AstNegative(JJTNEGATIVE);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
      try {
        Unary();
      } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
      } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="109">
<file line="111" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\ELParser.java"/>
<file line="145" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\ELParser.java"/>
<codefragment>
<![CDATA[
      jj_consume_token(START_DYNAMIC_EXPRESSION);
      Expression();
      jj_consume_token(END_EXPRESSION);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/*
 * Expression
 * EL Expression Language Root, goes to Choice
 */
  final public void Expression() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="109">
<file line="245" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\components\Submit.java"/>
<file line="256" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\components\Tree.java"/>
<codefragment>
<![CDATA[
            addParameter("errorNotifyTopics", findString(errorNotifyTopics));
                
        // generate a random ID if not explicitly set and not parsing the content
        Boolean parseContent = (Boolean)stack.getContext().get(Head.PARSE_CONTENT);
        boolean generateId = (parseContent != null ? !parseContent : true);

        addParameter("pushId", generateId);
        if ((this.id == null || this.id.length() == 0) && generateId) {
            // resolves Math.abs(Integer.MIN_VALUE) issue reported by FindBugs 
            // http://findbugs.sourceforge.net/bugDescriptions.html#RV_ABSOLUTE_VALUE_OF_RANDOM_INT
            int nextInt = RANDOM.nextInt();
            nextInt = nextInt == Integer.MIN_VALUE ? Integer.MAX_VALUE : Math.abs(nextInt);  
            this.id = "widget_" + String.valueOf(nextInt);
            addParameter("id", this.id);
        }
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="109">
<file line="156" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\interceptor\MessageStorePreResultListenerTest.java"/>
<file line="241" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\interceptor\MessageStorePreResultListenerTest.java"/>
<codefragment>
<![CDATA[
        assertTrue(sessionMap.containsKey(MessageStoreInterceptor.fieldErrorsSessionKey));

        List actionErrors = (List) sessionMap.get(MessageStoreInterceptor.actionErrorsSessionKey);
        List actionMessages = (List) sessionMap.get(MessageStoreInterceptor.actionMessagesSessionKey);
        Map fieldErrors = (Map) sessionMap.get(MessageStoreInterceptor.fieldErrorsSessionKey);

        assertEquals(actionErrors.size(), 2);
        assertEquals(actionMessages.size(), 2);
        assertEquals(fieldErrors.size(), 2);

        assertTrue(actionErrors.contains("some action error 1"));
        assertTrue(actionErrors.contains("some action error 2"));
        assertTrue(actionMessages.contains("some action message 1"));
        assertTrue(actionMessages.contains("some action message 2"));
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="109">
<file line="77" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\interceptor\MessageStoreInterceptorTest.java"/>
<file line="207" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\interceptor\MessageStoreInterceptorTest.java"/>
<codefragment>
<![CDATA[
        actionContext.put(ActionContext.SESSION, sessionMap);

        HttpSession mockedSession = EasyMock.createControl().createMock(HttpSession.class);
        HttpServletRequest mockedRequest = EasyMock.createControl().createMock(HttpServletRequest.class);
        mockedRequest.getSession(false);
        EasyMock.expectLastCall().andReturn(mockedSession);
        EasyMock.expectLastCall().once();
        ServletActionContext.setRequest(mockedRequest);

        EasyMock.replay(mockedRequest);

        // Mock (ActionInvocation)
        ActionInvocation mockActionInvocation = EasyMock.createControl().createMock(ActionInvocation.class);
        mockActionInvocation.getInvocationContext();
        EasyMock.expectLastCall().andReturn(actionContext);
        EasyMock.expectLastCall().anyTimes();

        mockActionInvocation.addPreResultListener(EasyMock.<PreResultListener>anyObject());
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="109">
<file line="408" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\components\UIComponentTest.java"/>
<file line="433" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\components\UIComponentTest.java"/>
<codefragment>
<![CDATA[
            SelectTag tag = new SelectTag();
            tag.setList("{}");
            tag.setName("name");
            tag.setLabel("label");
            tag.setPageContext(pageContext);
            tag.doStartTag();
            assertEquals(tag.getComponent().getComponentStack().peek(), tag.getComponent());
            tag.doEndTag();

            assertEquals(t.getComponent().getComponentStack().peek(), t.getComponent());

            t.doEndTag();
        }
        catch (Exception e) {
            e.printStackTrace();
            fail(e.toString());
        }
    }

    // submit
    public void testSubmitDisposeItselfFromComponentStack() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="108">
<file line="134" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\jasper\compiler\ImplicitTagLibraryInfo.java"/>
<file line="229" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\jasper\compiler\TagLibraryInfoImpl.java"/>
<codefragment>
<![CDATA[
        Iterator list = tld.findChildren();

        while (list.hasNext()) {
            TreeNode element = (TreeNode) list.next();
            String tname = element.getName();

            if ("tlibversion".equals(tname) // JSP 1.1
                    || "tlib-version".equals(tname)) { // JSP 1.2
                this.tlibversion = element.getBody();
            } else if ("jspversion".equals(tname)
                    || "jsp-version".equals(tname)) {
                this.jspversion = element.getBody();
            } else if ("shortname".equals(tname) || "short-name".equals(tname))
]]>
</codefragment>
</duplication>
<duplication lines="36" tokens="108">
<file line="63" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\test\java\org\apache\struts2\dojo\views\jsp\ui\StrutsMockHttpServletResponse.java"/>
<file line="49" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\json\src\test\java\org\apache\struts2\json\StrutsMockHttpServletResponse.java"/>
<codefragment>
<![CDATA[
    }

    public void setWriter(PrintWriter writer) {
        this.writer = writer;
    }

    public String encodeURL(String s) {
        return s;
    }

    public String encodeRedirectURL(String s) {
        return s;
    }

    public String encodeUrl(String s) {
        return s;
    }

    public void setStatus(int i) {
        this.status = i;
        super.setStatus(i);
    }

    public int getStatus() {
        return status;
    }


    public String getRedirectURL() {
        return redirectURL;
    }

    public void sendRedirect(String redirectURL) throws IOException {
        this.redirectURL = redirectURL;
        super.sendRedirect(redirectURL);
    }
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="108">
<file line="115" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\components\AbstractRemoteBean.java"/>
<file line="117" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\components\TreeNode.java"/>
<codefragment>
<![CDATA[
        super.evaluateExtraParams();
        
        // generate a random ID if not explicitly set and not parsing the content
        Boolean parseContent = (Boolean)stack.getContext().get(Head.PARSE_CONTENT);
        boolean generateId = (parseContent != null ? !parseContent : true);

        addParameter("pushId", generateId);
        if ((this.id == null || this.id.length() == 0) && generateId) {
            // resolves Math.abs(Integer.MIN_VALUE) issue reported by FindBugs 
            // http://findbugs.sourceforge.net/bugDescriptions.html#RV_ABSOLUTE_VALUE_OF_RANDOM_INT
            int nextInt = RANDOM.nextInt();
            nextInt = nextInt == Integer.MIN_VALUE ? Integer.MAX_VALUE : Math.abs(nextInt);  
            this.id = "widget_" + String.valueOf(nextInt);
            addParameter("id", this.id);
        }
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="108">
<file line="256" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\util\DefaultUrlHelperTest.java"/>
<file line="314" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\util\DefaultUrlHelperTest.java"/>
<codefragment>
<![CDATA[
        mockHttpServletRequest.expectAndReturn("getServerPort", 7002);
        mockHttpServletRequest.expectAndReturn("getContextPath", "/mywebapp");

        Mock mockHttpServletResponse = new Mock(HttpServletResponse.class);
        mockHttpServletResponse.expectAndReturn("encodeURL", expectedString, expectedString);

        String actionName = "/MyAction.action";
        TreeMap params = new TreeMap();
        params.put("hello", new String[]{"earth", "mars"});
        params.put("foo", "bar");

        String urlString = urlHelper.buildUrl(actionName, (HttpServletRequest) mockHttpServletRequest.proxy(), (HttpServletResponse) mockHttpServletResponse.proxy(), params, "http", true, true);
        assertEquals(expectedString, urlString);
    }

    /**
     * The UrlHelper should build a URL that starts with "https" followed by the server name when the scheme of the
     * current request is "http" and the port for the "https" scheme is 443. When the request has been forwarded
     * in a Servlet 2.4 container, the UrlHelper should use the javax.servlet.forward.request_uri request attribute
     * instead of a call to HttpServletRequest#getRequestURI().
     */
    public void testForwardedRequest() {
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="108">
<file line="231" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\util\DefaultUrlHelperTest.java"/>
<file line="285" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\util\DefaultUrlHelperTest.java"/>
<codefragment>
<![CDATA[
        mockHttpServletRequest.expectAndReturn("getServerPort", 7001);
        mockHttpServletRequest.expectAndReturn("getContextPath", "/mywebapp");

        Mock mockHttpServletResponse = new Mock(HttpServletResponse.class);
        mockHttpServletResponse.expectAndReturn("encodeURL", expectedString, expectedString);

        String actionName = "/MyAction.action";
        TreeMap params = new TreeMap();
        params.put("hello", new String[]{"earth", "mars"});
        params.put("foo", "bar");

        String urlString = urlHelper.buildUrl(actionName, (HttpServletRequest) mockHttpServletRequest.proxy(), (HttpServletResponse) mockHttpServletResponse.proxy(), params, "https", true, true);
        assertEquals(expectedString, urlString);
    }

    /**
     * This test is similar to {@link #testSwitchToHttpScheme()} with the HTTP port equal to 7001 and the HTTPS port
     * equal to port 7002.
     */
    public void testSwitchToHttpNonDefaultPort() {
]]>
</codefragment>
</duplication>
<duplication lines="36" tokens="108">
<file line="70" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\StrutsMockHttpServletResponse.java"/>
<file line="63" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\test\java\org\apache\struts2\dojo\views\jsp\ui\StrutsMockHttpServletResponse.java"/>
<codefragment>
<![CDATA[
    }

    public void setWriter(PrintWriter writer) {
        this.writer = writer;
    }

    public String encodeURL(String s) {
        return s;
    }

    public String encodeRedirectURL(String s) {
        return s;
    }

    public String encodeUrl(String s) {
        return s;
    }

    public void setStatus(int i) {
        this.status = i;
        super.setStatus(i);
    }

    public int getStatus() {
        return status;
    }


    public String getRedirectURL() {
        return redirectURL;
    }

    public void sendRedirect(String redirectURL) throws IOException {
        this.redirectURL = redirectURL;
        super.sendRedirect(redirectURL);
    }
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="108">
<file line="68" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\interceptor\FileUploadInterceptorTest.java"/>
<file line="108" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\interceptor\FileUploadInterceptorTest.java"/>
<codefragment>
<![CDATA[
        interceptor.setAllowedExtensions(".txt");

        // when file is of allowed extensions
        ValidationAwareSupport validation = new ValidationAwareSupport();
        boolean ok = interceptor.acceptFile(action, new File(""), "filename.txt", "text/plain", "inputName", validation);

        assertTrue(ok);
        assertTrue(validation.getFieldErrors().isEmpty());
        assertFalse(validation.hasErrors());

        // when file is not of allowed extensions
        validation = new ValidationAwareSupport();
        boolean notOk = interceptor.acceptFile(action, new File(""), "filename.html", "text/html", "inputName", validation);

        assertFalse(notOk);
        assertFalse(validation.getFieldErrors().isEmpty());
        assertTrue(validation.hasErrors());
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="108">
<file line="90" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\dispatcher\ServletActionRedirectResultTest.java"/>
<file line="145" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\dispatcher\ServletActionRedirectResultTest.java"/>
<codefragment>
<![CDATA[
        result.setParse(false);
        result.setEncode(false);
        result.setPrependServletContext(false);
        result.setAnchor("fragment");
        result.setUrlHelper(new DefaultUrlHelper());

        IMocksControl control = createControl();
        ActionProxy mockActionProxy = control.createMock(ActionProxy.class);
        ActionInvocation mockInvocation = control.createMock(ActionInvocation.class);
        expect(mockInvocation.getProxy()).andReturn(mockActionProxy);
        expect(mockInvocation.getResultCode()).andReturn("myResult");
        expect(mockActionProxy.getConfig()).andReturn(actionConfig);
        expect(mockInvocation.getInvocationContext()).andReturn(context);
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="107">
<file line="64" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\interceptor\ValidationErrorAwareTest.java"/>
<file line="82" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\interceptor\ValidationInterceptorPrefixMethodInvocationTest.java"/>
<codefragment>
<![CDATA[
        action = EasyMock.createNiceMock(ValidateAction.class);


        EasyMock.expect(invocation.getProxy()).andReturn(proxy).anyTimes();
        EasyMock.expect(invocation.getAction()).andReturn(action).anyTimes();
        EasyMock.expect(invocation.invoke()).andAnswer(new IAnswer<String>() {
            public String answer() throws Throwable {
                return result;
            }
        }).anyTimes();

        EasyMock.expect(proxy.getConfig()).andReturn(config).anyTimes();
        EasyMock.expect(proxy.getMethod()).andAnswer(new IAnswer<String>() {
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="107">
<file line="150" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\plexus\src\main\java\org\apache\struts2\plexus\PlexusObjectFactory.java"/>
<file line="42" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\factory\DefaultInterceptorFactory.java"/>
<codefragment>
<![CDATA[
            Interceptor interceptor = (Interceptor) objectFactory.buildBean(interceptorClassName, null);
            reflectionProvider.setProperties(params, interceptor);
            interceptor.init();

            return interceptor;
        } catch (InstantiationException e) {
            cause = e;
            message = "Unable to instantiate an instance of Interceptor class [" + interceptorClassName + "].";
        } catch (IllegalAccessException e) {
            cause = e;
            message = "IllegalAccessException while attempting to instantiate an instance of Interceptor class [" + interceptorClassName + "].";
        } catch (ClassCastException e) {
            cause = e;
            message = "Class [" + interceptorClassName + "] does not implement com.opensymphony.xwork2.interceptor.Interceptor";
        } catch (Exception e) {
            cause = e;
            message = "Caught Exception while registering Interceptor class " + interceptorClassName;
        } catch (NoClassDefFoundError e) {
            cause = e;
            message = "Could not load class " + interceptorClassName + ". Perhaps it exists but certain dependencies are not available?";
        }

        throw new ConfigurationException(message, cause, interceptorConfig);
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="107">
<file line="477" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\json\src\test\java\org\apache\struts2\json\JSONInterceptorTest.java"/>
<file line="503" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\json\src\test\java\org\apache\struts2\json\JSONInterceptorTest.java"/>
<codefragment>
<![CDATA[
        List<Bean> beans = action.getAnotherBean().getYetAnotherBean().getBeans();

        assertNotNull(beans);
        assertEquals(1, beans.size());
        assertTrue(beans.get(0).isBooleanField());
        assertEquals(beans.get(0).getStringField(), "test");
        assertEquals(beans.get(0).getIntField(), 10);
        assertEquals(beans.get(0).getCharField(), 's');
        assertEquals(beans.get(0).getDoubleField(), 10.1);
        assertEquals(beans.get(0).getByteField(), 3);
    }
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="107">
<file line="31" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\AstDeferredExpression.java"/>
<file line="31" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\AstDynamicExpression.java"/>
<codefragment>
<![CDATA[
    public AstDynamicExpression(int id) {
        super(id);
    }

    public Class getType(EvaluationContext ctx)
            throws ELException {
        return this.children[0].getType(ctx);
    }

    public Object getValue(EvaluationContext ctx)
            throws ELException {
        return this.children[0].getValue(ctx);
    }

    public boolean isReadOnly(EvaluationContext ctx)
            throws ELException {
        return this.children[0].isReadOnly(ctx);
    }

    public void setValue(EvaluationContext ctx, Object value)
            throws ELException {
        this.children[0].setValue(ctx, value);
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="107">
<file line="269" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\components\DateTimePicker.java"/>
<file line="259" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\components\Tree.java"/>
<codefragment>
<![CDATA[
        Boolean parseContent = (Boolean)stack.getContext().get(Head.PARSE_CONTENT);
        boolean generateId = (parseContent != null ? !parseContent : true);

        addParameter("pushId", generateId);
        if ((this.id == null || this.id.length() == 0) && generateId) {
            // resolves Math.abs(Integer.MIN_VALUE) issue reported by FindBugs 
            // http://findbugs.sourceforge.net/bugDescriptions.html#RV_ABSOLUTE_VALUE_OF_RANDOM_INT
            int nextInt = RANDOM.nextInt();
            nextInt = nextInt == Integer.MIN_VALUE ? Integer.MAX_VALUE : Math.abs(nextInt);  
            this.id = "widget_" + String.valueOf(nextInt);
            addParameter("id", this.id);
        }
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="106">
<file line="77" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\interceptor\StaticParametersInterceptorTest.java"/>
<file line="97" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\interceptor\StaticParametersInterceptorTest.java"/>
<codefragment>
<![CDATA[
    public void testWithOneParametersNoParse() throws Exception {
        MockActionInvocation mai = new MockActionInvocation();
        MockActionProxy map = new MockActionProxy();
        ActionConfig ac = new ActionConfig.Builder("", "", "")
                .addParam("top.name", "${top.hero}")
                .build();
        map.setConfig(ac);
        mai.setProxy(map);
        mai.setAction(new SimpleFooAction());

        User user = new User();
        ActionContext.getContext().getValueStack().push(user);
        int before = ActionContext.getContext().getValueStack().size();
        interceptor.setParse("false");
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="106">
<file line="74" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\dispatcher\ServletActionRedirectResultTest.java"/>
<file line="129" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\dispatcher\ServletActionRedirectResultTest.java"/>
<codefragment>
<![CDATA[
        ActionContext context = ActionContext.getContext();
        MockHttpServletRequest req = new MockHttpServletRequest();
        MockHttpServletResponse res = new MockHttpServletResponse();
        context.put(ServletActionContext.HTTP_REQUEST, req);
        context.put(ServletActionContext.HTTP_RESPONSE, res);


        Map<String, ResultConfig> results=  new HashMap<String, ResultConfig>();
        results.put("myResult", resultConfig);

        ActionConfig actionConfig = new ActionConfig.Builder("", "", "")
                .addResultConfigs(results).build();

        ServletActionRedirectResult result = new ServletActionRedirectResult();
        result.setActionName("myAction");
        result.setNamespace("/myNamespace");
        result.setParse(false);
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="106">
<file line="47" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\dispatcher\HttpHeaderResultTest.java"/>
<file line="65" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\dispatcher\HttpHeaderResultTest.java"/>
<codefragment>
<![CDATA[
    public void testHeaderValuesAreParsedAndSet() throws Exception {
        Map<String, String> params = new HashMap<String, String>();
        params.put("headers.foo", "${bar}");
        params.put("headers.baz", "baz");

        Map<String, String> values = new HashMap<String, String>();
        values.put("bar", "abc");
        ActionContext.getContext().getValueStack().push(values);

        reflectionProvider.setProperties(params, result);

        responseMock.expect("addHeader", C.args(C.eq("foo"), C.eq("abc")));
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="106">
<file line="118" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\main\java\org\apache\struts2\interceptor\I18nInterceptor.java"/>
<file line="131" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\interceptor\I18nInterceptor.java"/>
<codefragment>
<![CDATA[
        LocaleFinder localeFinder = new LocaleFinder(invocation);
        Locale locale = getLocaleFromParam(localeFinder.getRequestedLocale());
        locale = storeLocale(invocation, locale, localeFinder.getStorage());
        saveLocale(invocation, locale);

        if (LOG.isDebugEnabled()) {
            LOG.debug("before Locale=#0", invocation.getStack().findValue("locale"));
        }

        final String result = invocation.invoke();

        if (LOG.isDebugEnabled()) {
            LOG.debug("after Locale=#0", invocation.getStack().findValue("locale"));
            LOG.debug("intercept } ");
        }

        return result;
    }
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="106">
<file line="85" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\main\java\org\apache\struts2\dispatcher\RequestMap.java"/>
<file line="77" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\main\java\org\apache\struts2\portlet\PortletRequestMap.java"/>
<codefragment>
<![CDATA[
                        Entry entry = (Entry) obj;

                        return ((key == null) ? (entry.getKey() == null) : key
                                .equals(entry.getKey()))
                                && ((value == null) ? (entry.getValue() == null)
                                        : value.equals(entry.getValue()));
                    }

                    public int hashCode() {
                        return ((key == null) ? 0 : key.hashCode())
                                ^ ((value == null) ? 0 : value.hashCode());
                    }

                    public String getKey() {
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="105">
<file line="101" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\DefaultTextProviderTest.java"/>
<file line="112" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\DefaultTextProviderTest.java"/>
<codefragment>
<![CDATA[
        assertEquals("Hello World", tp.getText("hello", "this is default", args, null)); // no args in bundle
        assertEquals("Hello World Santa", tp.getText("hello.0", "this is default", args, null)); // only 1 arg in bundle
        assertEquals("Hello World. This is Santa speaking loud", tp.getText("hello.1", "this is default", args, null));

        assertEquals("this is default", tp.getText("not.in.bundle", "this is default", args, null));
        assertEquals("this is default Santa", tp.getText("not.in.bundle", "this is default {0}", args, null));
        assertEquals("this is default Santa speaking loud", tp.getText("not.in.bundle", "this is default {0} speaking {1}", args, null));
    }

    public void testGetBundle() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="105">
<file line="282" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\ActionSupportTest.java"/>
<file line="298" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\ActionSupportTest.java"/>
<codefragment>
<![CDATA[
        assertEquals("Hello World", mas.getText("hello", "this is default", args, stack)); // no args in bundle
        assertEquals("Hello World Santa", mas.getText("hello.0", "this is default", args, stack)); // only 1 arg in bundle
        assertEquals("Hello World. This is Santa speaking loud", mas.getText("hello.1", "this is default", args, stack));

        assertEquals("this is default", mas.getText("not.in.bundle", "this is default", args, stack));
        assertEquals("this is default Santa", mas.getText("not.in.bundle", "this is default {0}", args, stack));
        assertEquals("this is default Santa speaking loud", mas.getText("not.in.bundle", "this is default {0} speaking {1}", args, stack));
    }

    public void testGetBundle() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="105">
<file line="125" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\main\java\org\apache\struts2\views\freemarker\PortletFreemarkerResult.java"/>
<file line="154" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\main\java\org\apache\struts2\views\freemarker\PortletFreemarkerResult.java"/>
<codefragment>
<![CDATA[
    private void executeResourceResult(String location, ActionInvocation invocation)
             throws TemplateException, IOException, PortletException {
         this.location = location;
         this.invocation = invocation;
         this.configuration = getConfiguration();
         this.wrapper = getObjectWrapper();

         HttpServletRequest req = ServletActionContext.getRequest();

         if (!location.startsWith("/")) {
             String base = ResourceUtil.getResourceBase(req);
             location = base + "/" + location;
         }

         Template template = configuration.getTemplate(location, deduceLocale());
         TemplateModel model = createModel();
         // Give subclasses a chance to hook into preprocessing
         if (preTemplateProcess(template, model)) {
             try {
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="105">
<file line="219" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\FormTagTest.java"/>
<file line="285" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\ui\FormTagTest.java"/>
<codefragment>
<![CDATA[
    public void testFormWithCustomOnsubmitEnabledWithValidateEnabled3() throws Exception {

        prepareMockInvocation();
        FormTag tag = new FormTag();
        tag.setPageContext(pageContext);
        tag.setName("myForm");
        tag.setMethod("post");
        tag.setAction("doubleValidationAction");
        tag.setAcceptcharset("UTF-8");
        tag.setEnctype("myEncType");
        tag.setTitle("mytitle");
        tag.setOnsubmit("submitMe()");
        tag.setValidate("true");
        tag.setNamespace("");

        UpDownSelectTag t = new UpDownSelectTag();
        t.setPageContext(pageContext);
        t.setName("myUpDownSelectTag");
        t.setList("{}");

        tag.doStartTag();
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="105">
<file line="94" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\main\java\org\apache\struts2\components\DoubleListUIBean.java"/>
<file line="102" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\main\java\org\apache\struts2\components\Select.java"/>
<codefragment>
<![CDATA[
    }

    public void evaluateExtraParams() {
        super.evaluateExtraParams();

        if (emptyOption != null) {
            addParameter("emptyOption", findValue(emptyOption, Boolean.class));
        }

        if (multiple != null) {
            addParameter("multiple", findValue(multiple, Boolean.class));
        }

        if (size != null) {
            addParameter("size", findString(size));
        }

        if ((headerKey != null) && (headerValue != null)) {
            addParameter("headerKey", findString(headerKey));
            addParameter("headerValue", findString(headerValue));
        }
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="104">
<file line="409" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\ELParser.java"/>
<file line="677" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\ELParser.java"/>
<codefragment>
<![CDATA[
          Multiplication();
        } catch (Throwable jjte002) {
                   if (jjtc002) {
                     jjtree.clearNodeScope(jjtn002);
                     jjtc002 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte002 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte002;}
                   }
                   if (jjte002 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte002;}
                   }
                   {if (true) throw (Error)jjte002;}
        } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002,  2);
                   }
        }
        break;
      default:
        jj_la1[17] = jj_gen;
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="104">
<file line="253" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\ELParser.java"/>
<file line="309" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\ELParser.java"/>
<codefragment>
<![CDATA[
        Equality();
      } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    {if (true) throw (RuntimeException)jjte001;}
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte001;}
                                  }
                                  {if (true) throw (Error)jjte001;}
      } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  2);
                                  }
      }
    }
  }

/*
 * Equality
 * For '==' 'eq' '!=' 'ne', then Compare
 */
  final public void Equality() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="104">
<file line="289" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\PropertyTagTest.java"/>
<file line="317" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\PropertyTagTest.java"/>
<codefragment>
<![CDATA[
        initDispatcher(new HashMap() {{ put(StrutsConstants.STRUTS_TAG_ALTSYNTAX, "false");}});

        Foo foo = new Foo();
        foo.setTitle("tm_jee");
        stack.push(foo);

        MockJspWriter jspWriter = new MockJspWriter();
        jspWriter.setExpectedData("Foo is: tm_jee");

        MockPageContext pageContext = new MockPageContext();
        pageContext.setJspWriter(jspWriter);
        pageContext.setRequest(request);

        // test
        {PropertyTag tag = new PropertyTag();
        tag.setPageContext(pageContext);
        tag.setValue("formatTitle()");
        tag.doStartTag();
        tag.doEndTag();}

        // verify test
        request.verify();
        jspWriter.verify();
        pageContext.verify();
    }


    public void testWithoutAltSyntax2() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="104">
<file line="61" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\main\java\org\apache\struts2\dispatcher\ng\filter\StrutsPrepareAndExecuteFilter.java"/>
<file line="58" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\main\java\org\apache\struts2\dispatcher\ng\filter\StrutsPrepareFilter.java"/>
<codefragment>
<![CDATA[
            prepare = new PrepareOperations(dispatcher);
            this.excludedPatterns = init.buildExcludedPatternsList(dispatcher);

            postInit(dispatcher, filterConfig);
        } finally {
            if (dispatcher != null) {
                dispatcher.cleanUpAfterInit();
            }
            init.cleanup();
        }
    }

    /**
     * Callback for post initialization
     */
    protected void postInit(Dispatcher dispatcher, FilterConfig filterConfig) {
    }

    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {

        HttpServletRequest request = (HttpServletRequest) req;
        HttpServletResponse response = (HttpServletResponse) res;

        try {
            if (excludedPatterns != null && prepare.isUrlExcluded(request, excludedPatterns)) {
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="103">
<file line="92" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\ValidationAwareSupport.java"/>
<file line="116" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\validator\GenericValidatorContext.java"/>
<codefragment>
<![CDATA[
    public synchronized boolean hasFieldErrors() {
        return (fieldErrors != null) && !fieldErrors.isEmpty();
    }

    private Collection<String> internalGetActionErrors() {
        if (actionErrors == null) {
            actionErrors = new ArrayList<String>();
        }

        return actionErrors;
    }

    private Collection<String> internalGetActionMessages() {
        if (actionMessages == null) {
            actionMessages = new ArrayList<String>();
        }

        return actionMessages;
    }

    private Map<String, List<String>> internalGetFieldErrors() {
        if (fieldErrors == null) {
            fieldErrors = new HashMap<String, List<String>>();
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="103">
<file line="146" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\test\java\org\apache\struts2\portlet\dispatcher\Jsr168DispatcherTest.java"/>
<file line="151" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\test\java\org\apache\struts2\portlet\dispatcher\Jsr286DispatcherTest.java"/>
<codefragment>
<![CDATA[
		setupActionFactory("/edit", "default", "success",
				EasyMock.createNiceMock(ValueStack.class));

		mockInvocation.expects(once()).method("getStack")
				.will(returnValue(null));

		try {
			dispatcher
					.setActionProxyFactory((ActionProxyFactory) mockActionFactory
							.proxy());
			dispatcher.init((PortletConfig) mockConfig.proxy());
			dispatcher.render((RenderRequest) mockRequest.proxy(),
					(RenderResponse) mockResponse.proxy());
		} catch (Exception e) {
			e.printStackTrace();
			fail("Error occured");
		}
	}
	
	public void testParseConfigWithBang() {
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="103">
<file line="132" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\components\UIComponentTest.java"/>
<file line="253" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\components\UIComponentTest.java"/>
<file line="332" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\components\UIComponentTest.java"/>
<file line="384" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\components\UIComponentTest.java"/>
<file line="482" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\components\UIComponentTest.java"/>
<file line="506" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\components\UIComponentTest.java"/>
<codefragment>
<![CDATA[
            TextFieldTag tag = new TextFieldTag();
            tag.setName("name");
            tag.setLabel("label");
            tag.setPageContext(pageContext);
            tag.doStartTag();
            assertEquals(tag.getComponent().getComponentStack().peek(), tag.getComponent());
            tag.doEndTag();
            assertEquals(t.getComponent().getComponentStack().peek(), t.getComponent());

            t.doEndTag();
        }
        catch (Exception e) {
            e.printStackTrace();
            fail(e.toString());
        }
    }

    // token
    public void testTokenComponentDisposeItselfFromComponentStack() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="102">
<file line="32" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\validator\DoubleRangeValidatorTest.java"/>
<file line="190" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\test\java\com\opensymphony\xwork2\validator\DoubleRangeValidatorTest.java"/>
<codefragment>
<![CDATA[
        ActionProxy proxy = actionProxyFactory.createActionProxy("", MockConfigurationProvider.EXPRESSION_VALIDATION_ACTION, context);
        proxy.execute();
        assertTrue(((ValidationAware) proxy.getAction()).hasFieldErrors());

        Map<String, List<String>> errors = ((ValidationAware) proxy.getAction()).getFieldErrors();
        List<String> errorMessages = errors.get("percentage");
        assertNotNull("Expected double range validation error message.", errorMessages);
        assertEquals(1, errorMessages.size());

        String errorMessage = errorMessages.get(0);
        assertNotNull("Expecting: percentage must be between 0.1 and 10.1, current value is 100.0123.", errorMessage);
        assertEquals("percentage must be between 0.1 and 10.1, current value is 100.0123.", errorMessage);
    }

    public void testExpressionParams() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="102">
<file line="183" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\test\java\org\apache\struts2\views\jsp\PortletUrlTagTest.java"/>
<file line="256" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\test\java\org\apache\struts2\views\jsp\PortletUrlTagTest.java"/>
<codefragment>
<![CDATA[
    public void testUrlWithQueryParams() throws Exception {

        PortletMode mode = PortletMode.VIEW;

        mockHttpReq.stubs().method("getQueryString").will(returnValue(""));

        mockPortletRes.expects(once()).method("createRenderURL").will(
                returnValue(mockPortletUrl.proxy()));
        mockCtx.expects(atLeastOnce()).method("getMajorVersion").will(returnValue(1));

        Map paramMap = new HashMap();
        paramMap.put(PortletConstants.ACTION_PARAM, new String[]{"/view/testAction"});
        paramMap.put("testParam1", new String[]{"testValue1"});
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="102">
<file line="113" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\ELParser.java"/>
<file line="1078" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\ELParser.java"/>
<file line="1207" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\ELParser.java"/>
<codefragment>
<![CDATA[
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/*
 * Literal
 * Reserved Keywords
 */
  final public void Literal() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="102">
<file line="53" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\dispatcher\mapper\DefaultActionMapperTest.java"/>
<file line="44" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\dispatcher\mapper\Restful2ActionMapperTest.java"/>
<codefragment>
<![CDATA[
        mapper.setExtensions("");
        req = new MockHttpServletRequest();
        req.setupGetParameterMap(new HashMap());
        req.setupGetContextPath("/my/namespace");

        config = new DefaultConfiguration();
        PackageConfig pkg = new PackageConfig.Builder("myns")
            .namespace("/my/namespace").build();
        PackageConfig pkg2 = new PackageConfig.Builder("my")
            .namespace("/my").build();
        config.addPackageConfig("mvns", pkg);
        config.addPackageConfig("my", pkg2);
        configManager = new ConfigurationManager() {
            public Configuration getConfiguration() {
                return config;
            }
        };
    }
    
    public void testGetIndex() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="102">
<file line="132" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\components\UIComponentTest.java"/>
<file line="409" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\components\UIComponentTest.java"/>
<codefragment>
<![CDATA[
            tag.setList("{}");
            tag.setName("name");
            tag.setLabel("label");
            tag.setPageContext(pageContext);
            tag.doStartTag();
            assertEquals(tag.getComponent().getComponentStack().peek(), tag.getComponent());
            tag.doEndTag();
            assertEquals(t.getComponent().getComponentStack().peek(), t.getComponent());

            t.doEndTag();
        }
        catch (Exception e) {
            e.printStackTrace();
            fail(e.toString());
        }
    }

    // select
    public void testSelectComponentDisposeItselfFromComponentStack() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="102">
<file line="90" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\main\java\org\apache\struts2\dispatcher\ApplicationMap.java"/>
<file line="77" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\main\java\org\apache\struts2\portlet\PortletRequestMap.java"/>
<codefragment>
<![CDATA[
                        Entry entry = (Entry) obj;

                        return ((key == null) ? (entry.getKey() == null) : key
                                .equals(entry.getKey()))
                                && ((value == null) ? (entry.getValue() == null)
                                        : value.equals(entry.getValue()));
                    }

                    public int hashCode() {
                        return ((key == null) ? 0 : key.hashCode())
                                ^ ((value == null) ? 0 : value.hashCode());
                    }

                    public String getKey() {
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="101">
<file line="120" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\config\entities\InterceptorConfig.java"/>
<file line="120" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\xwork-core\src\main\java\com\opensymphony\xwork2\config\entities\ResultConfig.java"/>
<codefragment>
<![CDATA[
            target = new ResultConfig(orig);
        }

        public Builder name(String name) {
            target.name = name;
            return this;
        }

        public Builder className(String name) {
            target.className = name;
            return this;
        }

         public Builder addParam(String name, String value) {
            target.params.put(name, value);
            return this;
        }

        public Builder addParams(Map<String,String> params) {
            target.params.putAll(params);
            return this;
        }

        public Builder location(Location loc) {
            target.location = loc;
            return this;
        }

        public ResultConfig build() {
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="101">
<file line="146" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\test\java\org\apache\struts2\portlet\dispatcher\Jsr168DispatcherTest.java"/>
<file line="269" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\portlet\src\test\java\org\apache\struts2\portlet\dispatcher\Jsr168DispatcherTest.java"/>
<codefragment>
<![CDATA[
        setupActionFactory("/edit", "default", "success", EasyMock.createNiceMock(ValueStack.class));

        mockInvocation.expects(once()).method("getStack").will(
                returnValue(null));
        //mockSession.expects(once()).method("setAttribute").with(new Constraint[]{eq(PortletActionConstants.LAST_MODE), eq(PortletMode.VIEW)});
        try {
            dispatcher
                    .setActionProxyFactory((ActionProxyFactory) mockActionFactory
                            .proxy());
            dispatcher.init((PortletConfig) mockConfig.proxy());
            dispatcher.render((RenderRequest) mockRequest.proxy(),
                    (RenderResponse) mockResponse.proxy());
        } catch (Exception e) {
            e.printStackTrace();
            fail("Error occured");
        }
    }
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="101">
<file line="650" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\ELParser.java"/>
<file line="733" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\ELParser.java"/>
<codefragment>
<![CDATA[
          Unary();
        } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
        }
        break;
      case DIV0:
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="101">
<file line="519" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\ELParser.java"/>
<file line="772" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\ELParser.java"/>
<codefragment>
<![CDATA[
          Unary();
        } catch (Throwable jjte002) {
                           if (jjtc002) {
                             jjtree.clearNodeScope(jjtn002);
                             jjtc002 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte002 instanceof RuntimeException) {
                             {if (true) throw (RuntimeException)jjte002;}
                           }
                           if (jjte002 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte002;}
                           }
                           {if (true) throw (Error)jjte002;}
        } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002,  2);
                           }
        }
        break;
      case MOD0:
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="101">
<file line="370" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\ELParser.java"/>
<file line="480" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\ELParser.java"/>
<file line="650" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\ELParser.java"/>
<codefragment>
<![CDATA[
          Multiplication();
        } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
        }
        break;
      case MINUS:
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="101">
<file line="552" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\jsp\URLTagTest.java"/>
<file line="116" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\test\java\org\apache\struts2\dojo\views\jsp\ui\AbstractTagTest.java"/>
<codefragment>
<![CDATA[
        session = new SessionMap<String, Object>(request);
        Map<String, Object> extraContext = du.createContextMap(new RequestMap(request),
                request.getParameterMap(),
                session,
                new ApplicationMap(pageContext.getServletContext()),
                request,
                response);
        // let's not set the locale -- there is a test that checks if Dispatcher actually picks this up...
        // ... but generally we want to just use no locale (let it stay system default)
        extraContext.remove(ActionContext.LOCALE);
        stack.getContext().putAll(extraContext);

        context.put(ServletActionContext.HTTP_REQUEST, request);
        context.put(ServletActionContext.HTTP_RESPONSE, response);
        context.put(ServletActionContext.SERVLET_CONTEXT, servletContext);

        ActionContext.setContext(new ActionContext(context));
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="101">
<file line="90" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\main\java\org\apache\struts2\dispatcher\ApplicationMap.java"/>
<file line="125" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\main\java\org\apache\struts2\dispatcher\SessionMap.java"/>
<codefragment>
<![CDATA[
                            Map.Entry<K, V> entry = (Map.Entry<K, V>) obj;

                            return ((key == null) ? (entry.getKey() == null) : key.equals(entry.getKey())) && ((value == null) ? (entry.getValue() == null) : value.equals(entry.getValue()));
                        }

                        public int hashCode() {
                            return ((key == null) ? 0 : key.hashCode()) ^ ((value == null) ? 0 : value.hashCode());
                        }

                        public K getKey() {
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="101">
<file line="41" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\apps\showcase\src\main\java\org\apache\struts2\showcase\fileupload\MultipleFileUploadUsingArrayAction.java"/>
<file line="68" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\apps\showcase\src\main\java\org\apache\struts2\showcase\fileupload\MultipleFileUploadUsingListAction.java"/>
<codefragment>
<![CDATA[
		System.out.println("\n\n upload1");
		System.out.println("files:");
		for (File u : uploads) {
			System.out.println("*** " + u + "\t" + u.length());
		}
		System.out.println("filenames:");
		for (String n : uploadFileNames) {
			System.out.println("*** " + n);
		}
		System.out.println("content types:");
		for (String c : uploadContentTypes) {
			System.out.println("*** " + c);
		}
		System.out.println("\n\n");
		return SUCCESS;
	}
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="100">
<file line="677" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\ELParser.java"/>
<file line="772" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\ELParser.java"/>
<codefragment>
<![CDATA[
          Unary();
        } catch (Throwable jjte002) {
                           if (jjtc002) {
                             jjtree.clearNodeScope(jjtn002);
                             jjtc002 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte002 instanceof RuntimeException) {
                             {if (true) throw (RuntimeException)jjte002;}
                           }
                           if (jjte002 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte002;}
                           }
                           {if (true) throw (Error)jjte002;}
        } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002,  2);
                           }
        }
        break;
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="100">
<file line="558" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\ELParser.java"/>
<file line="811" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\ELParser.java"/>
<codefragment>
<![CDATA[
          Unary();
        } catch (Throwable jjte003) {
                           if (jjtc003) {
                             jjtree.clearNodeScope(jjtn003);
                             jjtc003 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte003 instanceof RuntimeException) {
                             {if (true) throw (RuntimeException)jjte003;}
                           }
                           if (jjte003 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte003;}
                           }
                           {if (true) throw (Error)jjte003;}
        } finally {
                           if (jjtc003) {
                             jjtree.closeNodeScope(jjtn003,  2);
                           }
        }
        break;
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="100">
<file line="409" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\ELParser.java"/>
<file line="519" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\parser\ELParser.java"/>
<codefragment>
<![CDATA[
          Math();
        } catch (Throwable jjte002) {
                         if (jjtc002) {
                           jjtree.clearNodeScope(jjtn002);
                           jjtc002 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte002 instanceof RuntimeException) {
                           {if (true) throw (RuntimeException)jjte002;}
                         }
                         if (jjte002 instanceof ParseException) {
                           {if (true) throw (ParseException)jjte002;}
                         }
                         {if (true) throw (Error)jjte002;}
        } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002,  2);
                         }
        }
        break;
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="100">
<file line="220" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\lang\ELArithmetic.java"/>
<file line="241" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\lang\ELArithmetic.java"/>
<file line="262" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\lang\ELArithmetic.java"/>
<file line="302" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\embeddedjsp\src\main\java\org\apache\struts2\el\lang\ELArithmetic.java"/>
<codefragment>
<![CDATA[
    public final static Number multiply(final Object obj0, final Object obj1) {
        if (obj0 == null && obj1 == null) {
            return new Long(0);
        }

        final ELArithmetic delegate;
        if (BIGDECIMAL.matches(obj0, obj1))
            delegate = BIGDECIMAL;
        else if (DOUBLE.matches(obj0, obj1))
            delegate = DOUBLE;
        else if (BIGINTEGER.matches(obj0, obj1))
            delegate = BIGINTEGER;
        else
            delegate = LONG;

        Number num0 = delegate.coerce(obj0);
        Number num1 = delegate.coerce(obj1);

        return delegate.multiply(num0, num1);
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="100">
<file line="326" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\components\Autocompleter.java"/>
<file line="245" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\plugins\dojo\src\main\java\org\apache\struts2\dojo\components\Submit.java"/>
<codefragment>
<![CDATA[
            addParameter("ajaxAfterValidation", findValue(ajaxAfterValidation, Boolean.class));

        // generate a random ID if not explicitly set and not parsing the content
        Boolean parseContent = (Boolean)stack.getContext().get(Head.PARSE_CONTENT);
        boolean generateId = (parseContent != null ? !parseContent : true);

        addParameter("pushId", generateId);
        if ((this.id == null || this.id.length() == 0) && generateId) {
            // resolves Math.abs(Integer.MIN_VALUE) issue reported by FindBugs
            // http://findbugs.sourceforge.net/bugDescriptions.html#RV_ABSOLUTE_VALUE_OF_RANDOM_INT
            int nextInt = RANDOM.nextInt();
            nextInt = nextInt == Integer.MIN_VALUE ? Integer.MAX_VALUE : Math.abs(nextInt);
            this.id = "widget_" + String.valueOf(nextInt);
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="100">
<file line="153" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\freemarker\FreeMarkerResultTest.java"/>
<file line="184" path="D:\joshuaga-arcade-21f0389ea498\joshuaga-arcade-21f0389ea498\subject_systems\Struts2\src\struts-2.3.30\src\core\src\test\java\org\apache\struts2\views\freemarker\FreemarkerResultMockedTest.java"/>
<codefragment>
<![CDATA[
        request = new MockHttpServletRequest();
        stack = ActionContext.getContext().getValueStack();

        context = new ActionContext(stack.getContext());
        context.put(StrutsStatics.HTTP_RESPONSE, response);
        context.put(StrutsStatics.HTTP_REQUEST, request);
        context.put(StrutsStatics.SERVLET_CONTEXT, servletContext);

        ServletActionContext.setServletContext(servletContext);
        ServletActionContext.setRequest(request);
        ServletActionContext.setResponse(response);
        servletContext.setAttribute(FreemarkerManager.CONFIG_SERVLET_CONTEXT_KEY, null);

        invocation = new MockActionInvocation();
        invocation.setStack(stack);
        invocation.setInvocationContext(context);
]]>
</codefragment>
</duplication>
</pmd-cpd>